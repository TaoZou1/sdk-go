/* Copyright Â© 2019 VMware, Inc. All Rights Reserved.
   SPDX-License-Identifier: BSD-2-Clause */

// Code generated. DO NOT EDIT.

/*
 * Data type definitions file for package: com.vmware.nsx_global_policy.model.
 * Includes binding types of a top level structures and enumerations.
 * Shared by client-side stubs and server-side skeletons to ensure type
 * compatibility.
 */

package model

import (
	"reflect"
	"gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/bindings"
	"gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/data"
)


// An ServiceEntry that represents an ALG protocol
type ALGTypeServiceEntry struct {
    // Possible values are: 
    //
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_ORACLE_TNS
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_FTP
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_SUN_RPC_TCP
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_SUN_RPC_UDP
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_MS_RPC_TCP
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_MS_RPC_UDP
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_NBNS_BROADCAST
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_NBDG_BROADCAST
    // * ALGTypeServiceEntry#ALGTypeServiceEntry_ALG_TFTP
    //
    //  The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are deprecated. Please use UDP protocol and create L4 Port Set type of service instead.
	Alg *string
    // The destination_port cannot be empty and must be a single value. format: port-or-range
	DestinationPorts []string
	SourcePorts []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ALGTypeServiceEntry__TYPE_IDENTIFIER = "ALGTypeServiceEntry"
const ALGTypeServiceEntry_ALG_ORACLE_TNS = "ORACLE_TNS"
const ALGTypeServiceEntry_ALG_FTP = "FTP"
const ALGTypeServiceEntry_ALG_SUN_RPC_TCP = "SUN_RPC_TCP"
const ALGTypeServiceEntry_ALG_SUN_RPC_UDP = "SUN_RPC_UDP"
const ALGTypeServiceEntry_ALG_MS_RPC_TCP = "MS_RPC_TCP"
const ALGTypeServiceEntry_ALG_MS_RPC_UDP = "MS_RPC_UDP"
const ALGTypeServiceEntry_ALG_NBNS_BROADCAST = "NBNS_BROADCAST"
const ALGTypeServiceEntry_ALG_NBDG_BROADCAST = "NBDG_BROADCAST"
const ALGTypeServiceEntry_ALG_TFTP = "TFTP"

// Represents the space in which the policy is being defined.
type AbstractSpace struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * AbstractSpace#AbstractSpace_CONNECTIVITY_STRATEGY_WHITELIST
    // * AbstractSpace#AbstractSpace_CONNECTIVITY_STRATEGY_BLACKLIST
    // * AbstractSpace#AbstractSpace_CONNECTIVITY_STRATEGY_WHITELIST_ENABLE_LOGGING
    // * AbstractSpace#AbstractSpace_CONNECTIVITY_STRATEGY_BLACKLIST_ENABLE_LOGGING
    // * AbstractSpace#AbstractSpace_CONNECTIVITY_STRATEGY_NONE
    //
    //  The connectivity strategy is deprecated. Use default layer3 rule, /infra/domains/default/security-policies/default-layer3-security-policy/rules/default-layer3-rule. This field indicates the default connectivity policy for the infra or tenant space WHITELIST - Adds a default drop rule. Administrator can then use \"allow\" rules (aka whitelist) to allow traffic between groups BLACKLIST - Adds a default allow rule. Admin can then use \"drop\" rules (aka blacklist) to block traffic between groups WHITELIST_ENABLE_LOGGING - Whitelising with logging enabled BLACKLIST_ENABLE_LOGGING - Blacklisting with logging enabled NONE - No default rules are added.
	ConnectivityStrategy *string
}
const AbstractSpace_CONNECTIVITY_STRATEGY_WHITELIST = "WHITELIST"
const AbstractSpace_CONNECTIVITY_STRATEGY_BLACKLIST = "BLACKLIST"
const AbstractSpace_CONNECTIVITY_STRATEGY_WHITELIST_ENABLE_LOGGING = "WHITELIST_ENABLE_LOGGING"
const AbstractSpace_CONNECTIVITY_STRATEGY_BLACKLIST_ENABLE_LOGGING = "BLACKLIST_ENABLE_LOGGING"
const AbstractSpace_CONNECTIVITY_STRATEGY_NONE = "NONE"

type AcceptableComponentVersion struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // List of component versions
	AcceptableVersions []string
    // Possible values are: 
    //
    // * AcceptableComponentVersion#AcceptableComponentVersion_COMPONENT_TYPE_HOST
    // * AcceptableComponentVersion#AcceptableComponentVersion_COMPONENT_TYPE_EDGE
    // * AcceptableComponentVersion#AcceptableComponentVersion_COMPONENT_TYPE_CCP
    // * AcceptableComponentVersion#AcceptableComponentVersion_COMPONENT_TYPE_MP
    //
    //  Node type
	ComponentType *string
}
const AcceptableComponentVersion_COMPONENT_TYPE_HOST = "HOST"
const AcceptableComponentVersion_COMPONENT_TYPE_EDGE = "EDGE"
const AcceptableComponentVersion_COMPONENT_TYPE_CCP = "CCP"
const AcceptableComponentVersion_COMPONENT_TYPE_MP = "MP"

type AcceptableComponentVersionList struct {
    // Acceptable version whitelist for different components
	Results []AcceptableComponentVersion
}

// Reaction Action is the action to take when the stipulated criteria specified in the event exist over the source. Some example actions include: - Notify Admin (or VMC's SRE) via email. - Populate a specific label with the IPSec VPN Session. - Remove the IPSec VPN Session from a specific label.
type Action struct {
    // Possible values are: 
    //
    // * Action#Action_RESOURCE_TYPE_PATCHRESOURCES
    // * Action#Action_RESOURCE_TYPE_SETFIELDS
    //
    //  Reaction Action resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const Action__TYPE_IDENTIFIER = "Action"
const Action_RESOURCE_TYPE_PATCHRESOURCES = "PatchResources"
const Action_RESOURCE_TYPE_SETFIELDS = "SetFields"

// Resources managed during restore process
type ActionableResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // A resource reference on which actions can be performed format: hostname-or-ip
	IpAddress *string
}

type ActionableResourceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List results
	Results []ActionableResource
}

// An identity source service that runs Microsoft Active Directory. The service allows selected user accounts defined in Active Directory to log into and access NSX-T.
type ActiveDirectoryIdentitySource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LdapIdentitySource#LdapIdentitySource_RESOURCE_TYPE_ACTIVEDIRECTORYIDENTITYSOURCE
    // * LdapIdentitySource#LdapIdentitySource_RESOURCE_TYPE_OPENLDAPIDENTITYSOURCE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The subtree of the LDAP identity source to search when locating users and groups.
	BaseDn *string
    // The name of the authentication domain. When users log into NSX using an identity of the form \"user\\\\@domain\", NSX uses the domain portion to determine which LDAP identity source to use. For Active Directory, this domain name must match the domain of the Active Directory.
	DomainName *string
    // The list of LDAP servers that provide LDAP service for this identity source. Currently, only one LDAP server is supported.
	LdapServers []IdentitySourceLdapServer
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ActiveDirectoryIdentitySource__TYPE_IDENTIFIER = "ActiveDirectoryIdentitySource"

type AdvanceClusterRestoreInput struct {
    // Unique id of an instruction (as returned by the GET /restore/status call) for which input is to be provided
	Id *string
    // List of resources for which the instruction is applicable.
	Resources []SelectableResourceReference
}

type AdvanceClusterRestoreRequest struct {
    // List of instructions and their associated data
	Data []AdvanceClusterRestoreInput
}

// Aggregate of DNS forwarder statistics across enforcement points.
type AggregateDNSForwarderStatistics struct {
    // String path of the DNS forwarder intent.
	IntentPath *string
    // List of DNS forwarder statistics per enforcement point.
	StatisticsPerEnforcementPoint []*data.StructValue
}

// Aggregate of DNS forwarder status across enforcement points.
type AggregateDNSForwarderStatus struct {
    // String path of the DNS forwarder intent.
	IntentPath *string
    // List of DNS forwarder status per enforcement point.
	StatusPerEnforcementPoint []*data.StructValue
}

// Aggregate of DNS forwarder nslookup answer across enforcement points.
type AggregatePolicyDnsAnswer struct {
    // List of DNS forwarder nslookup answer per enforcement point.
	DnsAnswerPerEnforcementPoint []*data.StructValue
    // String path of the DNS forwarder intent.
	IntentPath *string
}

// Aggregate of PolicyRuntimeInfoPerEP across Enforcement Points.
type AggregatePolicyRuntimeInfo struct {
    // Intent path of object, forward slashes must be escaped using %2F.
	IntentPath *string
}

type AggregatedDataCounter struct {
	RxBytes *DataCounter
	RxPackets *DataCounter
	TxBytes *DataCounter
	TxPackets *DataCounter
}

type AggregatedDataCounterEx struct {
	RxBytes *DataCounter
	RxPackets *DataCounter
	TxBytes *DataCounter
	TxPackets *DataCounter
	DroppedBySecurityPackets *PacketsDroppedBySecurity
	MacLearning *MacLearningCounters
}

type AggregatedLogicalRouterPortCounters struct {
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Rx *LogicalRouterPortCounters
	Tx *LogicalRouterPortCounters
}

// Detailed information about an API Error
type ApiError struct {
    // Further details about the error
	Details *string
    // A numeric error code format: int64
	ErrorCode *int64
    // Additional data about the error
	ErrorData *data.StructValue
    // A description of the error
	ErrorMessage *string
    // The module name where the error occurred
	ModuleName *string
    // Other errors related to this error
	RelatedErrors []RelatedApiError
}

// API Request Body is an Event Source that represents an API request body that is being reveived as part of an API. Supported Request Bodies are those received as part of a PATCH/PUT/POST request.
type ApiRequestBody struct {
    // Regex path representing a regex expression on resources. This regex is used to identify the request body(ies) that is/are the source of the Event. For instance: specifying \"Lb\* | /infra/tier-0s/vmc/ipsec-vpn-services/default\" as a source means that ANY resource starting with Lb or ANY resource with \"/infra/tier-0s/vmc/ipsec-vpn-services/default\" as path would be the source of the event in question.
	ResourcePointer *string
    // Possible values are: 
    //
    // * Source#Source_RESOURCE_TYPE_RESOURCEOPERATION
    // * Source#Source_RESOURCE_TYPE_APIREQUESTBODY
    //
    //  Event Source resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ApiRequestBody__TYPE_IDENTIFIER = "ApiRequestBody"

type ArpHeader struct {
    // The destination IP address format: ipv4
	DstIp *string
    // Possible values are: 
    //
    // * ArpHeader#ArpHeader_OP_CODE_REQUEST
    // * ArpHeader#ArpHeader_OP_CODE_REPLY
    //
    //  This field specifies the nature of the Arp message being sent.
	OpCode *string
    // This field specifies the IP address of the sender. If omitted, the src_ip is set to 0.0.0.0. format: ipv4
	SrcIp *string
}
const ArpHeader_OP_CODE_REQUEST = "ARP_REQUEST"
const ArpHeader_OP_CODE_REPLY = "ARP_REPLY"

// Contains ARP snooping related configuration.
type ArpSnoopingConfig struct {
    // Number of arp snooped IP addresses Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached. format: int32
	ArpBindingLimit *int64
    // Indicates whether ARP snooping is enabled
	ArpSnoopingEnabled *bool
}

// Attribute specific to a partner. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. The Attributes used by the partner applicance.
type Attribute struct {
    // Possible values are: 
    //
    // * Attribute#Attribute_ATTRIBUTE_TYPE_IP_ADDRESS
    // * Attribute#Attribute_ATTRIBUTE_TYPE_PORT
    // * Attribute#Attribute_ATTRIBUTE_TYPE_PASSWORD
    // * Attribute#Attribute_ATTRIBUTE_TYPE_STRING
    // * Attribute#Attribute_ATTRIBUTE_TYPE_LONG
    // * Attribute#Attribute_ATTRIBUTE_TYPE_BOOLEAN
    //
    //  Attribute Type can be of any of the allowed enum type.
	AttributeType *string
    // Attribute display name string value.
	DisplayName *string
    // Attribute key string value.
	Key *string
    // Read only Attribute cannot be overdidden by service instance/deployment.
	ReadOnly *bool
    // Attribute value string value.
	Value *string
}
const Attribute_ATTRIBUTE_TYPE_IP_ADDRESS = "IP_ADDRESS"
const Attribute_ATTRIBUTE_TYPE_PORT = "PORT"
const Attribute_ATTRIBUTE_TYPE_PASSWORD = "PASSWORD"
const Attribute_ATTRIBUTE_TYPE_STRING = "STRING"
const Attribute_ATTRIBUTE_TYPE_LONG = "LONG"
const Attribute_ATTRIBUTE_TYPE_BOOLEAN = "BOOLEAN"

// Contains type specific properties of generic realized entity
type AttributeVal struct {
    // Possible values are: 
    //
    // * AttributeVal#AttributeVal_DATA_TYPE_STRING
    // * AttributeVal#AttributeVal_DATA_TYPE_DATE
    // * AttributeVal#AttributeVal_DATA_TYPE_INTEGER
    // * AttributeVal#AttributeVal_DATA_TYPE_BOOLEAN
    //
    //  Datatype of the property
	DataType *string
    // Attribute key
	Key *string
    // If attribute has a single value or collection of values
	Multivalue *bool
    // List of attribute values
	Values []string
}
const AttributeVal_DATA_TYPE_STRING = "STRING"
const AttributeVal_DATA_TYPE_DATE = "DATE"
const AttributeVal_DATA_TYPE_INTEGER = "INTEGER"
const AttributeVal_DATA_TYPE_BOOLEAN = "BOOLEAN"

// Represents X and Y axes of a graph. For a multi-graph, the same axes are shared by all the graphs.
type Axes struct {
    // Label for X axis of a graph
	XLabel *Label
    // Label for Y axis of a graph
	YLabel *Label
}

// Configuration for taking manual/automated backup
type BackupConfiguration struct {
    // A number of seconds after a last backup, that needs to pass, before a topology change will trigger a generation of a new cluster/node backups. If parameter is not provided, then changes in a topology will not trigger a generation of cluster/node backups. format: int64
	AfterInventoryUpdateInterval *int64
    // true if automated backup is enabled
	BackupEnabled *bool
    // Set when backups should be taken - on a weekly schedule or at regular intervals.
	BackupSchedule *data.StructValue
    // The minimum number of seconds between each upload of the inventory summary to backup server. format: int64
	InventorySummaryInterval *int64
    // Passphrase used to encrypt backup files. The passphrase specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (any other non-space character).
	Passphrase *string
    // The server to which backups will be sent.
	RemoteFileServer *RemoteFileServer
}

// Past backup operation details
type BackupOperationHistory struct {
    // Statuses of previous cluser backups
	ClusterBackupStatuses []BackupOperationStatus
    // Statuses of previous inventory backups
	InventoryBackupStatuses []BackupOperationStatus
    // Statuses of previous node backups
	NodeBackupStatuses []BackupOperationStatus
}

// Backup operation status
type BackupOperationStatus struct {
    // Unique identifier of a backup
	BackupId *string
    // Time when operation was ended format: int64
	EndTime *int64
    // Possible values are: 
    //
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_NOT_RUN_ON_MASTER
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_SERVER_UNREACHABLE
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_AUTHENTICATION_FAILURE
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_PERMISSION_ERROR
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_TIMEOUT
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_BAD_FINGERPRINT
    // * BackupOperationStatus#BackupOperationStatus_ERROR_CODE_GENERIC_ERROR
    //
    //  Error code
	ErrorCode *string
    // Error code details
	ErrorMessage *string
    // Time when operation was started format: int64
	StartTime *int64
    // True if backup is successfully completed, else false
	Success *bool
}
const BackupOperationStatus_ERROR_CODE_NOT_RUN_ON_MASTER = "BACKUP_NOT_RUN_ON_MASTER"
const BackupOperationStatus_ERROR_CODE_SERVER_UNREACHABLE = "BACKUP_SERVER_UNREACHABLE"
const BackupOperationStatus_ERROR_CODE_AUTHENTICATION_FAILURE = "BACKUP_AUTHENTICATION_FAILURE"
const BackupOperationStatus_ERROR_CODE_PERMISSION_ERROR = "BACKUP_PERMISSION_ERROR"
const BackupOperationStatus_ERROR_CODE_TIMEOUT = "BACKUP_TIMEOUT"
const BackupOperationStatus_ERROR_CODE_BAD_FINGERPRINT = "BACKUP_BAD_FINGERPRINT"
const BackupOperationStatus_ERROR_CODE_GENERIC_ERROR = "BACKUP_GENERIC_ERROR"

// Data for a single backup/restore card
type BackupOverview struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List of timestamps of backed-up cluster files
	Results []ClusterBackupInfo
    // Configuration to generate a manual/automated backup
	BackupConfig *BackupConfiguration
    // Status of the last backup execution per component
	BackupOperationHistory *BackupOperationHistory
    // Backup status decribes type, phase, success/failure and time of a | latest backup execution
	CurrentBackupOperationStatus *CurrentBackupOperationStatus
    // Status of restore process executing/executed on appliance
	RestoreStatus *ClusterRestoreStatus
}

// Abstract base type for Weekly or Interval Backup Schedule
type BackupSchedule struct {
    // Possible values are: 
    //
    // * BackupSchedule#BackupSchedule_RESOURCE_TYPE_WEEKLYBACKUPSCHEDULE
    // * BackupSchedule#BackupSchedule_RESOURCE_TYPE_INTERVALBACKUPSCHEDULE
    //
    //  Schedule type
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const BackupSchedule__TYPE_IDENTIFIER = "BackupSchedule"
const BackupSchedule_RESOURCE_TYPE_WEEKLYBACKUPSCHEDULE = "WeeklyBackupSchedule"
const BackupSchedule_RESOURCE_TYPE_INTERVALBACKUPSCHEDULE = "IntervalBackupSchedule"

// Consolidated Realized Status Per Enforcement Point.
type BaseConsolidatedStatusPerEnforcementPoint struct {
    // Alarm information details.
	Alarm *PolicyRuntimeAlarm
    // Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath *string
    // Consolidated Realized Status of an Intent object per enforcement point.
	ConsolidatedStatus *ConsolidatedStatus
    // Enforcement Point Id.
	EnforcementPointId *string
	ResourceType string
    // The site where this enforcement point resides.
	SitePath *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const BaseConsolidatedStatusPerEnforcementPoint__TYPE_IDENTIFIER = "BaseConsolidatedStatusPerEnforcementPoint"

// Represents an endpoint which will be used as subject in rule. It is a polymorphic type object which can be either of the types - 1. Virtual 2. Logical We have 2 separate objects representing these 2 types. VirtualEndPoint for Virtual type and ServiceInstanceEndpoint for Logical.
type BaseEndpoint struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * BaseEndpoint#BaseEndpoint_RESOURCE_TYPE_VIRTUALENDPOINT
    // * BaseEndpoint#BaseEndpoint_RESOURCE_TYPE_SERVICEINSTANCEENDPOINT
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IPs where either inbound or outbound traffic is to be redirected.
	TargetIps []IPInfo
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const BaseEndpoint__TYPE_IDENTIFIER = "BaseEndpoint"
const BaseEndpoint_RESOURCE_TYPE_VIRTUALENDPOINT = "VirtualEndpoint"
const BaseEndpoint_RESOURCE_TYPE_SERVICEINSTANCEENDPOINT = "ServiceInstanceEndpoint"

// Represents an instance of partner Service and its configuration.
type BasePolicyServiceInstance struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * BasePolicyServiceInstance#BasePolicyServiceInstance_DEPLOYMENT_MODE_STAND_ALONE
    // * BasePolicyServiceInstance#BasePolicyServiceInstance_DEPLOYMENT_MODE_ACTIVE_STANDBY
    //
    //  Deployment mode specifies how the partner appliance will be deployed i.e. in HA or standalone mode.
	DeploymentMode *string
    // Unique name of Partner Service in the Marketplace
	PartnerServiceName *string
    // Possible values are: 
    //
    // * BasePolicyServiceInstance#BasePolicyServiceInstance_TRANSPORT_TYPE_L2_BRIDGE
    // * BasePolicyServiceInstance#BasePolicyServiceInstance_TRANSPORT_TYPE_L3_ROUTED
    //
    //  Transport to be used while deploying Service-VM.
	TransportType *string
}
const BasePolicyServiceInstance_DEPLOYMENT_MODE_STAND_ALONE = "STAND_ALONE"
const BasePolicyServiceInstance_DEPLOYMENT_MODE_ACTIVE_STANDBY = "ACTIVE_STANDBY"
const BasePolicyServiceInstance_TRANSPORT_TYPE_L2_BRIDGE = "L2_BRIDGE"
const BasePolicyServiceInstance_TRANSPORT_TYPE_L3_ROUTED = "L3_ROUTED"

// A rule indicates the action to be performed for various types of traffic flowing between workload groups.
type BaseRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded *bool
    // Possible values are: 
    //
    // * BaseRule#BaseRule_DIRECTION_IN
    // * BaseRule#BaseRule_DIRECTION_OUT
    // * BaseRule#BaseRule_DIRECTION_IN_OUT
    //
    //  Define direction of traffic.
	Direction *string
    // Flag to disable the rule. Default is enabled.
	Disabled *bool
    // Possible values are: 
    //
    // * BaseRule#BaseRule_IP_PROTOCOL_IPV4
    // * BaseRule#BaseRule_IP_PROTOCOL_IPV6
    // * BaseRule#BaseRule_IP_PROTOCOL_IPV4_IPV6
    //
    //  Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol *string
    // A flag to indicate whether rule is a default rule.
	IsDefault *bool
    // Flag to enable packet logging. Default is disabled.
	Logged *bool
    // Text for additional notes on changes.
	Notes *string
    // Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string
    // This is a unique 4 byte positive number that is assigned by the system. This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on. format: int64
	RuleId *int64
    // The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string
    // This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []*data.StructValue
    // In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded *bool
    // User level field which will be printed in CLI and packet logs.
	Tag *string
}
const BaseRule_DIRECTION_IN = "IN"
const BaseRule_DIRECTION_OUT = "OUT"
const BaseRule_DIRECTION_IN_OUT = "IN_OUT"
const BaseRule_IP_PROTOCOL_IPV4 = "IPV4"
const BaseRule_IP_PROTOCOL_IPV6 = "IPV6"
const BaseRule_IP_PROTOCOL_IPV4_IPV6 = "IPV4_IPV6"

// Paged Collection of Rules
type BaseRuleListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
}

// Tier-0 interface configuration for external connectivity.
type BaseTier0Interface struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet
}

// A set of operations to be performed in a single batch
type BatchRequest struct {
    // Flag to decide if we will continue processing subsequent requests in case of current error for atomic = false.
	ContinueOnError *bool
	Requests []BatchRequestItem
}

// A single request within a batch of operations
type BatchRequestItem struct {
	Body *data.StructValue
    // Possible values are: 
    //
    // * BatchRequestItem#BatchRequestItem_METHOD_GET
    // * BatchRequestItem#BatchRequestItem_METHOD_POST
    // * BatchRequestItem#BatchRequestItem_METHOD_PUT
    // * BatchRequestItem#BatchRequestItem_METHOD_DELETE
    // * BatchRequestItem#BatchRequestItem_METHOD_PATCH
    //
    //  http method type
	Method *string
    // relative uri (path and args), of the call including resource id (if this is a POST/DELETE), exclude hostname and port and prefix, exploded form of parameters
	Uri *string
}
const BatchRequestItem_METHOD_GET = "GET"
const BatchRequestItem_METHOD_POST = "POST"
const BatchRequestItem_METHOD_PUT = "PUT"
const BatchRequestItem_METHOD_DELETE = "DELETE"
const BatchRequestItem_METHOD_PATCH = "PATCH"

// The reponse to a batch operation
type BatchResponse struct {
    // Indicates if any of the APIs failed
	HasErrors *bool
    // Bulk list results
	Results []BatchResponseItem
    // Optional flag indicating that all items were rolled back even if succeeded initially
	RolledBack *bool
}

// A single respose in a list of batched responses
type BatchResponseItem struct {
    // object returned by api
	Body *data.StructValue
    // http status code format: int64
	Code *int64
    // The headers returned by the API call
	Headers *data.StructValue
}

// Bidirectional Forwarding Detection configuration for BGP peers
type BfdProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Time interval between heartbeat packets in milliseconds. format: int32
	Interval *int64
    // Declare dead multiple. Number of times heartbeat packet is missed before BFD declares the neighbor is down. format: int32
	Multiple *int64
}

// Paged Collection of BfdProfile.
type BfdProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Bfd Profile list results.
	Results []BfdProfile
}

type BgpAddressFamily struct {
    // Count of in prefixes format: int64
	InPrefixCount *int64
    // Count of out prefixes format: int64
	OutPrefixCount *int64
    // Possible values are: 
    //
    // * BgpAddressFamily#BgpAddressFamily_TYPE_IPV4_UNICAST
    // * BgpAddressFamily#BgpAddressFamily_TYPE_VPNV4_UNICAST
    // * BgpAddressFamily#BgpAddressFamily_TYPE_IPV6_UNICAST
    // * BgpAddressFamily#BgpAddressFamily_TYPE_L2VPN_EVPN
    //
    //  BGP address family type
	Type_ *string
}
const BgpAddressFamily_TYPE_IPV4_UNICAST = "IPV4_UNICAST"
const BgpAddressFamily_TYPE_VPNV4_UNICAST = "VPNV4_UNICAST"
const BgpAddressFamily_TYPE_IPV6_UNICAST = "IPV6_UNICAST"
const BgpAddressFamily_TYPE_L2VPN_EVPN = "L2VPN_EVPN"

// BFD configuration for BGP peers
type BgpBfdConfig struct {
    // Flag to enable BFD cofiguration.
	Enabled *bool
    // Time interval between heartbeat packets in milliseconds. format: int32
	Interval *int64
    // Declare dead multiple. Number of times heartbeat packet is missed before BFD declares the neighbor is down. format: int32
	Multiple *int64
}

// Configuration field to hold BGP restart mode and timer.
type BgpGracefulRestartConfig struct {
    // Possible values are: 
    //
    // * BgpGracefulRestartConfig#BgpGracefulRestartConfig_MODE_DISABLE
    // * BgpGracefulRestartConfig#BgpGracefulRestartConfig_MODE_GR_AND_HELPER
    // * BgpGracefulRestartConfig#BgpGracefulRestartConfig_MODE_HELPER_ONLY
    //
    //  If mode is DISABLE, then graceful restart and helper modes are disabled. If mode is GR_AND_HELPER, then both graceful restart and helper modes are enabled. If mode is HELPER_ONLY, then helper mode is enabled. HELPER_ONLY mode is the ability for a BGP speaker to indicate its ability to preserve forwarding state during BGP restart. GRACEFUL_RESTART mode is the ability of a BGP speaker to advertise its restart to its peers.
	Mode *string
    // Configuration field to hold BGP restart timers.
	Timer *BgpGracefulRestartTimer
}
const BgpGracefulRestartConfig_MODE_DISABLE = "DISABLE"
const BgpGracefulRestartConfig_MODE_GR_AND_HELPER = "GR_AND_HELPER"
const BgpGracefulRestartConfig_MODE_HELPER_ONLY = "HELPER_ONLY"

// Configuration field to hold BGP restart timers
type BgpGracefulRestartTimer struct {
    // Maximum time taken (in seconds) for a BGP session to be established after a restart. This can be used to speed up routing convergence by its peer in case the BGP speaker does not come back up after a restart. If the session is not re-established within this timer, the receiving speaker will delete all the stale routes from that peer. format: int64
	RestartTimer *int64
    // Maximum time (in seconds) before stale routes are removed from the RIB (Routing Information Base) when BGP restarts. format: int64
	StaleRouteTimer *int64
}

// Contains information necessary to configure a BGP neighbor.
type BgpNeighborConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Flag to enable allowas_in option for BGP neighbor
	AllowAsIn *bool
    // BFD configuration for failure detection. BFD is enabled with default values when not configured.
	Bfd *BgpBfdConfig
    // Possible values are: 
    //
    // * BgpNeighborConfig#BgpNeighborConfig_GRACEFUL_RESTART_MODE_DISABLE
    // * BgpNeighborConfig#BgpNeighborConfig_GRACEFUL_RESTART_MODE_GR_AND_HELPER
    // * BgpNeighborConfig#BgpNeighborConfig_GRACEFUL_RESTART_MODE_HELPER_ONLY
    //
    //  If mode is DISABLE, then graceful restart and helper modes are disabled. If mode is GR_AND_HELPER, then both graceful restart and helper modes are enabled. If mode is HELPER_ONLY, then helper mode is enabled. HELPER_ONLY mode is the ability for a BGP speaker to indicate its ability to preserve forwarding state during BGP restart. GRACEFUL_RESTART mode is the ability of a BGP speaker to advertise its restart to its peers.
	GracefulRestartMode *string
    // Wait time in seconds before declaring peer dead. format: int32
	HoldDownTime *int64
    // Specify path of prefix-list or route map to filter routes for IN direction. This property is deprecated, use route_filtering instead. Specifying different values for both properties will result in error.
	InRouteFilters []string
    // Interval (in seconds) between keep alive messages sent to peer. format: int32
	KeepAliveTime *int64
    // Maximum number of hops allowed to reach BGP neighbor. format: int32
	MaximumHopLimit *int64
    // Neighbor IP Address format: ip
	NeighborAddress *string
    // Specify path of prefix-list or route map to filter routes for OUT direction. When not specified, a built-in prefix-list named 'prefixlist-out-default' is automatically applied. This property is deprecated, use route_filtering instead. Specifying different values for both properties will result in error.
	OutRouteFilters []string
    // Specify password for BGP neighbor authentication. Empty string (\"\") clears existing password.
	Password *string
    // 4 Byte ASN of the neighbor in ASPLAIN Format
	RemoteAsNum *string
    // Enable address families and route filtering in each direction.
	RouteFiltering []BgpRouteFiltering
    // Source addresses should belong to Tier0 external or loopback interface IP Addresses . BGP peering is formed from all these addresses. This property is mandatory when maximum_hop_limit is greater than 1. format: ip
	SourceAddresses []string
}
const BgpNeighborConfig_GRACEFUL_RESTART_MODE_DISABLE = "DISABLE"
const BgpNeighborConfig_GRACEFUL_RESTART_MODE_GR_AND_HELPER = "GR_AND_HELPER"
const BgpNeighborConfig_GRACEFUL_RESTART_MODE_HELPER_ONLY = "HELPER_ONLY"

// Paged collection of BGP Neighbor Configs
type BgpNeighborConfigListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // BGP neighbor configs list results
	Results []BgpNeighborConfig
}

// BGP neighbor learned/advertised route details.
type BgpNeighborRouteDetailsCsvRecord struct {
    // BGP AS path attribute.
	AsPath *string
    // BGP Local Preference attribute. format: int64
	LocalPref *int64
    // Logical router id
	LogicalRouterId *string
    // BGP Multi Exit Discriminator attribute. format: int64
	Med *int64
    // BGP neighbor peer IP address. format: ip
	NeighborAddress *string
    // BGP neighbor id
	NeighborId *string
    // CIDR network address. format: ip-cidr-block
	Network *string
    // Next hop IP address. format: ip
	NextHop *string
    // BGP neighbor source address. format: ip
	SourceAddress *string
    // Transport node id
	TransportNodeId *string
    // BGP Weight attribute. format: int64
	Weight *int64
}

type BgpNeighborRouteDetailsInCsvFormat struct {
    // File name set by HTTP server if API returns CSV result as a file.
	FileName *string
	Results []BgpNeighborRouteDetailsCsvRecord
}

// BGP neighbor learned/advertised route details.
type BgpNeighborRoutes struct {
    // Array of BGP neighbor route details per edge node.
	EgdeNodeRoutes []RoutesPerTransportNode
    // Enforcement point policy path
	EnforcementPointPath *string
    // BGP neighbor policy path
	NeighborPath *string
}

type BgpNeighborRoutesListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged Collection of Bgp neighbor routes.
	Results []BgpNeighborRoutes
}

// Enable address_families and route filtering in each direction
type BgpRouteFiltering struct {
    // Possible values are: 
    //
    // * BgpRouteFiltering#BgpRouteFiltering_ADDRESS_FAMILY_IPV4
    // * BgpRouteFiltering#BgpRouteFiltering_ADDRESS_FAMILY_IPV6
    // * BgpRouteFiltering#BgpRouteFiltering_ADDRESS_FAMILY_L2VPN_EVPN
    //
    //  Address family type. If not configured, this property automatically derived for IPv4 & IPv6 peer configuration.
	AddressFamily *string
    // Flag to enable address family.
	Enabled *bool
    // Specify path of prefix-list or route map to filter routes for IN direction.
	InRouteFilters []string
    // Maximum number of routes for the address family. format: int32
	MaximumRoutes *int64
    // Specify path of prefix-list or route map to filter routes for OUT direction. When not specified, a built-in prefix-list named 'prefixlist-out-default' is automatically applied.
	OutRouteFilters []string
}
const BgpRouteFiltering_ADDRESS_FAMILY_IPV4 = "IPV4"
const BgpRouteFiltering_ADDRESS_FAMILY_IPV6 = "IPV6"
const BgpRouteFiltering_ADDRESS_FAMILY_L2VPN_EVPN = "L2VPN_EVPN"

// Contains BGP routing configuration.
type BgpRoutingConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Flag to enable ECMP.
	Ecmp *bool
    // Flag to enable BGP configuration. Disabling will stop feature and BGP peering.
	Enabled *bool
    // Flag to enable graceful restart. This field is deprecated, please use graceful_restart_config parameter for graceful restart configuration. If both parameters are set and consistent with each other (i.e. graceful_restart=false and graceful_restart_mode=HELPER_ONLY OR graceful_restart=true and graceful_restart_mode=GR_AND_HELPER) then this is allowed, but if inconsistent with each other then this is not allowed and validation error will be thrown.
	GracefulRestart *bool
    // Configuration field to hold BGP Restart mode and timer.
	GracefulRestartConfig *BgpGracefulRestartConfig
    // Flag to enable inter SR IBGP configuration. When not specified, inter SR IBGP is automatically enabled if Tier-0 is created in ACTIVE_ACTIVE ha_mode.
	InterSrIbgp *bool
    // Specify BGP AS number for Tier-0 to advertize to BGP peers. AS number can be specified in ASPLAIN (e.g., \"65546\") or ASDOT (e.g., \"1.10\") format. Empty string disables BGP feature. It is required by normal tier0 but not required in vrf tier0.
	LocalAsNum *string
    // Flag to enable BGP multipath relax option.
	MultipathRelax *bool
    // List of routes to be aggregated.
	RouteAggregations []RouteAggregationEntry
}

type BinaryPacketData struct {
    // Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload must contain all headers (Ethernet, IP, etc). Note that VLAN is not supported in the logical space. Hence, payload must not contain 802.1Q headers.
	Payload *string
    // If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message. The frame will be zero padded to the requested size. format: int64
	FrameSize *int64
    // Possible values are: 
    //
    // * PacketData#PacketData_RESOURCE_TYPE_BINARYPACKETDATA
    // * PacketData#PacketData_RESOURCE_TYPE_FIELDSPACKETDATA
    //
    //  Packet configuration
	ResourceType string
    // A flag, when set true, indicates that the traceflow packet is of L3 routing.
	Routed *bool
    // Possible values are: 
    //
    // * PacketData#PacketData_TRANSPORT_TYPE_BROADCAST
    // * PacketData#PacketData_TRANSPORT_TYPE_UNICAST
    // * PacketData#PacketData_TRANSPORT_TYPE_MULTICAST
    // * PacketData#PacketData_TRANSPORT_TYPE_UNKNOWN
    //
    //  transport type of the traceflow packet
	TransportType *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const BinaryPacketData__TYPE_IDENTIFIER = "BinaryPacketData"

// configuration parameters for Bridge Profile
type BridgeProfileConfig struct {
    // Same bridge profile can be configured on different segments. Each bridge profile on a segment must unique.
	BridgeProfilePath *string
    // The name of the switching uplink teaming policy for the bridge endpoint. This name corresponds to one fot he switching uplink teaming policy names listed in teh transport zone. When this property is not specified, the teaming policy is assigned by MP.
	UplinkTeamingPolicyName *string
    // VLAN specification for bridge endpoint. Either VLAN ID or VLAN ranges can be specified. Not both.
	VlanIds []string
    // VLAN transport zone should belong to the enforcment-point as the transport zone specified in the segment.
	VlanTransportZonePath *string
}

// Represents an instance of partner's service whose wiring will be done by partner itself. As partner does all the wiring, we call it as Byod - Bring your own device.
type ByodPolicyServiceInstance struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * ByodPolicyServiceInstance#ByodPolicyServiceInstance_DEPLOYMENT_MODE_STAND_ALONE
    // * ByodPolicyServiceInstance#ByodPolicyServiceInstance_DEPLOYMENT_MODE_ACTIVE_STANDBY
    //
    //  Deployment mode specifies how the partner appliance will be deployed i.e. in HA or standalone mode.
	DeploymentMode *string
    // Unique name of Partner Service in the Marketplace
	PartnerServiceName *string
    // Possible values are: 
    //
    // * ByodPolicyServiceInstance#ByodPolicyServiceInstance_TRANSPORT_TYPE_L2_BRIDGE
    // * ByodPolicyServiceInstance#ByodPolicyServiceInstance_TRANSPORT_TYPE_L3_ROUTED
    //
    //  Transport to be used while deploying Service-VM.
	TransportType *string
}
const ByodPolicyServiceInstance_DEPLOYMENT_MODE_STAND_ALONE = "STAND_ALONE"
const ByodPolicyServiceInstance_DEPLOYMENT_MODE_ACTIVE_STANDBY = "ACTIVE_STANDBY"
const ByodPolicyServiceInstance_TRANSPORT_TYPE_L2_BRIDGE = "L2_BRIDGE"
const ByodPolicyServiceInstance_TRANSPORT_TYPE_L3_ROUTED = "L3_ROUTED"

// Child wrapper for BfdProfile, used in hierarchical API.
type ChildBfdProfile struct {
    // Contains the actual BfdProfile object.
	BfdProfile *BfdProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for BgpNeighborConfig, used in hierarchical API.
type ChildBgpNeighborConfig struct {
    // Contains the actual BgpNeighborConfig object.
	BgpNeighborConfig *BgpNeighborConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for BgpRoutingConfig, used in hierarchical API.
type ChildBgpRoutingConfig struct {
    // Contains the actual BgpRoutingConfig object.
	BgpRoutingConfig *BgpRoutingConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for ByodPolicyServiceInstance used in hierarchical API.
type ChildByodPolicyServiceInstance struct {
    // Contains actual ByodPolicyServiceInstance.
	ByodPolicyServiceInstance *ByodPolicyServiceInstance
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for CommunicationEntry, used in hierarchical API This type is deprecated. Use the type ChildRule instead.
type ChildCommunicationEntry struct {
    // Contains the actual CommunicationEntry object.
	CommunicationEntry *CommunicationEntry
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for CommunicationMap, used in hierarchical API This type is deprecated. Use the type ChildSecurityPolicy instead.
type ChildCommunicationMap struct {
    // Contains the actual CommunicationMap object.
	CommunicationMap *CommunicationMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for CommunityList, used in hierarchical API
type ChildCommunityList struct {
    // Contains the actual CommunityList object
	CommunityList *CommunityList
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Wrapper object for ComputeClusterIdfwConfiguration
type ChildComputeClusterIdfwConfiguration struct {
    // Contains the actual compute cluster idfw configuration object.
	ComputeClusterIdfwConfiguration *ComputeClusterIdfwConfiguration
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for Constraint, used in hierarchical API
type ChildConstraint struct {
    // Contains the actual Constraint object
	Constraint *Constraint
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for DeploymentZone, used in hierarchical API
type ChildDeploymentZone struct {
    // Contains the actual DeploymentZone object
	DeploymentZone *DeploymentZone
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Wrapper object for FirewallConfiguration
type ChildDfwFirewallConfiguration struct {
    // Contains the actual dfw firewall configuration list object.
	DfwFirewallConfiguration *DfwFirewallConfiguration
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for DhcpRelayConfig, used in hierarchical API
type ChildDhcpRelayConfig struct {
    // Contains the actual DhcpRelayConfig object
	DhcpRelayConfig *DhcpRelayConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for DhcpServerConfig, used in hierarchical API
type ChildDhcpServerConfig struct {
    // Contains the actual DhcpServerConfig object
	DhcpServerConfig *DhcpServerConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for DhcpStaticBindingConfig, used in hierarchical API.
type ChildDhcpStaticBindingConfig struct {
    // Contains the actual DhcpStaticBindingConfig object.
	DhcpStaticBindingConfig *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for DnsSecurityProfile, used in hierarchical API
type ChildDnsSecurityProfile struct {
    // Contains the actual DnsSecurityProfile object
	DnsSecurityProfile *DnsSecurityProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper obejct for DnsSecurityProfileBindingMap used in hierarchical API
type ChildDnsSecurityProfileBindingMap struct {
    // Contains the actual DnsSecurityProfileBindingMap object
	DnsSecurityProfileBindingMap *DnsSecurityProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for domain, used in hierarchical API.
type ChildDomain struct {
    // Contains the actual domain object.
	Domain *Domain
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for DomainDeploymentMap, used in hierarchical API.
type ChildDomainDeploymentMap struct {
    // Contains the actual DomainDeploymentMap object.
	DomainDeploymentMap *DomainDeploymentMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for EndpointPolicy used in hierarchical API.
type ChildEndpointPolicy struct {
    // Contains actual EndpointPolicy.
	EndpointPolicy *EndpointPolicy
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for EndpointRule used in hierarchical API.
type ChildEndpointRule struct {
    // Contains actual EndpointRule.
	EndpointRule *EndpointRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for EnforcementPoint, used in hierarchical API.
type ChildEnforcementPoint struct {
    // Contains the actual Enforcement point object.
	EnforcementPoint *EnforcementPoint
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for EvpnConfig, used in hierarchical API.
type ChildEvpnConfig struct {
    // Contains the actual EvpnConfig object.
	EvpnConfig *EvpnConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for EvpnTunnelEndpointConfig, used in hierarchical API.
type ChildEvpnTunnelEndpointConfig struct {
    // Contains the actual EvpnTunnelEndpointConfig object.
	EvpnTunnelEndpointConfig *EvpnTunnelEndpointConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for FirewallIdentityStore, used in hierarchical API.
type ChildFirewallIdentityStore struct {
    // Contains the actual FirewallIdentityStore object.
	FirewallIdentityStore *FirewallIdentityStore
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for FloodProtectionProfile, used in hierarchical API
type ChildFloodProtectionProfile struct {
    // Contains the actual FloodProtectionProfile object
	FloodProtectionProfile *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for FloodProtectionProfileBindingMap, used in hierarchical API
type ChildFloodProtectionProfileBindingMap struct {
    // Contains the actual FloodProtectionProfileBindingMap object
	FloodProtectionProfileBindingMap *FloodProtectionProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for ForwardingPolicy used in Hierarchical API.
type ChildForwardingPolicy struct {
    // Contains actual ForwardingPolicy.
	ForwardingPolicy *ForwardingPolicy
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for ForwardingRule used in Hierarchical API.
type ChildForwardingRule struct {
    // Contains actual ForwardingRule.
	ForwardingRule *ForwardingRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for GatewayPolicy, used in hierarchical API
type ChildGatewayPolicy struct {
    // Contains the actual GatewayPolicy object
	GatewayPolicy *GatewayPolicy
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for GatewayQosProfile, used in hierarchical API.
type ChildGatewayQosProfile struct {
    // Contains the actual GatewayQosProfile object.
	QosProfile *GatewayQosProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for GlobalConfig, used in hierarchical API
type ChildGlobalConfig struct {
    // Contains the actual GlobalConfig object.
	GlobalConfig *GlobalConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for Global Manager, used in hierarchical API.
type ChildGlobalManager struct {
    // Contains the actual Global Manager object.
	GlobalManager *GlobalManager
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for group, used in hierarchical API.
type ChildGroup struct {
    // Contains the actual group objects.
	Group *Group
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper obejct for GroupDiscoveryProfileBindingMap used in hierarchical API
type ChildGroupDiscoveryProfileBindingMap struct {
    // Contains the actual GroupDiscoveryProfileBindingMap object
	GroupDiscoveryProfileBindingMap *GroupDiscoveryProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for GroupMonitoringProfileBindingMap, used in hierarchical API
type ChildGroupMonitoringProfileBindingMap struct {
    // Contains the actual GroupMonitoringProfileBindingMap object
	GroupMonitoringProfileBindingMap *GroupMonitoringProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPDiscoveryProfile, used in hierarchical API
type ChildIPDiscoveryProfile struct {
    // Contains the actual IPDiscoveryProfile object
	IpDiscoveryProfile *IPDiscoveryProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPFIXDFWCollectorProfile, used in hierarchical API
type ChildIPFIXDFWCollectorProfile struct {
    // Contains the actual IPFIXDFWCollectorProfile object
	IPFIXDFWCollectorProfile *IPFIXDFWCollectorProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPFIXDFWProfile, used in hierarchical API
type ChildIPFIXDFWProfile struct {
    // Contains the actual IPFIXDFWProfile object
	IPFIXDFWProfile *IPFIXDFWProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPFIXL2CollectorProfile, used in hierarchical API
type ChildIPFIXL2CollectorProfile struct {
    // Contains the actual IPFIXL2CollectorProfile object
	IPFIXL2CollectorProfile *IPFIXL2CollectorProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPFIXL2Profile, used in hierarchical API
type ChildIPFIXL2Profile struct {
    // Contains the actual IPFIXL2Profile object
	IPFIXL2Profile *IPFIXL2Profile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPSecVpnDpdProfile, used in hierarchical API.
type ChildIPSecVpnDpdProfile struct {
    // Contains the actual IPSecVpnDpdProfile object.
	IpSecVpnDpdProfile *IPSecVpnDpdProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPSecVpnIkeProfile, used in hierarchical API.
type ChildIPSecVpnIkeProfile struct {
    // Contains the actual IPSecVpnIkeProfile object.
	IpSecVpnIkeProfile *IPSecVpnIkeProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPSecVpnLocalEndpoint, used in hierarchical API.
type ChildIPSecVpnLocalEndpoint struct {
    // Contains the actual IPSecVpnLocalEndpoint object.
	IpSecVpnLocalEndpoint *IPSecVpnLocalEndpoint
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPSecVpnService, used in hierarchical API.
type ChildIPSecVpnService struct {
    // Contains the actual IPSecVpnService object.
	IpSecVpnService *IPSecVpnService
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPSecVpnSession, used in hierarchical API.
type ChildIPSecVpnSession struct {
    // Contains the actual IPSecVpnSession object.
	IpSecVpnSession *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IPSecVpnTunnelProfile, used in hierarchical API.
type ChildIPSecVpnTunnelProfile struct {
    // Contains the actual IPSecVpnTunnelProfile object
	IpSecVpnTunnelProfile *IPSecVpnTunnelProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IdsClusterConfig, used in hierarchical API
type ChildIdsClusterConfig struct {
    // Contains the IdsClusterConfig object
	IdsClusterConfig *IdsClusterConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IdsProfile, used in hierarchical API
type ChildIdsProfile struct {
    // Contains the IdsProfile object
	IdsProfile *IdsProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IdsRule, used in hierarchical API
type ChildIdsRule struct {
    // Contains the IdsRule object
	IdsRule *IdsRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IdsSecurityPolicy, used in hierarchical API
type ChildIdsSecurityPolicy struct {
    // Contains the IdsSecurityPolicy object
	IdsSecurityPolicy *IdsSecurityPolicy
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IdsSignature, used in hierarchical API
type ChildIdsSignature struct {
    // Contains the IdsSignature object
	IdsSignature *IdsSignature
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IdsStandaloneHostConfig, used in hierarchical API
type ChildIdsStandaloneHostConfig struct {
    // Contains the IdsStandaloneHostConfig object
	IdsStandaloneHostConfig *IdsStandaloneHostConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IpAddressAllocation, used in hierarchical API
type ChildIpAddressAllocation struct {
    // Contains the actual IpAddressAllocation object
	IpAddressAllocation *IpAddressAllocation
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IpAddressBlock, used in hierarchical API
type ChildIpAddressBlock struct {
    // Contains the actual IpAddressBlock object
	IpAddressBlock *IpAddressBlock
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IpAddressPool, used in hierarchical API
type ChildIpAddressPool struct {
    // Contains the actual IpAddressPool object
	IpAddressPool *IpAddressPool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for IpAddressPoolSubnet, used in hierarchical API
type ChildIpAddressPoolSubnet struct {
    // Contains the actual IpAddressPoolSubnet object
	IpAddressPoolSubnet *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for Ipv6DadProfile, used in hierarchical API
type ChildIpv6DadProfile struct {
    // Contains the actual Ipv6DadProfile objects
	Ipv6DadProfile *Ipv6DadProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for Ipv6NdraProfile, used in hierarchical API
type ChildIpv6NdraProfile struct {
    // Contains the actual Ipv6NdraProfile objects
	Ipv6NdraProfile *Ipv6NdraProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L2BridgeEndpointProfile, used in hierarchical API
type ChildL2BridgeEndpointProfile struct {
    // Contains the actual L2BridgeEndpointProfile object
	L2BridgeEndpointProfile *L2BridgeEndpointProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L2VPNService, used in hierarchical API.
type ChildL2VPNService struct {
    // Contains the actual L2VPNService object.
	L2VPNService *L2VPNService
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L2VPNSession, used in hierarchical API.
type ChildL2VPNSession struct {
    // Contains the actual L2VPNSession object.
	L2VPNSession *L2VPNSession
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L2Vpn, used in hierarchical API.
type ChildL2Vpn struct {
    // Contains the actual L2Vpn object.
	L2Vpn *L2Vpn
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L2VpnContext, used in hierarchical API.
type ChildL2VpnContext struct {
    // Contains the actual L2VpnContext object.
	L2VpnContext *L2VpnContext
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L3Vpn, used in hierarchical API.
type ChildL3Vpn struct {
    // Contains the actual L3Vpn object.
	L3Vpn *L3Vpn
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for L3VpnContext, used in hierarchical API.
type ChildL3VpnContext struct {
    // Contains the actual L3VpnContext object.
	L3VpnContext *L3VpnContext
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBAppProfile, used in hierarchical API.
type ChildLBAppProfile struct {
    // Contains the actual LBAppProfile object.
	LbAppProfile *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBClientSslProfile, used in hierarchical API.
type ChildLBClientSslProfile struct {
    // Contains the actual LBClientSslProfile object.
	LbClientSslProfile *LBClientSslProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBMonitorProfile, used in hierarchical API.
type ChildLBMonitorProfile struct {
    // Contains the actual LBMonitorProfile object.
	LbMonitorProfile *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBPersistenceProfile, used in hierarchical API.
type ChildLBPersistenceProfile struct {
    // Contains the actual LBPersistenceProfile object.
	LbPersistenceProfile *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBPool, used in hierarchical API.
type ChildLBPool struct {
    // Contains the actual LBPool object.
	LbPool *LBPool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBServerSslProfile, used in hierarchical API.
type ChildLBServerSslProfile struct {
    // Contains the actual LBServerSslProfile object.
	LbServerSslProfile *LBServerSslProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBService, used in hierarchical API.
type ChildLBService struct {
    // Contains the actual LBService object.
	LbService *LBService
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper for LBVirtualServer, used in hierarchical API.
type ChildLBVirtualServer struct {
    // Contains the actual LBVirtualServer object.
	LbVirtualServer *LBVirtualServer
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for LocaleServices, used in hierarchical API
type ChildLocaleServices struct {
    // Contains the actual LocaleServices object
	LocaleServices *LocaleServices
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Child wrapper object for MacDiscoveryProfile, used in hierarchical API
type ChildMacDiscoveryProfile struct {
    // Contains the actual MacDiscoveryProfile object
	MacDiscoveryProfile *MacDiscoveryProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Wrapper object for MetadataProxyConfig
type ChildMetadataProxyConfig struct {
    // Contains the actual MetadataProxyConfig object.
	MetadataProxyConfig *MetadataProxyConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}

// Represents an object on the desired state
type ChildPolicyConfigResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyConfigResource__TYPE_IDENTIFIER = "ChildPolicyConfigResource"

// Child wrapper object for PolicyContextProfile, used in hierarchical API
type ChildPolicyContextProfile struct {
    // Contains the actual PolicyContextProfile objects
	PolicyContextProfile *PolicyContextProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyContextProfile__TYPE_IDENTIFIER = "ChildPolicyContextProfile"

// Child wrapper object for PolicyDnsForwarder, used in hierarchical API
type ChildPolicyDnsForwarder struct {
    // Contains the actual PolicyDnsForwarder object
	PolicyDnsForwarder *PolicyDnsForwarder
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyDnsForwarder__TYPE_IDENTIFIER = "ChildPolicyDnsForwarder"

// Child wrapper object for PolicyDnsForwarderZone, used in hierarchical API
type ChildPolicyDnsForwarderZone struct {
    // Contains the actual PolicyDnsForwarderZone object
	PolicyDnsForwarderZone *PolicyDnsForwarderZone
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyDnsForwarderZone__TYPE_IDENTIFIER = "ChildPolicyDnsForwarderZone"

// Child wrapper object for PolicyEdgeCluster, used in hierarchical API.
type ChildPolicyEdgeCluster struct {
    // Contains the actual PolicyEdgeCluster object.
	PolicyEdgeCluster *PolicyEdgeCluster
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyEdgeCluster__TYPE_IDENTIFIER = "ChildPolicyEdgeCluster"

// Child wrapper object for PolicyEdgeNode, used in hierarchical API.
type ChildPolicyEdgeNode struct {
    // Contains the actual PolicyEdgeNode object.
	PolicyEdgeNode *PolicyEdgeNode
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyEdgeNode__TYPE_IDENTIFIER = "ChildPolicyEdgeNode"

// Wrapper object for PolicyExcludeList
type ChildPolicyExcludeList struct {
    // Contains the actual policy exclude list object.
	PolicyExcludeList *PolicyExcludeList
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyExcludeList__TYPE_IDENTIFIER = "ChildPolicyExcludeList"

// Child wrapper object for PolicyFirewallCPUMemThresholdsProfileBindingMap, used in hierarchical API.
type ChildPolicyFirewallCPUMemThresholdsProfileBindingMap struct {
    // Contains the actual PolicyFirewallCPUMemThresholdsProfileBindingMap object.
	PolicyFirewallCPUMemThresholdsProfileBindingMap *PolicyFirewallCPUMemThresholdsProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyFirewallCPUMemThresholdsProfileBindingMap__TYPE_IDENTIFIER = "ChildPolicyFirewallCPUMemThresholdsProfileBindingMap"

// Child wrapper object for PolicyFirewallCpuMemThresholdsProfile, used in hierarchical API.
type ChildPolicyFirewallCpuMemThresholdsProfile struct {
    // Contains the actual PolicyFirewallCpuMemThresholdsProfile object
	PolicyFirewallCpuMemThresholdsProfile *PolicyFirewallCpuMemThresholdsProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyFirewallCpuMemThresholdsProfile__TYPE_IDENTIFIER = "ChildPolicyFirewallCpuMemThresholdsProfile"

// Child wrapper object for PolicyFirewallFloodProtectionProfileBindingMap, used in hierarchical API
type ChildPolicyFirewallFloodProtectionProfileBindingMap struct {
    // Contains the actual PolicyFirewallFloodProtectionProfileBindingMap object
	PolicyFirewallFloodProtectionProfileBindingMap *PolicyFirewallFloodProtectionProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyFirewallFloodProtectionProfileBindingMap__TYPE_IDENTIFIER = "ChildPolicyFirewallFloodProtectionProfileBindingMap"

// Child wrapper object for PolicyFirewallScheduler, used in hierarchical API
type ChildPolicyFirewallScheduler struct {
    // Contains the actual PolicyFirewallScheduler objects
	PolicyFirewallScheduler *PolicyFirewallScheduler
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyFirewallScheduler__TYPE_IDENTIFIER = "ChildPolicyFirewallScheduler"

// Child wrapper object for PolicyFirewallSessionTimerProfile, used in hierarchical API
type ChildPolicyFirewallSessionTimerProfile struct {
    // Contains the actual PolicyFirewallSessionTimerProfile object
	PolicyFirewallSessionTimerProfile *PolicyFirewallSessionTimerProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyFirewallSessionTimerProfile__TYPE_IDENTIFIER = "ChildPolicyFirewallSessionTimerProfile"

// Child wrapper object for PolicyFirewallSessionTimerProfileBindingMap, used in hierarchical API
type ChildPolicyFirewallSessionTimerProfileBindingMap struct {
    // Contains the actual PolicyFirewallSessionTimerProfileBindingMap object
	PolicyFirewallSessionTimerProfileBindingMap *PolicyFirewallSessionTimerProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyFirewallSessionTimerProfileBindingMap__TYPE_IDENTIFIER = "ChildPolicyFirewallSessionTimerProfileBindingMap"

// Child wrapper object for PolicyIgmpProfile used in hierarchical API.
type ChildPolicyIgmpProfile struct {
    // Contains actual PolicyIgmpProfile.
	PolicyIgmpProfile *PolicyIgmpProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyIgmpProfile__TYPE_IDENTIFIER = "ChildPolicyIgmpProfile"

// Child wrapper object for PolicyLabel, used in hierarchical API
type ChildPolicyLabel struct {
    // Contains the actual PolicyLabel object
	PolicyLabel *PolicyLabel
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyLabel__TYPE_IDENTIFIER = "ChildPolicyLabel"

// Child wrapper for PolicyLbMonitorProfile, used in hierarchical API
type ChildPolicyLbMonitorProfile struct {
    // Contains the actual PolicyLbMonitorProfile object
	PolicyLbMonitorProfile *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyLbMonitorProfile__TYPE_IDENTIFIER = "ChildPolicyLbMonitorProfile"

// Child wrapper for PolicyLbPersistenceProfile, used in hierarchical API
type ChildPolicyLbPersistenceProfile struct {
    // Contains the actual PolicyLbPersistenceProfile object
	PolicyLbPersistenceProfile *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyLbPersistenceProfile__TYPE_IDENTIFIER = "ChildPolicyLbPersistenceProfile"

// Child wrapper for PolicyLbPoolAccess, used in hierarchical API
type ChildPolicyLbPoolAccess struct {
    // Contains the actual PolicyLbPoolAccess object
	PolicyLbPoolAccess *PolicyLbPoolAccess
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyLbPoolAccess__TYPE_IDENTIFIER = "ChildPolicyLbPoolAccess"

// Child wrapper for PolicyLbRule, used in hierarchical API
type ChildPolicyLbRule struct {
    // Contains the actual PolicyLbRule object
	PolicyLbRule *PolicyLbRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyLbRule__TYPE_IDENTIFIER = "ChildPolicyLbRule"

// Child wrapper for PolicyLbVirtualServer, used in hierarchical API
type ChildPolicyLbVirtualServer struct {
    // Contains the actual PolicyLbVirtualServer object
	PolicyLbVirtualServer *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyLbVirtualServer__TYPE_IDENTIFIER = "ChildPolicyLbVirtualServer"

// Child wrapper object for PolicyMulticastConfig used in hierarchical API.
type ChildPolicyMulticastConfig struct {
    // Contains actual PolicyMulticastConfig.
	PolicyMulticastConfig *PolicyMulticastConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyMulticastConfig__TYPE_IDENTIFIER = "ChildPolicyMulticastConfig"

// Child wrapper object for PolicyNat, used in hierarchical API
type ChildPolicyNat struct {
    // Contains the actual PolicyNAT object
	PolicyNat *PolicyNat
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyNat__TYPE_IDENTIFIER = "ChildPolicyNat"

// Child wrapper object for PolicyNatRule, used in hierarchical API
type ChildPolicyNatRule struct {
    // Contains the actual PolicyNatRule object
	PolicyNatRule *PolicyNatRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyNatRule__TYPE_IDENTIFIER = "ChildPolicyNatRule"

// Child wrapper object for PolicyPimProfile used in hierarchical API.
type ChildPolicyPimProfile struct {
    // Contains actual PolicyPimProfile.
	PolicyPimProfile *PolicyPimProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyPimProfile__TYPE_IDENTIFIER = "ChildPolicyPimProfile"

// Child wrapper object for PolicyServiceInstance used in hierarchical API.
type ChildPolicyServiceChain struct {
    // Contains actual PolicyServiceChain.
	PolicyServiceChain *PolicyServiceChain
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyServiceChain__TYPE_IDENTIFIER = "ChildPolicyServiceChain"

// Child wrapper object for PolicyServiceInstance used in hierarchical API.
type ChildPolicyServiceInstance struct {
    // Contains actual PolicyServiceInstance.
	PolicyServiceInstance *PolicyServiceInstance
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyServiceInstance__TYPE_IDENTIFIER = "ChildPolicyServiceInstance"

// Child wrapper object for PolicyServiceProfile used in hierarchical API.
type ChildPolicyServiceProfile struct {
    // Contains actual PolicyServiceProfile.
	PolicyServiceProfile *PolicyServiceProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyServiceProfile__TYPE_IDENTIFIER = "ChildPolicyServiceProfile"

// Child wrapper object for PolicyTransportZone, used in hierarchical API.
type ChildPolicyTransportZone struct {
    // Contains the actual PolicyTransportZone object.
	PolicyTransportZone *PolicyTransportZone
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyTransportZone__TYPE_IDENTIFIER = "ChildPolicyTransportZone"

// Child wrapper object for PolicyUrlCategorizationConfig, used in hierarchical API
type ChildPolicyUrlCategorizationConfig struct {
    // Contains the actual PolicyUrlCategorizationConfig object
	PolicyUrlCategorizationConfig *PolicyUrlCategorizationConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPolicyUrlCategorizationConfig__TYPE_IDENTIFIER = "ChildPolicyUrlCategorizationConfig"

// Child wrapper object for PortDiscoveryProfileBindingMap, used in hierarchical API
type ChildPortDiscoveryProfileBindingMap struct {
    // Contains the actual PortDiscoveryProfileBindingMap object
	PortDiscoveryProfileBindingMap *PortDiscoveryProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPortDiscoveryProfileBindingMap__TYPE_IDENTIFIER = "ChildPortDiscoveryProfileBindingMap"

// Child wrapper object for PortMirroringProfile, used in hierarchical API
type ChildPortMirroringProfile struct {
    // Contains the actual PortMirroringProfile object
	PortMirroringProfile *PortMirroringProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPortMirroringProfile__TYPE_IDENTIFIER = "ChildPortMirroringProfile"

// Child wrapper object for PortMonitoringProfileBindingMap, used in hierarchical API
type ChildPortMonitoringProfileBindingMap struct {
    // Contains the actual PortMonitoringProfileBindingMap object
	PortMonitoringProfileBindingMap *PortMonitoringProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPortMonitoringProfileBindingMap__TYPE_IDENTIFIER = "ChildPortMonitoringProfileBindingMap"

// Child wrapper object for PortQoSProfileBindingMap, used in hierarchical API
type ChildPortQosProfileBindingMap struct {
    // Contains the actual PortQoSProfileBindingMap object
	PortQosProfileBindingMap *PortQosProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPortQosProfileBindingMap__TYPE_IDENTIFIER = "ChildPortQoSProfileBindingMap"

// Child wrapper object for PortSecurityProfileBindingMap, used in hierarchical API
type ChildPortSecurityProfileBindingMap struct {
    // Contains the actual PortSecurityProfileBindingMap object
	PortSecurityProfileBindingMap *PortSecurityProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPortSecurityProfileBindingMap__TYPE_IDENTIFIER = "ChildPortSecurityProfileBindingMap"

// Child wrapper object for PrefixList, used in hierarchical API.
type ChildPrefixList struct {
    // Contains the actual PrefixList object.
	PrefixList *PrefixList
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildPrefixList__TYPE_IDENTIFIER = "ChildPrefixList"

// Child wrapper object for QoSProfile, used in hierarchical API
type ChildQosProfile struct {
    // Contains the actual QoSProfile object
	QosProfile *QosProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildQosProfile__TYPE_IDENTIFIER = "ChildQoSProfile"

// Child wrapper object for Reaction used in hierarchical API.
type ChildReaction struct {
    // Contains the actual Reaction object.
	Reaction *Reaction
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildReaction__TYPE_IDENTIFIER = "ChildReaction"

// Child wrapper object for RedirectionPolicy used in Hierarchical API.
type ChildRedirectionPolicy struct {
    // Contains actual RedirectionPolicy.
	RedirectionPolicy *RedirectionPolicy
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildRedirectionPolicy__TYPE_IDENTIFIER = "ChildRedirectionPolicy"

// Child wrapper object for ChildRedirectionRule used in Hierarchical API.
type ChildRedirectionRule struct {
    // Contains actual RedirectionRule.
	RedirectionRule *RedirectionRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildRedirectionRule__TYPE_IDENTIFIER = "ChildRedirectionRule"

// Represents a reference to ChildPolicyConfigResource in the hierarchical API. resource_type, id and target_type are mandatory fields.
type ChildResourceReference struct {
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // The target type of this reference
	TargetType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildResourceReference__TYPE_IDENTIFIER = "ChildResourceReference"

// Child wrapper object for Rule, used in hierarchical API
type ChildRule struct {
    // Contains the actual Rule object
	Rule *Rule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildRule__TYPE_IDENTIFIER = "ChildRule"

// Child wrapper object for SecurityPolicy, used in hierarchical API
type ChildSecurityPolicy struct {
    // Contains the actual SecurityPolicy object
	SecurityPolicy *SecurityPolicy
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSecurityPolicy__TYPE_IDENTIFIER = "ChildSecurityPolicy"

// Child wrapper object for Segment, used in hierarchical API.
type ChildSegment struct {
    // Contains the actual Segment object.
	Segment *Segment
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegment__TYPE_IDENTIFIER = "ChildSegment"

// Child wrapper object for SegmentDiscoveryProfileBindingMap, used in hierarchical API
type ChildSegmentDiscoveryProfileBindingMap struct {
    // Contains the actual SegmentDiscoveryProfileBindingMap object
	SegmentDiscoveryProfileBindingMap *SegmentDiscoveryProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegmentDiscoveryProfileBindingMap__TYPE_IDENTIFIER = "ChildSegmentDiscoveryProfileBindingMap"

// Child wrapper object for SegmentMonitoringProfileBindingMap, used in hierarchical API
type ChildSegmentMonitoringProfileBindingMap struct {
    // Contains the actual SegmentMonitoringProfileBindingMap object
	SegmentMonitoringProfileBindingMap *SegmentMonitoringProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegmentMonitoringProfileBindingMap__TYPE_IDENTIFIER = "ChildSegmentMonitoringProfileBindingMap"

// Child wrapper object for SegmentPort, used in hierarchical API
type ChildSegmentPort struct {
    // Contains the actual SegmentPort object
	SegmentPort *SegmentPort
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegmentPort__TYPE_IDENTIFIER = "ChildSegmentPort"

// Child wrapper object for SegmentQoSProfileBindingMap, used in hierarchical API
type ChildSegmentQosProfileBindingMap struct {
    // Contains the actual SegmentQoSProfileBindingMap object
	SegmentQosProfileBindingMap *SegmentQosProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegmentQosProfileBindingMap__TYPE_IDENTIFIER = "ChildSegmentQoSProfileBindingMap"

// Child wrapper object for SegmentSecurityProfile, used in hierarchical API
type ChildSegmentSecurityProfile struct {
    // Contains the actual SegmentSecurityProfile object
	SegmentSecurityProfile *SegmentSecurityProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegmentSecurityProfile__TYPE_IDENTIFIER = "ChildSegmentSecurityProfile"

// Child wrapper object for SegmentSecurityProfileBindingMap, used in hierarchical API
type ChildSegmentSecurityProfileBindingMap struct {
    // Contains the actual SegmentSecurityProfileBindingMap object
	SegmentSecurityProfileBindingMap *SegmentSecurityProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSegmentSecurityProfileBindingMap__TYPE_IDENTIFIER = "ChildSegmentSecurityProfileBindingMap"

// Child wrapper object for Service, used in hierarchical API.
type ChildService struct {
    // Contains the actual Service object.
	Service *Service
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildService__TYPE_IDENTIFIER = "ChildService"

// Child wrapper object for ServiceEntry, used in hierarchical API.
type ChildServiceEntry struct {
    // This is a deprecated property, Please use 'ServiceEntry' instead.
	Service *data.StructValue
    // Contains the actual ServiceEntry object.
	ServiceEntry *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildServiceEntry__TYPE_IDENTIFIER = "ChildServiceEntry"

// Child wrapper object for ServiceInstanceEndpoint used in hierarchical API.
type ChildServiceInstanceEndpoint struct {
    // Contains actual ServiceInstanceEndpoint.
	ServiceInstanceEndpoint *ServiceInstanceEndpoint
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildServiceInstanceEndpoint__TYPE_IDENTIFIER = "ChildServiceInstanceEndpoint"

// Child wrapper object for ServiceInterface, used in hierarchical API.
type ChildServiceInterface struct {
    // Contains the actual ServiceInterface object.
	ServiceInterface *ServiceInterface
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildServiceInterface__TYPE_IDENTIFIER = "ChildServiceInterface"

// Child wrapper object for ServiceReference used in hierarchical API.
type ChildServiceReference struct {
    // Contains actual ServiceReference.
	ServiceReference *ServiceReference
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildServiceReference__TYPE_IDENTIFIER = "ChildServiceReference"

// Child wrapper object for ServiceSegment, used in hierarchical API
type ChildServiceSegment struct {
    // Contains the actual ServiceSegment objects
	ServiceSegment *ServiceSegment
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildServiceSegment__TYPE_IDENTIFIER = "ChildServiceSegment"

// Child wrapper object for SessionTimerProfileBindingMap, used in hierarchical API
type ChildSessionTimerProfileBindingMap struct {
    // Contains the actual SessionTimerProfileBindingMap object
	SessionTimerProfileBindingMap *SessionTimerProfileBindingMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSessionTimerProfileBindingMap__TYPE_IDENTIFIER = "ChildSessionTimerProfileBindingMap"

// Child wrapper object for Site, used in hierarchical API.
type ChildSite struct {
    // Contains the actual Site object.
	Site *Site
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSite__TYPE_IDENTIFIER = "ChildSite"

// Child wrapper object for SpoofGuardProfile, used in hierarchical API
type ChildSpoofGuardProfile struct {
    // Contains the actual SpoofGuardProfile object
	SpoofGuardProfile *SpoofGuardProfile
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSpoofGuardProfile__TYPE_IDENTIFIER = "ChildSpoofGuardProfile"

// Child wrapper for SslTrustObjectData, used in hierarchical API
type ChildSslTrustObjectData struct {
    // Contains the actual SslTrustObjectData object
	SslTrustObjectData *SslTrustObjectData
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildSslTrustObjectData__TYPE_IDENTIFIER = "ChildSslTrustObjectData"

// Wrapper object for StandaloneHostIdfwConfiguration
type ChildStandaloneHostIdfwConfiguration struct {
    // Contains the actual standalone host idfw configuration object.
	StandaloneHostIdfwConfiguration *StandaloneHostIdfwConfiguration
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildStandaloneHostIdfwConfiguration__TYPE_IDENTIFIER = "ChildStandaloneHostIdfwConfiguration"

// Child wrapper object for StaticARPConfig, used in hierarchical API.
type ChildStaticARPConfig struct {
    // Contains the actual StaticARPConfig object.
	StaticARPConfig *StaticARPConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildStaticARPConfig__TYPE_IDENTIFIER = "ChildStaticARPConfig"

// Child wrapper for StaticRouteBfdPeer, used in hierarchical API.
type ChildStaticRouteBfdPeer struct {
    // Contains the actual StaticRouteBfdPeer object.
	BfdPeer *StaticRouteBfdPeer
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildStaticRouteBfdPeer__TYPE_IDENTIFIER = "ChildStaticRouteBfdPeer"

// Child wrapper object for StaticRoutes, used in hierarchical API.
type ChildStaticRoutes struct {
    // Contains the actual StaticRoutes object.
	StaticRoutes *StaticRoutes
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildStaticRoutes__TYPE_IDENTIFIER = "ChildStaticRoutes"

// Child wrapper object for Tier-0, used in hierarchical API.
type ChildTier0 struct {
    // Contains the actual Tier-0 object.
	Tier0 *Tier0
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier0__TYPE_IDENTIFIER = "ChildTier0"

// Child wrapper object for Tier0DeploymentMap, used in hierarchical API.
type ChildTier0DeploymentMap struct {
    // Contains the actual Tier0DeploymentMap object.
	Tier0DeploymentMap *Tier0DeploymentMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier0DeploymentMap__TYPE_IDENTIFIER = "ChildTier0DeploymentMap"

// Child wrapper object for Tier0Interface, used in hierarchical API.
type ChildTier0Interface struct {
    // Contains the actual Tier0Interface object.
	Tier0Interface *Tier0Interface
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier0Interface__TYPE_IDENTIFIER = "ChildTier0Interface"

// Child wrapper object for Tier0RouteMap, used in hierarchical API
type ChildTier0RouteMap struct {
    // Contains the actual Tier0RouteMap object
	Tier0RouteMap *Tier0RouteMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier0RouteMap__TYPE_IDENTIFIER = "ChildTier0RouteMap"

// Child wrapper object for Tier-1 , used in hierarchical API.
type ChildTier1 struct {
    // Contains the actual Tier-1 object.
	Tier1 *Tier1
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier1__TYPE_IDENTIFIER = "ChildTier1"

// Child wrapper object for Tier1DeploymentMap, used in hierarchical API.
type ChildTier1DeploymentMap struct {
    // Contains the actual Tier1DeploymentMap object.
	Tier1DeploymentMap *Tier1DeploymentMap
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier1DeploymentMap__TYPE_IDENTIFIER = "ChildTier1DeploymentMap"

// Child wrapper object for Tier1Interface, used in hierarchical API.
type ChildTier1Interface struct {
    // Contains the actual Tier1Interface object.
	Tier1Interface *Tier1Interface
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTier1Interface__TYPE_IDENTIFIER = "ChildTier1Interface"

// Child wrapper for TlsCertificate, used in hierarchical API.
type ChildTlsCertificate struct {
    // Contains the actual TlsCertificate object.
	TlsCertificate *TlsCertificate
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTlsCertificate__TYPE_IDENTIFIER = "ChildTlsCertificate"

// Child wrapper for TlsCrl, used in hierarchical API.
type ChildTlsCrl struct {
    // Contains the actual TlsCrl object.
	TlsCrl *TlsCrl
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTlsCrl__TYPE_IDENTIFIER = "ChildTlsCrl"

// Child wrapper for TlsTrustData, used in hierarchical API.
type ChildTlsTrustData struct {
    // Contains the actual TlsTrustData object.
	TlsTrustData *TlsTrustData
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTlsTrustData__TYPE_IDENTIFIER = "ChildTlsTrustData"

// Child wrapper for TraceflowConfig, used in hierarchical API
type ChildTraceflowConfig struct {
    // Contains the actual TraceflowConfig object.
	TraceflowConfig *TraceflowConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildTraceflowConfig__TYPE_IDENTIFIER = "ChildTraceflowConfig"

// Child wrapper object for VirtualEndpoint used in hierarchical API.
type ChildVirtualEndpoint struct {
    // Contains reference to actual VirtualEndpoint.
	VirtualEndpoint *VirtualEndpoint
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildVirtualEndpoint__TYPE_IDENTIFIER = "ChildVirtualEndpoint"

// Child wrapper object for VniPoolConfig, used in hierarchical API.
type ChildVniPoolConfig struct {
    // Contains the actual VniPoolConfig object.
	VniPoolConfig *VniPoolConfig
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ChildVniPoolConfig__TYPE_IDENTIFIER = "ChildVniPoolConfig"

// DHCP classless static route option.
type ClasslessStaticRoute struct {
    // Destination network in CIDR format. format: address-or-block-or-range
	Network *string
    // IP address of next hop of the route. format: ip
	NextHop *string
}

// Stores the information about cloud native service instance.
type CloudNativeServiceInstance struct {
    // Id of service instance fetched from public cloud.
	ExternalId *string
    // Type of cloud native service.
	ServiceType *string
    // Reference of the public cloud gateway that reported the service instance.
	Source *ResourceReference
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}

// Cluster backup details
type ClusterBackupInfo struct {
    // IP address or FQDN of the node from which the backup was taken format: hostname-or-ip
	IpAddress *string
    // ID of the node from which the backup was taken
	NodeId *string
    // Possible values are: 
    //
    // * ClusterBackupInfo#ClusterBackupInfo_RESTORE_TYPE_REGULAR_RESTORE
    // * ClusterBackupInfo#ClusterBackupInfo_RESTORE_TYPE_POLICY_ONLY_RESTORE
    //
    //  Type of restore allowed
	RestoreType []string
    // timestamp of the cluster backup file format: int64
	Timestamp *int64
}
const ClusterBackupInfo_RESTORE_TYPE_REGULAR_RESTORE = "REGULAR_RESTORE"
const ClusterBackupInfo_RESTORE_TYPE_POLICY_ONLY_RESTORE = "POLICY_ONLY_RESTORE"

type ClusterBackupInfoListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List of timestamps of backed-up cluster files
	Results []ClusterBackupInfo
}

// Cluster restore status
type ClusterRestoreStatus struct {
    // Timestamp when backup was initiated in epoch millisecond format: int64
	BackupTimestamp *int64
    // The list of allowed endpoints, based on the current state of the restore process
	Endpoints []ResourceLink
    // Unique id for backup request
	Id *string
    // Instructions for users to reconcile Restore operations
	Instructions []InstructionInfo
    // Timestamp when restore was completed in epoch millisecond format: int64
	RestoreEndTime *int64
    // Timestamp when restore was started in epoch millisecond format: int64
	RestoreStartTime *int64
	Status *GlobalRestoreStatus
	Step *RestoreStep
    // Total number of steps in the entire restore process format: int64
	TotalSteps *int64
}

// Represents a column of the Grid
type ColumnItem struct {
    // Identifies the column and used for fetching content upon an user click or drilldown. If column identifier is not provided, the column's data will not participate in searches and drilldowns.
	ColumnIdentifier *string
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget.
	DrilldownId *string
    // Field from which values of the column will be derived.
	Field *string
    // If set to true, hides the column
	Hidden *bool
    // Label of the column.
	Label *Label
    // Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.
	Navigation *string
    // Render configuration to be applied, if any.
	RenderConfiguration []RenderConfiguration
    // If true, the value of the column are sorted in ascending order. Otherwise, in descending order.
	SortAscending *bool
    // Sorting on column is based on the sort_key. sort_key represents the field in the output data on which sort is requested.
	SortKey *string
    // Multi-line text to be shown on tooltip while hovering over a cell in the grid.
	Tooltip []Tooltip
    // Possible values are: 
    //
    // * ColumnItem#ColumnItem_TYPE_STRING
    // * ColumnItem#ColumnItem_TYPE_NUMBER
    // * ColumnItem#ColumnItem_TYPE_DATE
    //
    //  Data type of the field.
	Type_ *string
}
const ColumnItem_TYPE_STRING = "String"
const ColumnItem_TYPE_NUMBER = "Number"
const ColumnItem_TYPE_DATE = "Date"

// A communication entry indicates the action to be performed for various types of traffic flowing between workload groups. This type is deprecated. Use the type Rule instead.
type CommunicationEntry struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * CommunicationEntry#CommunicationEntry_ACTION_ALLOW
    // * CommunicationEntry#CommunicationEntry_ACTION_DROP
    // * CommunicationEntry#CommunicationEntry_ACTION_REJECT
    //
    //  The action to be applied to all the services.
	Action *string
    // We need paths as duplicate names may exist for groups under different domains.In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string
    // Possible values are: 
    //
    // * CommunicationEntry#CommunicationEntry_DIRECTION_IN
    // * CommunicationEntry#CommunicationEntry_DIRECTION_OUT
    // * CommunicationEntry#CommunicationEntry_DIRECTION_IN_OUT
    //
    //  Define direction of traffic.
	Direction *string
    // Flag to disable the rule. Default is enabled.
	Disabled *bool
    // Flag to enable packet logging. Default is disabled.
	Logged *bool
    // Text for additional notes on changes.
	Notes *string
    // The list of policy paths where the communication entry is applied Edge/LR/T0/T1/LRP/CGW/MGW/etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string
    // This field is used to resolve conflicts between multiple CommunicationEntries under CommunicationMap for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple communication entries with the same sequence number then their order is not deterministic. If a specific order of communication entry is desired, then one has to specify unique sequence numbers or use the POST request on the communication entry entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string
    // We need paths as duplicate names may exist for groups under different domains. In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string
    // User level field which will be printed in CLI and packet logs.
	Tag *string
}
const CommunicationEntry_ACTION_ALLOW = "ALLOW"
const CommunicationEntry_ACTION_DROP = "DROP"
const CommunicationEntry_ACTION_REJECT = "REJECT"
const CommunicationEntry_DIRECTION_IN = "IN"
const CommunicationEntry_DIRECTION_OUT = "OUT"
const CommunicationEntry_DIRECTION_IN_OUT = "IN_OUT"

// Ordered list of CommunicationEntries. This object is created by default along with the Domain. This type is deprecated. Use the type SecurityPolicy instead.
type CommunicationMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework for Distributed Firewall provides four pre-defined categories for classifying a communication map. They are \"Emergency\", \"Infrastructure\", \"Environment\" and \"Application\". Amongst the layer 3 communication maps,there is a pre-determined order in which the policy framework manages the priority of these communication maps. Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a communication map into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four layer 3 categories.
	Category *string
    // CommunicationEntries that are a part of this CommunicationMap
	CommunicationEntries []CommunicationEntry
    // This field is used to resolve conflicts between communication maps across domains. In order to change the precedence of a communication map one can fire a POST request on the communication map entity with a query parameter action=revise The precedence field will reflect the value of the computed precedence upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several communication maps, the only way to set the precedence is to explicitly specify the precedence number for each communication map. If no precedence is specified in the payload, a value of 0 is assigned by default. If there are multiple communication maps with the same precedence then their order is not deterministic. If a specific order of communication map is desired, then one has to specify a unique precedence or use the POST request on the communication map entity with a query parameter action=revise to let the framework assign a precedence format: int32
	Precedence *int64
}

// Community list for BGP routing configuration
type CommunityList struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of BGP community entries. Both standard and large communities are supported. Standard community format: aa:nn where aa and nn must be within the range [1 - 65536]. Large BGP Community format: aa:bb:nn where aa (Global Administrator), bb (Local Data Part 1) and nn (Local Data Part 2) must be within the range [1 - 4294967295]. In additon to numbered communites (e.g. 3356:2040), predefined communities (NO_EXPORT, NO_ADVERTISE, NO_EXPORT_SUBCONFED) are supported.
	Communities []string
}

// Paged collection of CommunityLists
type CommunityListListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // CommunityList results
	Results []CommunityList
}

// Match criteria based on a community list
type CommunityMatchCriteria struct {
    // Match criteria specified as a community list path or a regular expression.
	Criteria *string
    // Possible values are: 
    //
    // * CommunityMatchCriteria#CommunityMatchCriteria_MATCH_OPERATOR_ANY
    // * CommunityMatchCriteria#CommunityMatchCriteria_MATCH_OPERATOR_ALL
    // * CommunityMatchCriteria#CommunityMatchCriteria_MATCH_OPERATOR_EXACT
    // * CommunityMatchCriteria#CommunityMatchCriteria_MATCH_OPERATOR_COMMUNITY_REGEX
    // * CommunityMatchCriteria#CommunityMatchCriteria_MATCH_OPERATOR_LARGE_COMMUNITY_REGEX
    //
    //  Match operator for community list entries. Not valid when a regular expression is specified for criteria.
	MatchOperator *string
}
const CommunityMatchCriteria_MATCH_OPERATOR_ANY = "MATCH_ANY"
const CommunityMatchCriteria_MATCH_OPERATOR_ALL = "MATCH_ALL"
const CommunityMatchCriteria_MATCH_OPERATOR_EXACT = "MATCH_EXACT"
const CommunityMatchCriteria_MATCH_OPERATOR_COMMUNITY_REGEX = "MATCH_COMMUNITY_REGEX"
const CommunityMatchCriteria_MATCH_OPERATOR_LARGE_COMMUNITY_REGEX = "MATCH_LARGE_COMMUNITY_REGEX"

// Idfw configuration for enable/disable idfw on cluster level.
type ComputeClusterIdfwConfiguration struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If set to true, idfw is enabled for this cluster
	ClusterIdfwEnabled *bool
    // Contains actual policy resource reference object
	Member *PolicyResourceReference
}

type ComputeCollection struct {
    // Local Id of the compute collection in the Compute Manager
	CmLocalId *string
    // External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC
	ExternalId *string
    // Id of the compute manager from where this Compute Collection was discovered
	OriginId *string
    // Key-Value map of additional specific properties of compute collection in the Compute Manager
	OriginProperties []KeyValuePair
    // ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers
	OriginType *string
    // Id of the owner of compute collection in the Compute Manager
	OwnerId *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}

// Represents the leaf level condition. Evaluation of the condition expression will be case insensitive.
type Condition struct {
    // Possible values are: 
    //
    // * Condition#Condition_KEY_TAG
    // * Condition#Condition_KEY_NAME
    // * Condition#Condition_KEY_OSNAME
    // * Condition#Condition_KEY_COMPUTERNAME
    //
    //  Key
	Key *string
    // Possible values are: 
    //
    // * Condition#Condition_MEMBER_TYPE_IPSET
    // * Condition#Condition_MEMBER_TYPE_VIRTUALMACHINE
    // * Condition#Condition_MEMBER_TYPE_LOGICALPORT
    // * Condition#Condition_MEMBER_TYPE_LOGICALSWITCH
    // * Condition#Condition_MEMBER_TYPE_SEGMENT
    // * Condition#Condition_MEMBER_TYPE_SEGMENTPORT
    //
    //  Group member type
	MemberType *string
    // Possible values are: 
    //
    // * Condition#Condition_OPERATOR_EQUALS
    // * Condition#Condition_OPERATOR_CONTAINS
    // * Condition#Condition_OPERATOR_STARTSWITH
    // * Condition#Condition_OPERATOR_ENDSWITH
    // * Condition#Condition_OPERATOR_NOTEQUALS
    //
    //  operator
	Operator *string
    // Value
	Value *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const Condition__TYPE_IDENTIFIER = "Condition"
const Condition_KEY_TAG = "Tag"
const Condition_KEY_NAME = "Name"
const Condition_KEY_OSNAME = "OSName"
const Condition_KEY_COMPUTERNAME = "ComputerName"
const Condition_MEMBER_TYPE_IPSET = "IPSet"
const Condition_MEMBER_TYPE_VIRTUALMACHINE = "VirtualMachine"
const Condition_MEMBER_TYPE_LOGICALPORT = "LogicalPort"
const Condition_MEMBER_TYPE_LOGICALSWITCH = "LogicalSwitch"
const Condition_MEMBER_TYPE_SEGMENT = "Segment"
const Condition_MEMBER_TYPE_SEGMENTPORT = "SegmentPort"
const Condition_OPERATOR_EQUALS = "EQUALS"
const Condition_OPERATOR_CONTAINS = "CONTAINS"
const Condition_OPERATOR_STARTSWITH = "STARTSWITH"
const Condition_OPERATOR_ENDSWITH = "ENDSWITH"
const Condition_OPERATOR_NOTEQUALS = "NOTEQUALS"

// Represents the leaf level expression to restrict the target attribute value based on the set of existing values. Generally, used in combination with RelatedAttributeConditionalExpression to constraint the values related to another attribute on the same resource. This object is always used in conjunction with some exression. Example - { \"condition\" : { \"operator\":\"INCLUDES\", \"rhs_value\": [\"/infra/domains/mgw/groups/VCENTER\", \"/infra/domains/mgw/groups/SRM\", \"/infra/domains/mgw/groups/NSX\"], \"value_constraint\": { \"resource_type\": \"ValueConstraintExpression\", \"operator\":\"EXCLUDES\", \"values\":[\"/infra/domains/mgw/groups/VCENTER\", \"/infra/domains/mgw/groups/SRM\", \"/infra/domains/mgw/groups/NSX\"] } }
type ConditionalValueConstraintExpression struct {
    // Possible values are: 
    //
    // * ConditionalValueConstraintExpression#ConditionalValueConstraintExpression_OPERATOR_INCLUDES
    // * ConditionalValueConstraintExpression#ConditionalValueConstraintExpression_OPERATOR_EXCLUDES
    // * ConditionalValueConstraintExpression#ConditionalValueConstraintExpression_OPERATOR_EQUALS
    //
    //  Set operation to constraint values.
	Operator *string
    // List of values.
	RhsValue []string
    // Values to apply the conditional constraint on target.
	ValueConstraint *ValueConstraintExpression
}
const ConditionalValueConstraintExpression_OPERATOR_INCLUDES = "INCLUDES"
const ConditionalValueConstraintExpression_OPERATOR_EXCLUDES = "EXCLUDES"
const ConditionalValueConstraintExpression_OPERATOR_EQUALS = "EQUALS"

// Describes status of configuration of an entity
type ConfigurationState struct {
    // Array of configuration state of various sub systems
	Details []ConfigurationStateElement
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * ConfigurationState#ConfigurationState_STATE_PENDING
    // * ConfigurationState#ConfigurationState_STATE_IN_PROGRESS
    // * ConfigurationState#ConfigurationState_STATE_SUCCESS
    // * ConfigurationState#ConfigurationState_STATE_FAILED
    // * ConfigurationState#ConfigurationState_STATE_PARTIAL_SUCCESS
    // * ConfigurationState#ConfigurationState_STATE_ORPHANED
    // * ConfigurationState#ConfigurationState_STATE_UNKNOWN
    // * ConfigurationState#ConfigurationState_STATE_ERROR
    // * ConfigurationState#ConfigurationState_STATE_IN_SYNC
    // * ConfigurationState#ConfigurationState_STATE_NOT_AVAILABLE
    // * ConfigurationState#ConfigurationState_STATE_VM_DEPLOYMENT_QUEUED
    // * ConfigurationState#ConfigurationState_STATE_VM_DEPLOYMENT_IN_PROGRESS
    // * ConfigurationState#ConfigurationState_STATE_VM_DEPLOYMENT_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_POWER_ON_IN_PROGRESS
    // * ConfigurationState#ConfigurationState_STATE_VM_POWER_ON_FAILED
    // * ConfigurationState#ConfigurationState_STATE_REGISTRATION_PENDING
    // * ConfigurationState#ConfigurationState_STATE_NODE_NOT_READY
    // * ConfigurationState#ConfigurationState_STATE_NODE_READY
    // * ConfigurationState#ConfigurationState_STATE_VM_POWER_OFF_IN_PROGRESS
    // * ConfigurationState#ConfigurationState_STATE_VM_POWER_OFF_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_UNDEPLOY_IN_PROGRESS
    // * ConfigurationState#ConfigurationState_STATE_VM_UNDEPLOY_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_UNDEPLOY_SUCCESSFUL
    // * ConfigurationState#ConfigurationState_STATE_EDGE_CONFIG_ERROR
    // * ConfigurationState#ConfigurationState_STATE_VM_DEPLOYMENT_RESTARTED
    // * ConfigurationState#ConfigurationState_STATE_REGISTRATION_FAILED
    // * ConfigurationState#ConfigurationState_STATE_TRANSPORT_NODE_SYNC_PENDING
    // * ConfigurationState#ConfigurationState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * ConfigurationState#ConfigurationState_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * ConfigurationState#ConfigurationState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * ConfigurationState#ConfigurationState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * ConfigurationState#ConfigurationState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * ConfigurationState#ConfigurationState_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * ConfigurationState#ConfigurationState_STATE_APPLIANCE_INTERNAL_ERROR
    // * ConfigurationState#ConfigurationState_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * ConfigurationState#ConfigurationState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * ConfigurationState#ConfigurationState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * ConfigurationState#ConfigurationState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * ConfigurationState#ConfigurationState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * ConfigurationState#ConfigurationState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * ConfigurationState#ConfigurationState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * ConfigurationState#ConfigurationState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * ConfigurationState#ConfigurationState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * ConfigurationState#ConfigurationState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * ConfigurationState#ConfigurationState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * ConfigurationState#ConfigurationState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * ConfigurationState#ConfigurationState_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * ConfigurationState#ConfigurationState_STATE_INVALID_PNIC_DEVICE_NAME
    // * ConfigurationState#ConfigurationState_STATE_TRANSPORT_NODE_READY
    // * ConfigurationState#ConfigurationState_STATE_VM_NETWORK_EDIT_PENDING
    // * ConfigurationState#ConfigurationState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * ConfigurationState#ConfigurationState_STATE_MPA_DISCONNECTED
    // * ConfigurationState#ConfigurationState_STATE_VM_RENAME_PENDING
    // * ConfigurationState#ConfigurationState_STATE_VM_CONFIG_EDIT_PENDING
    // * ConfigurationState#ConfigurationState_STATE_VM_NETWORK_EDIT_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_RENAME_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_CONFIG_EDIT_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_CONFIG_DISCREPANCY
    // * ConfigurationState#ConfigurationState_STATE_VM_NODE_REFRESH_FAILED
    // * ConfigurationState#ConfigurationState_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * ConfigurationState#ConfigurationState_STATE_REGISTRATION_TIMEDOUT
    //
    //  Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State *string
}
const ConfigurationState_STATE_PENDING = "pending"
const ConfigurationState_STATE_IN_PROGRESS = "in_progress"
const ConfigurationState_STATE_SUCCESS = "success"
const ConfigurationState_STATE_FAILED = "failed"
const ConfigurationState_STATE_PARTIAL_SUCCESS = "partial_success"
const ConfigurationState_STATE_ORPHANED = "orphaned"
const ConfigurationState_STATE_UNKNOWN = "unknown"
const ConfigurationState_STATE_ERROR = "error"
const ConfigurationState_STATE_IN_SYNC = "in_sync"
const ConfigurationState_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const ConfigurationState_STATE_VM_DEPLOYMENT_QUEUED = "VM_DEPLOYMENT_QUEUED"
const ConfigurationState_STATE_VM_DEPLOYMENT_IN_PROGRESS = "VM_DEPLOYMENT_IN_PROGRESS"
const ConfigurationState_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const ConfigurationState_STATE_VM_POWER_ON_IN_PROGRESS = "VM_POWER_ON_IN_PROGRESS"
const ConfigurationState_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const ConfigurationState_STATE_REGISTRATION_PENDING = "REGISTRATION_PENDING"
const ConfigurationState_STATE_NODE_NOT_READY = "NODE_NOT_READY"
const ConfigurationState_STATE_NODE_READY = "NODE_READY"
const ConfigurationState_STATE_VM_POWER_OFF_IN_PROGRESS = "VM_POWER_OFF_IN_PROGRESS"
const ConfigurationState_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const ConfigurationState_STATE_VM_UNDEPLOY_IN_PROGRESS = "VM_UNDEPLOY_IN_PROGRESS"
const ConfigurationState_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const ConfigurationState_STATE_VM_UNDEPLOY_SUCCESSFUL = "VM_UNDEPLOY_SUCCESSFUL"
const ConfigurationState_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const ConfigurationState_STATE_VM_DEPLOYMENT_RESTARTED = "VM_DEPLOYMENT_RESTARTED"
const ConfigurationState_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const ConfigurationState_STATE_TRANSPORT_NODE_SYNC_PENDING = "TRANSPORT_NODE_SYNC_PENDING"
const ConfigurationState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const ConfigurationState_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const ConfigurationState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const ConfigurationState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const ConfigurationState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const ConfigurationState_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const ConfigurationState_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const ConfigurationState_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const ConfigurationState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const ConfigurationState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const ConfigurationState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const ConfigurationState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const ConfigurationState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const ConfigurationState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const ConfigurationState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const ConfigurationState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const ConfigurationState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const ConfigurationState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const ConfigurationState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const ConfigurationState_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const ConfigurationState_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const ConfigurationState_STATE_TRANSPORT_NODE_READY = "TRANSPORT_NODE_READY"
const ConfigurationState_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const ConfigurationState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const ConfigurationState_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const ConfigurationState_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const ConfigurationState_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const ConfigurationState_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const ConfigurationState_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const ConfigurationState_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const ConfigurationState_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const ConfigurationState_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const ConfigurationState_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const ConfigurationState_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"

// Describes status of configuration of an entity
type ConfigurationStateElement struct {
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_IN_PROGRESS
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_SUCCESS
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_PARTIAL_SUCCESS
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_IN_SYNC
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_DEPLOYMENT_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_POWER_ON_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_POWER_OFF_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_UNDEPLOY_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_EDGE_CONFIG_ERROR
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_REGISTRATION_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_APPLIANCE_INTERNAL_ERROR
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_INVALID_PNIC_DEVICE_NAME
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_MPA_DISCONNECTED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_NETWORK_EDIT_PENDING
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_RENAME_PENDING
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_CONFIG_EDIT_PENDING
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_NETWORK_EDIT_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_RENAME_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_CONFIG_EDIT_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_CONFIG_DISCREPANCY
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_NODE_REFRESH_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_NOT_AVAILABLE
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_REGISTRATION_TIMEDOUT
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_PENDING
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_ORPHANED
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_UNKNOWN
    // * ConfigurationStateElement#ConfigurationStateElement_STATE_ERROR
    //
    //  State of configuration on this sub system
	State *string
    // URI of backing resource on sub system
	SubSystemAddress *string
    // Identifier of backing resource on sub system
	SubSystemId *string
    // Name of backing resource on sub system
	SubSystemName *string
    // Type of backing resource on sub system
	SubSystemType *string
}
const ConfigurationStateElement_STATE_IN_PROGRESS = "in_progress"
const ConfigurationStateElement_STATE_SUCCESS = "success"
const ConfigurationStateElement_STATE_FAILED = "failed"
const ConfigurationStateElement_STATE_PARTIAL_SUCCESS = "partial_success"
const ConfigurationStateElement_STATE_IN_SYNC = "in_sync"
const ConfigurationStateElement_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const ConfigurationStateElement_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const ConfigurationStateElement_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const ConfigurationStateElement_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const ConfigurationStateElement_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const ConfigurationStateElement_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const ConfigurationStateElement_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const ConfigurationStateElement_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const ConfigurationStateElement_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const ConfigurationStateElement_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const ConfigurationStateElement_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const ConfigurationStateElement_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const ConfigurationStateElement_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const ConfigurationStateElement_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const ConfigurationStateElement_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const ConfigurationStateElement_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const ConfigurationStateElement_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const ConfigurationStateElement_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const ConfigurationStateElement_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const ConfigurationStateElement_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const ConfigurationStateElement_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const ConfigurationStateElement_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const ConfigurationStateElement_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const ConfigurationStateElement_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const ConfigurationStateElement_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const ConfigurationStateElement_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const ConfigurationStateElement_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const ConfigurationStateElement_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const ConfigurationStateElement_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const ConfigurationStateElement_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const ConfigurationStateElement_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const ConfigurationStateElement_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const ConfigurationStateElement_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const ConfigurationStateElement_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const ConfigurationStateElement_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const ConfigurationStateElement_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const ConfigurationStateElement_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const ConfigurationStateElement_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const ConfigurationStateElement_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const ConfigurationStateElement_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"
const ConfigurationStateElement_STATE_PENDING = "pending"
const ConfigurationStateElement_STATE_ORPHANED = "orphaned"
const ConfigurationStateElement_STATE_UNKNOWN = "unknown"
const ConfigurationStateElement_STATE_ERROR = "error"

// Represents the operators AND or OR.
type ConjunctionOperator struct {
    // Possible values are: 
    //
    // * ConjunctionOperator#ConjunctionOperator_CONJUNCTION_OPERATOR_OR
    // * ConjunctionOperator#ConjunctionOperator_CONJUNCTION_OPERATOR_AND
    //
    //  Conjunction Operator Node
	ConjunctionOperator *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ConjunctionOperator__TYPE_IDENTIFIER = "ConjunctionOperator"
const ConjunctionOperator_CONJUNCTION_OPERATOR_OR = "OR"
const ConjunctionOperator_CONJUNCTION_OPERATOR_AND = "AND"

// Advanced configuration for Policy connectivity
type ConnectivityAdvancedConfig struct {
    // Possible values are: 
    //
    // * ConnectivityAdvancedConfig#ConnectivityAdvancedConfig_CONNECTIVITY_ON
    // * ConnectivityAdvancedConfig#ConnectivityAdvancedConfig_CONNECTIVITY_OFF
    //
    //  Connectivity configuration to manually connect (ON) or disconnect (OFF) a logical entity from network topology. Only valid for Tier1 Segment.
	Connectivity *string
}
const ConnectivityAdvancedConfig_CONNECTIVITY_ON = "ON"
const ConnectivityAdvancedConfig_CONNECTIVITY_OFF = "OFF"

// Consolidated Realized Status of an intent object across enforcement points.
type ConsolidatedRealizedStatus struct {
    // Intent path of object, forward slashes must be escaped using %2F.
	IntentPath *string
    // Consolidated Realized Status across enforcement points.
	ConsolidatedStatus *ConsolidatedStatus
    // List of Consolidated Realized Status per enforcement point.
	ConsolidatedStatusPerEnforcementPoint []ConsolidatedStatusPerEnforcementPoint
}

// Consolidated Status of an intent object. Status Consolidation of an intent happens at multiple levels: - Per Enforcement Point: calculation of the consolidated status is performed using all realized entities that the intent objet maps to on a specific enforcement point. - Across Enforcement Points: calculation of the consolidated status is performend aggregating the consolidated status from each enforcement point.
type ConsolidatedStatus struct {
    // Possible values are: 
    //
    // * ConsolidatedStatus#ConsolidatedStatus_CONSOLIDATED_STATUS_SUCCESS
    // * ConsolidatedStatus#ConsolidatedStatus_CONSOLIDATED_STATUS_IN_PROGRESS
    // * ConsolidatedStatus#ConsolidatedStatus_CONSOLIDATED_STATUS_ERROR
    // * ConsolidatedStatus#ConsolidatedStatus_CONSOLIDATED_STATUS_UNKNOWN
    // * ConsolidatedStatus#ConsolidatedStatus_CONSOLIDATED_STATUS_UNINITIALIZED
    //
    //  Consolidated Realized Status of an intent object.
	ConsolidatedStatus *string
}
const ConsolidatedStatus_CONSOLIDATED_STATUS_SUCCESS = "SUCCESS"
const ConsolidatedStatus_CONSOLIDATED_STATUS_IN_PROGRESS = "IN_PROGRESS"
const ConsolidatedStatus_CONSOLIDATED_STATUS_ERROR = "ERROR"
const ConsolidatedStatus_CONSOLIDATED_STATUS_UNKNOWN = "UNKNOWN"
const ConsolidatedStatus_CONSOLIDATED_STATUS_UNINITIALIZED = "UNINITIALIZED"

// Detailed Realized Status of an intent object on an NSX-T type of enforcement point.
type ConsolidatedStatusNsxt struct {
    // Detailed Realized Status inherent to an NSX-T Enforcement Point.
	EnforcedStatus *EnforcedStatusDetailsNsxt
    // Alarm information details.
	Alarm *PolicyRuntimeAlarm
    // Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath *string
    // Consolidated Realized Status of an Intent object per enforcement point.
	ConsolidatedStatus *ConsolidatedStatus
    // Enforcement Point Id.
	EnforcementPointId *string
	ResourceType string
    // The site where this enforcement point resides.
	SitePath *string
}

// Consolidated Realized Status Per Enforcement Point.
type ConsolidatedStatusPerEnforcementPoint struct {
    // Alarm information details.
	Alarm *PolicyRuntimeAlarm
    // Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath *string
    // Consolidated Realized Status of an Intent object per enforcement point.
	ConsolidatedStatus *ConsolidatedStatus
    // Enforcement Point Id.
	EnforcementPointId *string
	ResourceType string
    // The site where this enforcement point resides.
	SitePath *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ConsolidatedStatusPerEnforcementPoint__TYPE_IDENTIFIER = "ConsolidatedStatusPerEnforcementPoint"

// Constant Field Value.
type ConstantFieldValue struct {
    // Constant Value that the field must be set to.
	Constant *data.StructValue
    // Possible values are: 
    //
    // * FieldSettingValue#FieldSettingValue_RESOURCE_TYPE_CONSTANTFIELDVALUE
    //
    //  Field Setting Value resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ConstantFieldValue__TYPE_IDENTIFIER = "ConstantFieldValue"

// Constraint object to constraint any attribute on a resource based on specified expression. Example- Restrict the allowed services in Edge Communication Entry to list of services, if the destinationGroups contain vCenter. { \"target\":{ \"target_resource_type\":\"CommunicationEntry\", \"attribute\":\"services\", \"path_prefix\":\"/infra/domains/vmc-domain/edge-communication-maps/default/communication-entries\" } \"constraint_expression\":{ \"related_attribute\":{ \"attribute\":\"destinationGroups\" } \"condition\":{ \"operator\":\"INCLUDES\", \"rhs_value\":{\"vCenter\"} \"value_constraint\":{ \"operator\":\"ALLOW\", \"values\":{\"/ref/services/HTTPS\", \"/ref/services/HTTOP\", ...} } } } }
type Constraint struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Expression to constrain the target attribute value.
	ConstraintExpression *data.StructValue
    // User friendly message to be shown to users upon violation.
	Message *string
    // Target resource attribute details.
	Target *ConstraintTarget
}

// All the types of the expression extend from this abstract class. This is present for extensibility.
type ConstraintExpression struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_VALUECONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_RELATEDATTRIBUTECONDITIONALEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_ENTITYINSTANCECOUNTCONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_FIELDSANITYCONSTRAINTEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ConstraintExpression__TYPE_IDENTIFIER = "ConstraintExpression"
const ConstraintExpression_RESOURCE_TYPE_VALUECONSTRAINTEXPRESSION = "ValueConstraintExpression"
const ConstraintExpression_RESOURCE_TYPE_RELATEDATTRIBUTECONDITIONALEXPRESSION = "RelatedAttributeConditionalExpression"
const ConstraintExpression_RESOURCE_TYPE_ENTITYINSTANCECOUNTCONSTRAINTEXPRESSION = "EntityInstanceCountConstraintExpression"
const ConstraintExpression_RESOURCE_TYPE_FIELDSANITYCONSTRAINTEXPRESSION = "FieldSanityConstraintExpression"

// Paged Collection of Constraints
type ConstraintListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Constraint list results
	Results []Constraint
}

// Resource attribute on which constraint should be applied. Example - sourceGroups attribute of Edge CommunicationEntry to be restricted, is given as: { \"target_resource_type\":\"CommunicationEntry\", \"attribute\":\"sourceGroups\", \"path_prefix\":\"/infra/domains/vmc-domain/edge-communication-maps/default/communication-entries\" }
type ConstraintTarget struct {
    // Attribute name of the target entity.
	Attribute *string
    // Path prefix of the entity to apply constraint. This is required to further disambiguiate if multiple policy entities share the same resource type. Example - Edge FW and DFW use the same resource type CommunicationMap, CommunicationEntry, Group, etc.
	PathPrefix *string
    // Resource type of the target entity.
	TargetResourceType *string
}

// Container application within a project.
type ContainerApplication struct {
    // Identifier of the container cluster this container application belongs to.
	ContainerClusterId *string
    // Identifier of the project which this container application belongs to.
	ContainerProjectId *string
    // Identifier of the container application on container cluster e.g. PCF app id, k8s service id.
	ExternalId *string
    // List of network errors related to container application.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerApplication#ContainerApplication_NETWORK_STATUS_HEALTHY
    // * ContainerApplication#ContainerApplication_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container application.
	NetworkStatus *string
    // Array of additional specific properties of container application in key-value format.
	OriginProperties []KeyValuePair
    // Possible values are: 
    //
    // * ContainerApplication#ContainerApplication_STATUS_UNKNOWN
    // * ContainerApplication#ContainerApplication_STATUS_HEALTHY
    // * ContainerApplication#ContainerApplication_STATUS_UP
    // * ContainerApplication#ContainerApplication_STATUS_DOWN
    // * ContainerApplication#ContainerApplication_STATUS_DEGRADED
    //
    //  Status of the container application.
	Status *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerApplication__TYPE_IDENTIFIER = "ContainerApplication"
const ContainerApplication_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerApplication_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"
const ContainerApplication_STATUS_UNKNOWN = "UNKNOWN"
const ContainerApplication_STATUS_HEALTHY = "HEALTHY"
const ContainerApplication_STATUS_UP = "UP"
const ContainerApplication_STATUS_DOWN = "DOWN"
const ContainerApplication_STATUS_DEGRADED = "DEGRADED"

// Container application instance within a project.
type ContainerApplicationInstance struct {
    // Cluster node id where application instance is running.
	ClusterNodeId *string
    // List of identifiers of the container application.
	ContainerApplicationIds []string
    // Identifier of the container cluster this application instance belongs to.
	ContainerClusterId *string
    // Identifier of the container project which this container application instance belongs to.
	ContainerProjectId *string
    // Identifier of the container application instance on container cluster.
	ExternalId *string
    // List of network errors related to container application instance.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerApplicationInstance#ContainerApplicationInstance_NETWORK_STATUS_HEALTHY
    // * ContainerApplicationInstance#ContainerApplicationInstance_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container application instance.
	NetworkStatus *string
    // Array of additional specific properties of container application instance in key-value format.
	OriginProperties []KeyValuePair
    // Possible values are: 
    //
    // * ContainerApplicationInstance#ContainerApplicationInstance_STATUS_UNKNOWN
    // * ContainerApplicationInstance#ContainerApplicationInstance_STATUS_HEALTHY
    // * ContainerApplicationInstance#ContainerApplicationInstance_STATUS_UP
    // * ContainerApplicationInstance#ContainerApplicationInstance_STATUS_DOWN
    // * ContainerApplicationInstance#ContainerApplicationInstance_STATUS_DEGRADED
    //
    //  Status of the container application instance.
	Status *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerApplicationInstance__TYPE_IDENTIFIER = "ContainerApplicationInstance"
const ContainerApplicationInstance_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerApplicationInstance_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"
const ContainerApplicationInstance_STATUS_UNKNOWN = "UNKNOWN"
const ContainerApplicationInstance_STATUS_HEALTHY = "HEALTHY"
const ContainerApplicationInstance_STATUS_UP = "UP"
const ContainerApplicationInstance_STATUS_DOWN = "DOWN"
const ContainerApplicationInstance_STATUS_DEGRADED = "DEGRADED"

// Details of container cluster.
type ContainerCluster struct {
    // Possible values are: 
    //
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_PAS
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_PKS
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_KUBERNETES
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_OPENSHIFT
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_WCP
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_WCP_GUEST
    // * ContainerCluster#ContainerCluster_CLUSTER_TYPE_OTHER
    //
    //  Type of the container cluster. In case of creating container cluster first time, it is expected to pass the valid cluster-type. In case of update, if there is no change in cluster-type, then this field can be omitted in the request.
	ClusterType *string
    // External identifier of the container cluster.
	ExternalId *string
    // Details of underlying infrastructure that hosts the container cluster. In case of creating container cluster first time, it is expected to pass the valid infrastructure. In case of update, if there is no change in cluster-type, then this field can be omitted in the request.
	Infrastructure *ContainerInfrastructureInfo
    // List of network errors related to container cluster.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerCluster#ContainerCluster_NETWORK_STATUS_HEALTHY
    // * ContainerCluster#ContainerCluster_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container cluster.
	NetworkStatus *string
    // Array of additional specific properties of container cluster in key-value format.
	OriginProperties []KeyValuePair
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerCluster__TYPE_IDENTIFIER = "ContainerCluster"
const ContainerCluster_CLUSTER_TYPE_PAS = "PAS"
const ContainerCluster_CLUSTER_TYPE_PKS = "PKS"
const ContainerCluster_CLUSTER_TYPE_KUBERNETES = "Kubernetes"
const ContainerCluster_CLUSTER_TYPE_OPENSHIFT = "Openshift"
const ContainerCluster_CLUSTER_TYPE_WCP = "WCP"
const ContainerCluster_CLUSTER_TYPE_WCP_GUEST = "WCP_Guest"
const ContainerCluster_CLUSTER_TYPE_OTHER = "Other"
const ContainerCluster_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerCluster_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"

// Details of container cluster node i.e. container host.
type ContainerClusterNode struct {
    // External identifier of the container cluster.
	ContainerClusterId *string
    // External identifier of the container cluster node in K8S/PAS.
	ExternalId *string
    // List of IP addresses of container cluster node. format: ip
	IpAddresses []string
    // List of network errors related to container cluster node.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerClusterNode#ContainerClusterNode_NETWORK_STATUS_HEALTHY
    // * ContainerClusterNode#ContainerClusterNode_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container cluster node.
	NetworkStatus *string
    // Array of additional specific properties of container cluster node in key-value format.
	OriginProperties []KeyValuePair
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerClusterNode__TYPE_IDENTIFIER = "ContainerClusterNode"
const ContainerClusterNode_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerClusterNode_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"

// Represents a container to group widgets that belong to a common category or have a common purpose.
type ContainerConfiguration struct {
	Header *Header
    // Labels for the container.
	Labels []Label
    // Layout of widgets can be either vertical or horizontal. If layout is not specified a default horizontal layout is applied.
	Layout *Layout
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // If not specified, creates an empty container.
	Widgets []WidgetItem
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerConfiguration__TYPE_IDENTIFIER = "ContainerConfiguration"

// Details of infrastructure hosting the container cluster e.g. vSphere, AWS, VMC etc..
type ContainerInfrastructureInfo struct {
    // Possible values are: 
    //
    // * ContainerInfrastructureInfo#ContainerInfrastructureInfo_INFRA_TYPE_VSPHERE
    // * ContainerInfrastructureInfo#ContainerInfrastructureInfo_INFRA_TYPE_AWS
    // * ContainerInfrastructureInfo#ContainerInfrastructureInfo_INFRA_TYPE_AZURE
    // * ContainerInfrastructureInfo#ContainerInfrastructureInfo_INFRA_TYPE_VMC
    // * ContainerInfrastructureInfo#ContainerInfrastructureInfo_INFRA_TYPE_KVM
    // * ContainerInfrastructureInfo#ContainerInfrastructureInfo_INFRA_TYPE_BAREMETAL
    //
    //  Type of the infrastructure.
	InfraType *string
}
const ContainerInfrastructureInfo_INFRA_TYPE_VSPHERE = "vSphere"
const ContainerInfrastructureInfo_INFRA_TYPE_AWS = "AWS"
const ContainerInfrastructureInfo_INFRA_TYPE_AZURE = "Azure"
const ContainerInfrastructureInfo_INFRA_TYPE_VMC = "VMC"
const ContainerInfrastructureInfo_INFRA_TYPE_KVM = "KVM"
const ContainerInfrastructureInfo_INFRA_TYPE_BAREMETAL = "Baremetal"

// Details of Container Ingress Policy.
type ContainerIngressPolicy struct {
    // List of identifiers of the container application , on which ingress policy is applied. e.g. IDs of all services on which the ingress is applied in kubernetes.
	ContainerApplicationIds []string
    // Identifier of the container cluster this ingress policy belongs to.
	ContainerClusterId *string
    // Identifier of the project which this container ingress belongs to.
	ContainerProjectId *string
    // Identifier of the container ingress policy.
	ExternalId *string
    // List of network errors related to container ingress.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerIngressPolicy#ContainerIngressPolicy_NETWORK_STATUS_HEALTHY
    // * ContainerIngressPolicy#ContainerIngressPolicy_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container ingress.
	NetworkStatus *string
    // Array of additional specific properties of container ingress in key-value format.
	OriginProperties []KeyValuePair
    // Container ingress policy specification.
	Spec *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerIngressPolicy__TYPE_IDENTIFIER = "ContainerIngressPolicy"
const ContainerIngressPolicy_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerIngressPolicy_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"

// Network policy applied to container.
type ContainerNetworkPolicy struct {
    // Identifier of the container cluster this network policy belongs to.
	ContainerClusterId *string
    // Identifier of the project which this network policy belongs to.
	ContainerProjectId *string
    // Identifier of the container network policy.
	ExternalId *string
    // List of network errors related to container network policy.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerNetworkPolicy#ContainerNetworkPolicy_NETWORK_STATUS_HEALTHY
    // * ContainerNetworkPolicy#ContainerNetworkPolicy_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container network policy.
	NetworkStatus *string
    // Array of additional specific properties of container network policy in key-value format.
	OriginProperties []KeyValuePair
    // Possible values are: 
    //
    // * ContainerNetworkPolicy#ContainerNetworkPolicy_POLICY_TYPE_NETWORK_POLICY
    // * ContainerNetworkPolicy#ContainerNetworkPolicy_POLICY_TYPE_ASG
    //
    //  Type e.g. Network Policy, ASG.
	PolicyType *string
    // Container network policy specification.
	Spec *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerNetworkPolicy__TYPE_IDENTIFIER = "ContainerNetworkPolicy"
const ContainerNetworkPolicy_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerNetworkPolicy_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"
const ContainerNetworkPolicy_POLICY_TYPE_NETWORK_POLICY = "NETWORK_POLICY"
const ContainerNetworkPolicy_POLICY_TYPE_ASG = "ASG"

// Details of org/namespace within a container cluster.
type ContainerProject struct {
    // Identifier of the container cluster to which this project/namespace belongs.
	ContainerClusterId *string
    // External identifier of the container project.
	ExternalId *string
    // List of network errors related to container project.
	NetworkErrors []NetworkError
    // Possible values are: 
    //
    // * ContainerProject#ContainerProject_NETWORK_STATUS_HEALTHY
    // * ContainerProject#ContainerProject_NETWORK_STATUS_UNHEALTHY
    //
    //  Network status of container project.
	NetworkStatus *string
    // Array of additional specific properties of container project in key-value format.
	OriginProperties []KeyValuePair
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ContainerProject__TYPE_IDENTIFIER = "ContainerProject"
const ContainerProject_NETWORK_STATUS_HEALTHY = "HEALTHY"
const ContainerProject_NETWORK_STATUS_UNHEALTHY = "UNHEALTHY"

// Event Criterion is the logical evaluations by which the event may be deemed fulfilled. All the evaluations must be met in order for the criterion to be met (implicit AND).
type Criterion struct {
    // Criterion Evaluations.
	Evaluations []*data.StructValue
}

// Base type for CSV result.
type CsvListResult struct {
    // File name set by HTTP server if API returns CSV result as a file.
	FileName *string
}

// Base type for CSV records.
type CsvRecord struct {
}

// Current backup operation status
type CurrentBackupOperationStatus struct {
    // Unique identifier of current backup
	BackupId *string
    // Possible values are: 
    //
    // * CurrentBackupOperationStatus#CurrentBackupOperationStatus_CURRENT_STEP_CLUSTER_BACKUP
    // * CurrentBackupOperationStatus#CurrentBackupOperationStatus_CURRENT_STEP_NODE_BACKUP
    //
    //  Current step of operation
	CurrentStep *string
    // Additional human-readable status information about current step
	CurrentStepMessage *string
    // Time when operation is expected to end format: int64
	EndTime *int64
    // Possible values are: 
    //
    // * CurrentBackupOperationStatus#CurrentBackupOperationStatus_OPERATION_TYPE_NONE
    // * CurrentBackupOperationStatus#CurrentBackupOperationStatus_OPERATION_TYPE_BACKUP
    //
    //  Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set.
	OperationType *string
    // Time when operation was started format: int64
	StartTime *int64
}
const CurrentBackupOperationStatus_CURRENT_STEP_CLUSTER_BACKUP = "BACKUP_CREATING_CLUSTER_BACKUP"
const CurrentBackupOperationStatus_CURRENT_STEP_NODE_BACKUP = "BACKUP_CREATING_NODE_BACKUP"
const CurrentBackupOperationStatus_OPERATION_TYPE_NONE = "NONE"
const CurrentBackupOperationStatus_OPERATION_TYPE_BACKUP = "BACKUP"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type CustomPolicyLbPersistenceProfile struct {
    // Possible values are: 
    //
    // * CustomPolicyLbPersistenceProfile#CustomPolicyLbPersistenceProfile_PERSISTENCE_COOKIE
    // * CustomPolicyLbPersistenceProfile#CustomPolicyLbPersistenceProfile_PERSISTENCE_SOURCE_IP
    //
    //  This field indicates the persistence method used for the PolicyLbVirtualServer. - COOKIE persistence allows related client connections, identified by the same cookie in HTTP requests [Refer to HTTP Cookie for details on HTTP cookies], to be redirected to the same server. Load balancer does not maintain any persistence table for cookie persistence. Instead, it encodes the necessary information in the HTTP cookie value sent to client and relies on the client to store it and send it back in subsequent related HTTP requests. Hence there is no limit on the number of cookie persistence entries that can be supported. - SOURCE_IP persistence ensures all connections from a client (identified by IP address) are sent to the same backend server for a specified period. - This object is not required and without creation of this object the virtual server persistence is disabled by default
	Persistence *string
    // Persistence shared setting indicates that all PolicyLbVirtualServers that consume this PolicyLbPersistenceProfile should share the same persistence mechanism when enabled. Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first. When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistenct type, the persistence table will be shared across virtual servers.
	PersistenceShared *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L4POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L7POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_CUSTOMPOLICYLBPERSISTENCEPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const CustomPolicyLbPersistenceProfile__TYPE_IDENTIFIER = "CustomPolicyLbPersistenceProfile"
const CustomPolicyLbPersistenceProfile_PERSISTENCE_COOKIE = "COOKIE"
const CustomPolicyLbPersistenceProfile_PERSISTENCE_SOURCE_IP = "SOURCE_IP"

// Virtual server acts as a facade to an application, receives all client connections over a specified protocol and distributes them among the backend servers. This custom type allows for more complex settings than the simplified PolicyLbVirtualServer types. This object allows for complex configurations for PolicyLbVirtualServers of all types. All HTTP specific inputs will be rejected when combined with TPC or UDP protocols.
type CustomPolicyLbVirtualServer struct {
    // Possible values are: 
    //
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_APP_PROTOCOL_TCP
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_APP_PROTOCOL_UDP
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_APP_PROTOCOL_HTTP
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_APP_PROTOCOL_HTTPS
    //
    //  As the custom type allows for more complex settings than the simplified PolicyLbVirtualServer types, also specify the desired protocol for receiving all client connections.
	AppProtocol *string
    // Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server. The setting is used when load balancer acts as an SSL server and terminating the client SSL connection
	ClientSslCertificateIds []string
    // Possible values are: 
    //
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_BASE_SECURE_111317
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_MODERATE_SECURE_111317
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_HIGH_SECURE_111317
    //
    //  Security settings representing various security settings when the VirtualServer acts as an SSL server - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317
	ClientSslSettings *string
    // The setting is used when load balancer acts as an SSL server and terminating the client SSL connection. A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension.
	DefaultClientSslCertificateId *string
    // To support client authentication (load balancer acting as a client authenticating to the backend server), server_ssl_certificate_id can be specified. When supplied, the backend server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified. This setting is only applicable for L7 protocols and will be rejected in combination with TCP or UDP.
	ServerAuthCaCertificateIds []string
    // Possible values are: 
    //
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_BASE_SECURE_111317
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_MODERATE_SECURE_111317
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_HIGH_SECURE_111317
    // * CustomPolicyLbVirtualServer#CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_DISABLED
    //
    //  Indicates whether to enable server side SSL. Server side SSL will be enabled when a specific security setting is selected. The selected security setting or profile represents various configurations related to SSL when the VirtualServer acts as a client connecting over SSL to the backend server. This setting is only applicable for L7 protocols and will be rejected in combination with TCP or UDP. - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317 - DISABLED
	ServerSslSettings *string
    // Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address.
	InsertClientIpHeader *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled *bool
    // Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath *string
	TrafficSource *string
}
const CustomPolicyLbVirtualServer_APP_PROTOCOL_TCP = "TCP"
const CustomPolicyLbVirtualServer_APP_PROTOCOL_UDP = "UDP"
const CustomPolicyLbVirtualServer_APP_PROTOCOL_HTTP = "HTTP"
const CustomPolicyLbVirtualServer_APP_PROTOCOL_HTTPS = "HTTPS"
const CustomPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_BASE_SECURE_111317 = "BASE_SECURE_111317"
const CustomPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_MODERATE_SECURE_111317 = "MODERATE_SECURE_111317"
const CustomPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_HIGH_SECURE_111317 = "HIGH_SECURE_111317"
const CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_BASE_SECURE_111317 = "BASE_SECURE_111317"
const CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_MODERATE_SECURE_111317 = "MODERATE_SECURE_111317"
const CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_HIGH_SECURE_111317 = "HIGH_SECURE_111317"
const CustomPolicyLbVirtualServer_SERVER_SSL_SETTINGS_DISABLED = "DISABLED"

// Represents configuration for custom widget. For this widget the data source is not applicable. It defines ui identifer to identify UI component and render it on dashboard view. This configuration can only be used for system owned widgets.
type CustomWidgetConfiguration struct {
    // User defined component selector to be rendered inside view/container.
	UiComponentIdentifier *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const CustomWidgetConfiguration__TYPE_IDENTIFIER = "CustomWidgetConfiguration"

// Credential info to connect to a CVX type of enforcement point.
type CvxConnectionInfo struct {
    // Password.
	Password *string
    // Thumbprint of EnforcementPoint in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint *string
    // Username.
	Username *string
    // Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress *string
    // Possible values are: 
    //
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXTCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXVCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_CVXCONNECTIONINFO
    //
    //  Resource Type of Enforcement Point Connection Info.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const CvxConnectionInfo__TYPE_IDENTIFIER = "CvxConnectionInfo"

// DNS forwarder statistics per enforcement point.
type DNSForwarderStatisticsPerEnforcementPoint struct {
    // Policy path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath *string
    // Possible values are: 
    //
    // * DNSForwarderStatisticsPerEnforcementPoint#DNSForwarderStatisticsPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSFORWARDERSTATISTICS
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DNSForwarderStatisticsPerEnforcementPoint__TYPE_IDENTIFIER = "DNSForwarderStatisticsPerEnforcementPoint"
const DNSForwarderStatisticsPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSFORWARDERSTATISTICS = "NsxTDNSForwarderStatistics"

// DNS forwarder status per enforcement point.
type DNSForwarderStatusPerEnforcementPoint struct {
    // Policy path referencing the enforcement point from where the status is fetched.
	EnforcementPointPath *string
    // Possible values are: 
    //
    // * DNSForwarderStatusPerEnforcementPoint#DNSForwarderStatusPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSFORWARDERSTATUS
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DNSForwarderStatusPerEnforcementPoint__TYPE_IDENTIFIER = "DNSForwarderStatusPerEnforcementPoint"
const DNSForwarderStatusPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSFORWARDERSTATUS = "NsxTDNSForwarderStatus"

type DataCounter struct {
    // The dropped packets or bytes format: int64
	Dropped *int64
    // The multicast and broadcast packets or bytes format: int64
	MulticastBroadcast *int64
    // The total packets or bytes format: int64
	Total *int64
}

// An instance of a datasource configuration.
type Datasource struct {
    // Name of a datasource instance.
	DisplayName *string
    // Array of urls relative to the datasource configuration. For example, api/v1/fabric/nodes is a relative url of nsx-manager instance.
	Urls []UrlAlias
}

// An instance of a datasource configuration.
type DefaultFilterValue struct {
    // Filter alias.
	Alias *string
    // Filter default value.
	Value *string
}

// Parameters that affect how delete operations are processed
type DeleteRequestParameters struct {
    // If true, deleting the resource succeeds even if it is being referred as a resource reference.
	Force *bool
}

// Logical grouping of enforcement points. This is a deprecated type. DeploymentZone has been renamed to Site. Use Site.
type DeploymentZone struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Logical grouping of enforcement points
	EnforcementPoints []EnforcementPoint
}

// DFW Firewall related configurations
type DfwFirewallConfiguration struct {
    // If set to true, identity firewall is enabled.
	IdfwEnabled *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * FirewallConfiguration#FirewallConfiguration_RESOURCE_TYPE_DFWFIREWALLCONFIGURATION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // To disable auto drafts, set it to true. By default, auto drafts are enabled.
	DisableAutoDrafts *bool
    // If set to true, Firewall is enabled.
	EnableFirewall *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DfwFirewallConfiguration__TYPE_IDENTIFIER = "DfwFirewallConfiguration"

type DhcpHeader struct {
    // Possible values are: 
    //
    // * DhcpHeader#DhcpHeader_OP_CODE_BOOTREQUEST
    // * DhcpHeader#DhcpHeader_OP_CODE_BOOTREPLY
    //
    //  This is used to specify the general type of message. A client sending request to a server uses an op code of BOOTREQUEST, while a server replying uses an op code of BOOTREPLY.
	OpCode *string
}
const DhcpHeader_OP_CODE_BOOTREQUEST = "BOOTREQUEST"
const DhcpHeader_OP_CODE_BOOTREPLY = "BOOTREPLY"

type DhcpIpPoolUsage struct {
    // allocated number. COULD BE INACCURATE, REFERENCE ONLY. format: int64
	AllocatedNumber *int64
    // allocated percentage. COULD BE INACCURATE, REFERENCE ONLY. format: int64
	AllocatedPercentage *int64
    // uuid of dhcp ip pool
	DhcpIpPoolId *string
    // pool size format: int64
	PoolSize *int64
}

type DhcpLeasePerIP struct {
    // expire time of the lease
	ExpireTime *string
    // ip address of client
	IpAddress *string
    // lease time of the ip address, in seconds
	LeaseTime *string
    // mac address of client
	MacAddress *string
    // start time of lease
	StartTime *string
    // subnet of client network
	Subnet *string
}

type DhcpLeases struct {
    // dhcp server uuid
	DhcpServerId *string
    // The lease info list of the server
	Leases []DhcpLeasePerIP
    // timestamp of the lease info format: int64
	Timestamp *int64
}

type DhcpLeasesResult struct {
    // dhcp server uuid
	DhcpServerId *string
    // The lease info list of the server
	Leases []DhcpLeasePerIP
    // timestamp of the lease info format: int64
	Timestamp *int64
    // Policy path to Segment, Tier0 or Tier1 gateway where DHCP server is attached.
	ConnectivityPath *string
}

// DHCP option 121 to define classless static route.
type DhcpOption121 struct {
    // Classless static route of DHCP option 121.
	StaticRoutes []ClasslessStaticRoute
}

// DHCP relay configuration. Please note, the realized-state of this entity returned by the \"GET /policy/api/v1/infra/realized-state/realized-entity\" with this entity policy-path is irrelevant with the application status of this entity. Please do not rely on this returned realized-state to determine how this dhcp-relay-config was applied. The dhcp realization information was reflected in the realization states of the referencing Segment or T0/T1 gateway.
type DhcpRelayConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // DHCP server IP addresses for DHCP relay configuration. Both IPv4 and IPv6 addresses are supported. format: ip
	ServerAddresses []string
}

// Paged collection of DhcpRelayConfigs
type DhcpRelayConfigListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // DhcpRelayConfig results
	Results []DhcpRelayConfig
}

// DHCP server configuration. Please note, the realized-state of this entity returned by the \"GET /policy/api/v1/infra/realized-state/realized-entity\" with this entity policy-path is irrelevant with the application status of this entity. Please do not rely on this returned realized-state to determine how this dhcp-server-config was applied. The dhcp realization information was reflected in the realization states of the referencing Segment or T0/T1 gateway.
type DhcpServerConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Edge cluster path. Auto assigned if only one edge cluster is configured on enforcement-point. Modifying edge cluster will reallocate DHCP server to the new edge cluster. Please note that re-allocating edge-cluster will result in losing of all exisitng DHCP lease information. Change edge cluster only when losing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses.
	EdgeClusterPath *string
    // IP address lease time in seconds. format: int64
	LeaseTime *int64
    // Policy paths to edge nodes on which the DHCP servers run. The first edge node is assigned as active edge, and second one as stanby edge. If only one edge node is specified, the DHCP servers will run without HA support. When this property is not specified, edge nodes are auto-assigned during realization of the DHCP server.
	PreferredEdgePaths []string
    // DHCP server address in CIDR format. Prefix length should be less than or equal to 30. DHCP server is deployed as DHCP relay service. This property is deprecated, use server_addresses instead. Both properties cannot be specified together with different new values. format: ip-cidr-block
	ServerAddress *string
    // DHCP server address in CIDR format. Both IPv4 and IPv6 address families are supported. Prefix length should be less than or equal to 30 for IPv4 address family and less than or equal to 126 for IPv6. When not specified, IPv4 value is auto-assigned to 100.96.0.1/30. Ignored when this object is configured at a Segment. format: ip-cidr-block
	ServerAddresses []string
}

// Paged collection of DhcpServerConfigs
type DhcpServerConfigListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // DhcpServerConfig results
	Results []DhcpServerConfig
}

type DhcpServerState struct {
    // Array of configuration state of various sub systems
	Details []ConfigurationStateElement
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * DhcpServerState#DhcpServerState_STATE_PENDING
    // * DhcpServerState#DhcpServerState_STATE_IN_PROGRESS
    // * DhcpServerState#DhcpServerState_STATE_SUCCESS
    // * DhcpServerState#DhcpServerState_STATE_FAILED
    // * DhcpServerState#DhcpServerState_STATE_PARTIAL_SUCCESS
    // * DhcpServerState#DhcpServerState_STATE_ORPHANED
    // * DhcpServerState#DhcpServerState_STATE_UNKNOWN
    // * DhcpServerState#DhcpServerState_STATE_ERROR
    // * DhcpServerState#DhcpServerState_STATE_IN_SYNC
    // * DhcpServerState#DhcpServerState_STATE_NOT_AVAILABLE
    // * DhcpServerState#DhcpServerState_STATE_VM_DEPLOYMENT_QUEUED
    // * DhcpServerState#DhcpServerState_STATE_VM_DEPLOYMENT_IN_PROGRESS
    // * DhcpServerState#DhcpServerState_STATE_VM_DEPLOYMENT_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_POWER_ON_IN_PROGRESS
    // * DhcpServerState#DhcpServerState_STATE_VM_POWER_ON_FAILED
    // * DhcpServerState#DhcpServerState_STATE_REGISTRATION_PENDING
    // * DhcpServerState#DhcpServerState_STATE_NODE_NOT_READY
    // * DhcpServerState#DhcpServerState_STATE_NODE_READY
    // * DhcpServerState#DhcpServerState_STATE_VM_POWER_OFF_IN_PROGRESS
    // * DhcpServerState#DhcpServerState_STATE_VM_POWER_OFF_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_UNDEPLOY_IN_PROGRESS
    // * DhcpServerState#DhcpServerState_STATE_VM_UNDEPLOY_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_UNDEPLOY_SUCCESSFUL
    // * DhcpServerState#DhcpServerState_STATE_EDGE_CONFIG_ERROR
    // * DhcpServerState#DhcpServerState_STATE_VM_DEPLOYMENT_RESTARTED
    // * DhcpServerState#DhcpServerState_STATE_REGISTRATION_FAILED
    // * DhcpServerState#DhcpServerState_STATE_TRANSPORT_NODE_SYNC_PENDING
    // * DhcpServerState#DhcpServerState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * DhcpServerState#DhcpServerState_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * DhcpServerState#DhcpServerState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * DhcpServerState#DhcpServerState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * DhcpServerState#DhcpServerState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * DhcpServerState#DhcpServerState_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * DhcpServerState#DhcpServerState_STATE_APPLIANCE_INTERNAL_ERROR
    // * DhcpServerState#DhcpServerState_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * DhcpServerState#DhcpServerState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * DhcpServerState#DhcpServerState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * DhcpServerState#DhcpServerState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * DhcpServerState#DhcpServerState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * DhcpServerState#DhcpServerState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * DhcpServerState#DhcpServerState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * DhcpServerState#DhcpServerState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * DhcpServerState#DhcpServerState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * DhcpServerState#DhcpServerState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * DhcpServerState#DhcpServerState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * DhcpServerState#DhcpServerState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * DhcpServerState#DhcpServerState_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * DhcpServerState#DhcpServerState_STATE_INVALID_PNIC_DEVICE_NAME
    // * DhcpServerState#DhcpServerState_STATE_TRANSPORT_NODE_READY
    // * DhcpServerState#DhcpServerState_STATE_VM_NETWORK_EDIT_PENDING
    // * DhcpServerState#DhcpServerState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * DhcpServerState#DhcpServerState_STATE_MPA_DISCONNECTED
    // * DhcpServerState#DhcpServerState_STATE_VM_RENAME_PENDING
    // * DhcpServerState#DhcpServerState_STATE_VM_CONFIG_EDIT_PENDING
    // * DhcpServerState#DhcpServerState_STATE_VM_NETWORK_EDIT_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_RENAME_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_CONFIG_EDIT_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_CONFIG_DISCREPANCY
    // * DhcpServerState#DhcpServerState_STATE_VM_NODE_REFRESH_FAILED
    // * DhcpServerState#DhcpServerState_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * DhcpServerState#DhcpServerState_STATE_REGISTRATION_TIMEDOUT
    //
    //  Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State *string
}
const DhcpServerState_STATE_PENDING = "pending"
const DhcpServerState_STATE_IN_PROGRESS = "in_progress"
const DhcpServerState_STATE_SUCCESS = "success"
const DhcpServerState_STATE_FAILED = "failed"
const DhcpServerState_STATE_PARTIAL_SUCCESS = "partial_success"
const DhcpServerState_STATE_ORPHANED = "orphaned"
const DhcpServerState_STATE_UNKNOWN = "unknown"
const DhcpServerState_STATE_ERROR = "error"
const DhcpServerState_STATE_IN_SYNC = "in_sync"
const DhcpServerState_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const DhcpServerState_STATE_VM_DEPLOYMENT_QUEUED = "VM_DEPLOYMENT_QUEUED"
const DhcpServerState_STATE_VM_DEPLOYMENT_IN_PROGRESS = "VM_DEPLOYMENT_IN_PROGRESS"
const DhcpServerState_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const DhcpServerState_STATE_VM_POWER_ON_IN_PROGRESS = "VM_POWER_ON_IN_PROGRESS"
const DhcpServerState_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const DhcpServerState_STATE_REGISTRATION_PENDING = "REGISTRATION_PENDING"
const DhcpServerState_STATE_NODE_NOT_READY = "NODE_NOT_READY"
const DhcpServerState_STATE_NODE_READY = "NODE_READY"
const DhcpServerState_STATE_VM_POWER_OFF_IN_PROGRESS = "VM_POWER_OFF_IN_PROGRESS"
const DhcpServerState_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const DhcpServerState_STATE_VM_UNDEPLOY_IN_PROGRESS = "VM_UNDEPLOY_IN_PROGRESS"
const DhcpServerState_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const DhcpServerState_STATE_VM_UNDEPLOY_SUCCESSFUL = "VM_UNDEPLOY_SUCCESSFUL"
const DhcpServerState_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const DhcpServerState_STATE_VM_DEPLOYMENT_RESTARTED = "VM_DEPLOYMENT_RESTARTED"
const DhcpServerState_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const DhcpServerState_STATE_TRANSPORT_NODE_SYNC_PENDING = "TRANSPORT_NODE_SYNC_PENDING"
const DhcpServerState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const DhcpServerState_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const DhcpServerState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const DhcpServerState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const DhcpServerState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const DhcpServerState_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const DhcpServerState_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const DhcpServerState_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const DhcpServerState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const DhcpServerState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const DhcpServerState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const DhcpServerState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const DhcpServerState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const DhcpServerState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const DhcpServerState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const DhcpServerState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const DhcpServerState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const DhcpServerState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const DhcpServerState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const DhcpServerState_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const DhcpServerState_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const DhcpServerState_STATE_TRANSPORT_NODE_READY = "TRANSPORT_NODE_READY"
const DhcpServerState_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const DhcpServerState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const DhcpServerState_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const DhcpServerState_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const DhcpServerState_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const DhcpServerState_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const DhcpServerState_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const DhcpServerState_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const DhcpServerState_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const DhcpServerState_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const DhcpServerState_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const DhcpServerState_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"

type DhcpServerStatistics struct {
    // The total number of DHCP ACK packets format: int64
	Acks *int64
    // The total number of DHCP DECLINE packets format: int64
	Declines *int64
    // dhcp server uuid
	DhcpServerId *string
    // The total number of DHCP DISCOVER packets format: int64
	Discovers *int64
    // The total number of DHCP errors format: int64
	Errors *int64
    // The total number of DHCP INFORM packets format: int64
	Informs *int64
    // The DHCP ip pool usage statistics
	IpPoolStats []DhcpIpPoolUsage
    // The total number of DHCP NACK packets format: int64
	Nacks *int64
    // The total number of DHCP OFFER packets format: int64
	Offers *int64
    // The total number of DHCP RELEASE packets format: int64
	Releases *int64
    // The total number of DHCP REQUEST packets format: int64
	Requests *int64
    // timestamp of the statistics format: int64
	Timestamp *int64
}

type DhcpServerStatus struct {
    // uuid of active transport node
	ActiveNode *string
    // Error message, if available
	ErrorMessage *string
    // Possible values are: 
    //
    // * DhcpServerStatus#DhcpServerStatus_SERVICE_STATUS_UP
    // * DhcpServerStatus#DhcpServerStatus_SERVICE_STATUS_DOWN
    // * DhcpServerStatus#DhcpServerStatus_SERVICE_STATUS_ERROR
    // * DhcpServerStatus#DhcpServerStatus_SERVICE_STATUS_NO_STANDBY
    //
    //  UP means the dhcp service is working fine on both active transport-node and stand-by transport-node (if have), hence fail-over can work at this time if there is failure happens on one of the transport-node; DOWN means the dhcp service is down on both active transport-node and stand-by node (if have), hence the dhcp-service will not repsonse any dhcp request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The dhcp service may be working (or not working); NO_STANDBY means dhcp service is working in one of the transport node while not in the other transport-node (if have). Hence if the dhcp service in the working transport-node is down, fail-over will not happen and the dhcp service will go down.
	ServiceStatus *string
    // uuid of stand_by transport node. null if non-HA mode
	StandByNode *string
}
const DhcpServerStatus_SERVICE_STATUS_UP = "UP"
const DhcpServerStatus_SERVICE_STATUS_DOWN = "DOWN"
const DhcpServerStatus_SERVICE_STATUS_ERROR = "ERROR"
const DhcpServerStatus_SERVICE_STATUS_NO_STANDBY = "NO_STANDBY"

// DHCP IPv4 and IPv6 static bindings are extended from this abstract class.
type DhcpStaticBindingConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * DhcpStaticBindingConfig#DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV4STATICBINDINGCONFIG
    // * DhcpStaticBindingConfig#DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV6STATICBINDINGCONFIG
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DhcpStaticBindingConfig__TYPE_IDENTIFIER = "DhcpStaticBindingConfig"
const DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV4STATICBINDINGCONFIG = "DhcpV4StaticBindingConfig"
const DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV6STATICBINDINGCONFIG = "DhcpV6StaticBindingConfig"

type DhcpStaticBindingConfigListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paginated list of DhcpStaticBindingConfig
	Results []*data.StructValue
}

type DhcpStaticBindingState struct {
    // Array of configuration state of various sub systems
	Details []ConfigurationStateElement
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_PENDING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_IN_PROGRESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_SUCCESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_PARTIAL_SUCCESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_ORPHANED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_UNKNOWN
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_ERROR
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_IN_SYNC
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_NOT_AVAILABLE
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_DEPLOYMENT_QUEUED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_DEPLOYMENT_IN_PROGRESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_DEPLOYMENT_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_POWER_ON_IN_PROGRESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_POWER_ON_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_REGISTRATION_PENDING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_NODE_NOT_READY
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_NODE_READY
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_POWER_OFF_IN_PROGRESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_POWER_OFF_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_UNDEPLOY_IN_PROGRESS
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_UNDEPLOY_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_UNDEPLOY_SUCCESSFUL
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_EDGE_CONFIG_ERROR
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_DEPLOYMENT_RESTARTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_REGISTRATION_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_TRANSPORT_NODE_SYNC_PENDING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_APPLIANCE_INTERNAL_ERROR
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_INVALID_PNIC_DEVICE_NAME
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_TRANSPORT_NODE_READY
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_NETWORK_EDIT_PENDING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_MPA_DISCONNECTED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_RENAME_PENDING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_CONFIG_EDIT_PENDING
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_NETWORK_EDIT_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_RENAME_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_CONFIG_EDIT_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_CONFIG_DISCREPANCY
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_NODE_REFRESH_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * DhcpStaticBindingState#DhcpStaticBindingState_STATE_REGISTRATION_TIMEDOUT
    //
    //  Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State *string
}
const DhcpStaticBindingState_STATE_PENDING = "pending"
const DhcpStaticBindingState_STATE_IN_PROGRESS = "in_progress"
const DhcpStaticBindingState_STATE_SUCCESS = "success"
const DhcpStaticBindingState_STATE_FAILED = "failed"
const DhcpStaticBindingState_STATE_PARTIAL_SUCCESS = "partial_success"
const DhcpStaticBindingState_STATE_ORPHANED = "orphaned"
const DhcpStaticBindingState_STATE_UNKNOWN = "unknown"
const DhcpStaticBindingState_STATE_ERROR = "error"
const DhcpStaticBindingState_STATE_IN_SYNC = "in_sync"
const DhcpStaticBindingState_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const DhcpStaticBindingState_STATE_VM_DEPLOYMENT_QUEUED = "VM_DEPLOYMENT_QUEUED"
const DhcpStaticBindingState_STATE_VM_DEPLOYMENT_IN_PROGRESS = "VM_DEPLOYMENT_IN_PROGRESS"
const DhcpStaticBindingState_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const DhcpStaticBindingState_STATE_VM_POWER_ON_IN_PROGRESS = "VM_POWER_ON_IN_PROGRESS"
const DhcpStaticBindingState_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const DhcpStaticBindingState_STATE_REGISTRATION_PENDING = "REGISTRATION_PENDING"
const DhcpStaticBindingState_STATE_NODE_NOT_READY = "NODE_NOT_READY"
const DhcpStaticBindingState_STATE_NODE_READY = "NODE_READY"
const DhcpStaticBindingState_STATE_VM_POWER_OFF_IN_PROGRESS = "VM_POWER_OFF_IN_PROGRESS"
const DhcpStaticBindingState_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const DhcpStaticBindingState_STATE_VM_UNDEPLOY_IN_PROGRESS = "VM_UNDEPLOY_IN_PROGRESS"
const DhcpStaticBindingState_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const DhcpStaticBindingState_STATE_VM_UNDEPLOY_SUCCESSFUL = "VM_UNDEPLOY_SUCCESSFUL"
const DhcpStaticBindingState_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const DhcpStaticBindingState_STATE_VM_DEPLOYMENT_RESTARTED = "VM_DEPLOYMENT_RESTARTED"
const DhcpStaticBindingState_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const DhcpStaticBindingState_STATE_TRANSPORT_NODE_SYNC_PENDING = "TRANSPORT_NODE_SYNC_PENDING"
const DhcpStaticBindingState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const DhcpStaticBindingState_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const DhcpStaticBindingState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const DhcpStaticBindingState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const DhcpStaticBindingState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const DhcpStaticBindingState_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const DhcpStaticBindingState_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const DhcpStaticBindingState_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const DhcpStaticBindingState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const DhcpStaticBindingState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const DhcpStaticBindingState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const DhcpStaticBindingState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const DhcpStaticBindingState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const DhcpStaticBindingState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const DhcpStaticBindingState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const DhcpStaticBindingState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const DhcpStaticBindingState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const DhcpStaticBindingState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const DhcpStaticBindingState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const DhcpStaticBindingState_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const DhcpStaticBindingState_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const DhcpStaticBindingState_STATE_TRANSPORT_NODE_READY = "TRANSPORT_NODE_READY"
const DhcpStaticBindingState_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const DhcpStaticBindingState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const DhcpStaticBindingState_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const DhcpStaticBindingState_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const DhcpStaticBindingState_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const DhcpStaticBindingState_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const DhcpStaticBindingState_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const DhcpStaticBindingState_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const DhcpStaticBindingState_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const DhcpStaticBindingState_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const DhcpStaticBindingState_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const DhcpStaticBindingState_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"

type DhcpStatistics struct {
    // The total number of DHCP ACK packets format: int64
	Acks *int64
    // The total number of DHCP DECLINE packets format: int64
	Declines *int64
    // dhcp server uuid
	DhcpServerId *string
    // The total number of DHCP DISCOVER packets format: int64
	Discovers *int64
    // The total number of DHCP errors format: int64
	Errors *int64
    // The total number of DHCP INFORM packets format: int64
	Informs *int64
    // The DHCP ip pool usage statistics
	IpPoolStats []DhcpIpPoolUsage
    // The total number of DHCP NACK packets format: int64
	Nacks *int64
    // The total number of DHCP OFFER packets format: int64
	Offers *int64
    // The total number of DHCP RELEASE packets format: int64
	Releases *int64
    // The total number of DHCP REQUEST packets format: int64
	Requests *int64
    // timestamp of the statistics format: int64
	Timestamp *int64
}

// DHCP options for IPv4 server.
type DhcpV4Options struct {
    // DHCP option 121 to define classless static routes.
	Option121 *DhcpOption121
    // To define DHCP options other than option 121 in generic format. Please note, only the following options can be defined in generic format. Those other options will be accepted without validation but will not take effect. -------------------------- Code Name -------------------------- 2 Time Offset 6 Domain Name Server 13 Boot File Size 19 Forward On/Off 26 MTU Interface 28 Broadcast Address 35 ARP Timeout 40 NIS Domain 41 NIS Servers 42 NTP Servers 44 NETBIOS Name Srv 45 NETBIOS Dist Srv 46 NETBIOS Node Type 47 NETBIOS Scope 58 Renewal Time 59 Rebinding Time 64 NIS+-Domain-Name 65 NIS+-Server-Addr 66 TFTP Server-Name (used by PXE) 67 Bootfile-Name (used by PXE) 93 PXE: Client system architecture 94 PXE: Client NDI 97 PXE: UUID/UNDI 117 Name Service Search 119 Domain Search 150 TFTP server address (used by PXE) 175 Etherboot 209 PXE Configuration File 210 PXE Path Prefix 211 PXE Reboot Time
	Others []GenericDhcpOption
}

// DHCP IPv4 static bindings are configured for each segment.
type DhcpV4StaticBindingConfig struct {
    // When not specified, gateway address is auto-assigned from segment configuration. format: ipv4
	GatewayAddress *string
    // Hostname to assign to the host.
	HostName *string
    // IP assigned to host. The IP address must belong to the subnet, if any, configured on Segment. format: ipv4
	IpAddress *string
    // DHCP lease time in seconds. format: int64
	LeaseTime *int64
    // MAC address of the host. format: mac-address
	MacAddress *string
    // IPv4 DHCP options.
	Options *DhcpV4Options
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * DhcpStaticBindingConfig#DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV4STATICBINDINGCONFIG
    // * DhcpStaticBindingConfig#DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV6STATICBINDINGCONFIG
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DhcpV4StaticBindingConfig__TYPE_IDENTIFIER = "DhcpV4StaticBindingConfig"

// DHCP options for IPv6 server.
type DhcpV6Options struct {
}

// DHCP IPv6 static bindings are configured for each segment.
type DhcpV6StaticBindingConfig struct {
    // When not specified, no DNS nameserver will be set to client host.
	DnsNameservers []string
    // When not specified, no domain name will be assigned to client host.
	DomainNames []string
    // When not specified, no ip address will be assigned to client host. format: ipv6
	IpAddresses []string
    // Lease time, in seconds. format: int64
	LeaseTime *int64
    // The MAC address of the client host. Either client-duid or mac-address, but not both. format: mac-address
	MacAddress *string
    // Preferred time, in seconds. If this value is not provided, the value of lease_time\*0.8 will be used. format: int64
	PreferredTime *int64
    // SNTP server IP addresses. format: ipv6
	SntpServers []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * DhcpStaticBindingConfig#DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV4STATICBINDINGCONFIG
    // * DhcpStaticBindingConfig#DhcpStaticBindingConfig_RESOURCE_TYPE_DHCPV6STATICBINDINGCONFIG
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DhcpV6StaticBindingConfig__TYPE_IDENTIFIER = "DhcpV6StaticBindingConfig"

type Dhcpv6Header struct {
    // Possible values are: 
    //
    // * Dhcpv6Header#Dhcpv6Header_MSG_TYPE_SOLICIT
    // * Dhcpv6Header#Dhcpv6Header_MSG_TYPE_ADVERTISE
    // * Dhcpv6Header#Dhcpv6Header_MSG_TYPE_REQUEST
    // * Dhcpv6Header#Dhcpv6Header_MSG_TYPE_REPLY
    //
    //  This is used to specify the DHCP v6 message. To request the assignment of one or more IPv6 addresses, a client first locates a DHCP server and then requests the assignment of addresses and other configuration information from the server. The client sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers address to find available DHCP servers. Any server that can meet the client's requirements responds with an Advertise message. The client then chooses one of the servers and sends a Request message to the server asking for confirmed assignment of addresses and other configuration information. The server responds with a Reply message that contains the confirmed addresses and configuration. SOLICIT - A client sends a Solicit message to locate servers. ADVERTISE - A server sends and Advertise message to indicate that it is available. REQUEST - A client sends a Request message to request configuration parameters. REPLY - A server sends a Reply message containing assigned addresses and configuration parameters.
	MsgType *string
}
const Dhcpv6Header_MSG_TYPE_SOLICIT = "SOLICIT"
const Dhcpv6Header_MSG_TYPE_ADVERTISE = "ADVERTISE"
const Dhcpv6Header_MSG_TYPE_REQUEST = "REQUEST"
const Dhcpv6Header_MSG_TYPE_REPLY = "REPLY"

type DiscoveredNode struct {
    // Certificate of the discovered node
	Certificate *string
    // Local Id of the discovered node in the Compute Manager
	CmLocalId *string
    // External id of the discovered node, ex. a mo-ref from VC
	ExternalId *string
    // Hardware Id is generated using system hardware info. It is used to retrieve fabric node of the esx.
	HardwareId *string
    // IP Addresses of the the discovered node. format: ip
	IpAddresses []string
    // Discovered Node type like Host
	NodeType *string
    // Id of the compute manager from where this node was discovered
	OriginId *string
    // Key-Value map of additional specific properties of discovered node in the Compute Manager
	OriginProperties []KeyValuePair
    // OS type of the discovered node
	OsType *string
    // OS version of the discovered node
	OsVersion *string
    // External id of the compute collection to which this node belongs
	ParentComputeCollection *string
    // The stateless property describes whether host persists its state across reboot or not. If state persists, value is set as false otherwise true.
	Stateless *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DiscoveredNode__TYPE_IDENTIFIER = "DiscoveredNode"

// Base class for resources that are discovered and automatically updated
type DiscoveredResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DiscoveredResource__TYPE_IDENTIFIER = "DiscoveredResource"

// Base Discovery Profile Binding Map
type DiscoveryProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

type DistributedFloodProtectionProfile struct {
    // If set to true, rst spoofing will be enabled. Flag is used only for distributed firewall profiles.
	EnableRstSpoofing *bool
    // If set to true, sync cache will be enabled. Flag is used only for distributed firewall profiles.
	EnableSyncache *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * FloodProtectionProfile#FloodProtectionProfile_RESOURCE_TYPE_GATEWAYFLOODPROTECTIONPROFILE
    // * FloodProtectionProfile#FloodProtectionProfile_RESOURCE_TYPE_DISTRIBUTEDFLOODPROTECTIONPROFILE
    //
    //  GatewayFloodProtectionProfile is used for all Tier0 and Tier1 gateways. DistributedFloodProtectionProfile is used for all Transport Nodes.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If this field is empty, firewall will not set a limit to active ICMP connections. format: int64
	IcmpActiveFlowLimit *int64
    // If this field is empty, firewall will not set a limit to other active connections. besides UDP, ICMP and half open TCP connections. format: int64
	OtherActiveConnLimit *int64
    // If this field is empty, firewall will not set a limit to half open TCP connections. format: int64
	TcpHalfOpenConnLimit *int64
    // If this field is empty, firewall will not set a limit to active UDP connections. format: int64
	UdpActiveFlowLimit *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DistributedFloodProtectionProfile__TYPE_IDENTIFIER = "DistributedFloodProtectionProfile"

// Distributed virtual portgroup on a VC
type DistributedVirtualPortgroup struct {
    // For distributed virtual portgroup, backing type is standard. For logical switch portgroup, the backing type is set to nsx.
	BackingType *string
    // Generated UUID of the portgroup
	Key *string
    // Possible values are: 
    //
    // * DistributedVirtualPortgroup#DistributedVirtualPortgroup_OVERALL_STATUS_RED
    // * DistributedVirtualPortgroup#DistributedVirtualPortgroup_OVERALL_STATUS_YELLOW
    // * DistributedVirtualPortgroup#DistributedVirtualPortgroup_OVERALL_STATUS_GREEN
    // * DistributedVirtualPortgroup#DistributedVirtualPortgroup_OVERALL_STATUS_GRAY
    //
    //  This parameters reflects the managed entity status of the portgroup as reported by VC.
	OverallStatus *string
    // Id of the portgroup, eg. a mo-ref from VC.
	CmLocalId *string
    // External id of the virtual portgroup
	ExternalId *string
    // Portgroup type like DistributedVirtualPortgroup
	OriginType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
const DistributedVirtualPortgroup_OVERALL_STATUS_RED = "RED"
const DistributedVirtualPortgroup_OVERALL_STATUS_YELLOW = "YELLOW"
const DistributedVirtualPortgroup_OVERALL_STATUS_GREEN = "GREEN"
const DistributedVirtualPortgroup_OVERALL_STATUS_GRAY = "GRAY"

// DistributedVirtualSwitch on a VC
type DistributedVirtualSwitch struct {
    // Array of discovered nodes connected to this switch.
	DiscoveredNodes []DiscoveredNode
    // It contains information about VMware specific multiple dynamic LACP groups.
	LacpGroupConfigs []LacpGroupConfigInfo
    // Key-Value map of additional properties of switch
	OriginProperties []KeyValuePair
    // The uniform name of uplink ports on each host.
	UplinkPortNames []string
    // Uplink portgroup of distributed virtual switch
	UplinkPortgroup *DistributedVirtualPortgroup
    // UUID of the switch
	Uuid *string
    // ID of the virtual switch in compute manager
	CmLocalId *string
    // External id of the virtual switch
	ExternalId *string
    // ID of the compute manager where this virtual switch is discovered.
	OriginId *string
    // Switch type like VmwareDistributedVirtualSwitch
	OriginType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}

type DnsHeader struct {
    // This is used to define what is being asked or responded. format: hostname-or-ip
	Address *string
    // Possible values are: 
    //
    // * DnsHeader#DnsHeader_ADDRESS_TYPE_V4
    // * DnsHeader#DnsHeader_ADDRESS_TYPE_V6
    //
    //  This is used to specify the type of the address. V4 - The address provided is an IPv4 domain name/IP address, the Type in query or response will be A V6 - The address provided is an IPv6 domain name/IP address, the Type in query or response will be AAAA
	AddressType *string
    // Possible values are: 
    //
    // * DnsHeader#DnsHeader_MESSAGE_TYPE_QUERY
    // * DnsHeader#DnsHeader_MESSAGE_TYPE_RESPONSE
    //
    //  Specifies the message type whether it is a query or a response.
	MessageType *string
}
const DnsHeader_ADDRESS_TYPE_V4 = "V4"
const DnsHeader_ADDRESS_TYPE_V6 = "V6"
const DnsHeader_MESSAGE_TYPE_QUERY = "QUERY"
const DnsHeader_MESSAGE_TYPE_RESPONSE = "RESPONSE"

// Used to configure DNS security profile
type DnsSecurityProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Time to live for DNS cache entry in seconds. Valid TTL values are between 3600 to 864000. However, this field accepts values between 0 through 864000. We define TTL type based on the value of TTL as follows: TTL 0 - cached entry never expires. TTL 1 to 3599 - invalid input and error is thrown TTL 3600 to 864000 - ttl is set to user input TTL field not set by user - TTL type is 'AUTO' and ttl value is set from DNS response packet. User defined TTL value is used only when it is betweeen 3600 to 864000. format: int64
	Ttl *int64
}

// This entity will be used to establish association between DNS security profile and Group. With this entity, user can specify intent for applying DNS security profile profile to particular Group.
type DnsSecurityProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
    // Sequence number used to resolve conflicts betweeen two profiles applied on the same group. Lower sequence number takes higher precedence. Two binding maps applied to the same profile must have the same sequence number. User defined sequence numbers range from 1 through 100,000. System defined sequence numbers range from 100,001 through 200,000. format: int64
	SequenceNumber *int64
}

// Paged collection of DNS Security Profile Binding Map
type DnsSecurityProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // DNS Security Profile Binding Map List Results
	Results []DnsSecurityProfileBindingMap
}

// Paged Collection of DnsSecurityProfile
type DnsSecurityProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // DnsSecurityProfile list results
	Results []DnsSecurityProfile
}

// Domain.
type Domain struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// Binding of domain to the enforcement point.
type DomainDeploymentMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Path of enforcement point on which domain shall be enforced.
	EnforcementPointPath *string
}

// Paged collection of Domain Deployment Map.
type DomainDeploymentMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Domain Deployment Map list result.
	Results []DomainDeploymentMap
}

// Paged Collection of Domains
type DomainListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Domain list results
	Results []Domain
}

// Represents configuration of a Donut
type DonutConfiguration struct {
    // Expression to retrieve count to be shown on Donut.
	Count *string
    // If true, displays the count of entities in the donut
	DisplayCount *bool
    // Displayed at the middle of the donut, by default. It labels the entities of donut.
	Label *Label
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // Sections
	Sections []DonutSection
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const DonutConfiguration__TYPE_IDENTIFIER = "DonutConfiguration"

// Represents an entity or portion to be plotted on a donut or stats chart.
type DonutPart struct {
    // If the condition is met then the part will be displayed. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition *string
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // A numerical value that represents the portion or entity of the donut or stats chart.
	Field *string
    // If true, legend will be shown only if the data for the part is available. This is applicable only if legends are specified in widget configuration.
	HideEmptyLegend *bool
    // If a section 'template' holds this donut or stats part, then the label is auto-generated from the fetched field values after applying the template.
	Label *Label
    // Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.
	Navigation *string
    // Additional rendering or conditional evaluation of the field values to be performed, if any.
	RenderConfiguration []RenderConfiguration
    // Multi-line text to be shown on tooltip while hovering over the portion.
	Tooltip []Tooltip
}

// Represents high level logical grouping of portions or segments of a donut / stats chart.
type DonutSection struct {
    // Array of portions or parts of the donut or stats chart.
	Parts []DonutPart
    // Field of the root of the api result set for forming parts.
	RowListField *string
    // If true, the section will be appled as template for forming parts. Only one part will be formed from each element of 'row_list_field'.
	Template *bool
}

// Represents configuration for dropdown filter widget.
type DropdownFilterWidgetConfiguration struct {
    // Expression to specify default value of filter.
	DefaultValue *string
    // Defines the item of a dropdown.
	DropdownItem *DropdownItem
    // Placeholder message to be displayed in dropdown filter.
	PlaceholderMsg *string
    // If the condition is met then the static filter will be added. If no condition is provided, then the static filters will be applied unconditionally.
	StaticFilterCondition *string
    // Additional static items to be added in dropdown filter. Example can be 'ALL'.
	StaticFilters []StaticFilter
    // Alias to be used when emitting filter value.
	Alias *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}

// Dropdown item definition
type DropdownItem struct {
    // expression to extract display name to be shown in the drop down.
	DisplayName *string
    // An expression that represents the items of the dropdown filter.
	Field *string
    // Value of filter inside dropdown filter.
	Value *string
}

// Contains dupliacte IP detection related discovery options.
type DuplicateIPDetectionOptions struct {
    // Indicates whether duplicate IP detection should be enabled
	DuplicateIpDetectionEnabled *bool
}

// Indicate the status of End User License Agreement acceptance
type EULAAcceptance struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Acceptance status of End User License Agreement
	Acceptance *bool
}

// End User License Agreement content
type EULAContent struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Content of End User License Agreement
	Content *string
}

// This contains fields that captures state of Trackable entities. Edge and VPN state entities extend this object.
type EdgeConfigurationState struct {
    // Array of configuration state of various sub systems
	Details []ConfigurationStateElement
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_PENDING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_IN_PROGRESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_SUCCESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_PARTIAL_SUCCESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_ORPHANED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_UNKNOWN
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_ERROR
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_IN_SYNC
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_NOT_AVAILABLE
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_DEPLOYMENT_QUEUED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_DEPLOYMENT_IN_PROGRESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_DEPLOYMENT_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_POWER_ON_IN_PROGRESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_POWER_ON_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_REGISTRATION_PENDING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_NODE_NOT_READY
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_NODE_READY
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_POWER_OFF_IN_PROGRESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_POWER_OFF_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_UNDEPLOY_IN_PROGRESS
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_UNDEPLOY_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_UNDEPLOY_SUCCESSFUL
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_EDGE_CONFIG_ERROR
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_DEPLOYMENT_RESTARTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_REGISTRATION_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_TRANSPORT_NODE_SYNC_PENDING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_APPLIANCE_INTERNAL_ERROR
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_INVALID_PNIC_DEVICE_NAME
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_TRANSPORT_NODE_READY
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_NETWORK_EDIT_PENDING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_MPA_DISCONNECTED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_RENAME_PENDING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_CONFIG_EDIT_PENDING
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_NETWORK_EDIT_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_RENAME_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_CONFIG_EDIT_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_CONFIG_DISCREPANCY
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_NODE_REFRESH_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * EdgeConfigurationState#EdgeConfigurationState_STATE_REGISTRATION_TIMEDOUT
    //
    //  Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State *string
    // Request identifier of the API which modified the entity.
	PendingChangeList []string
}
const EdgeConfigurationState_STATE_PENDING = "pending"
const EdgeConfigurationState_STATE_IN_PROGRESS = "in_progress"
const EdgeConfigurationState_STATE_SUCCESS = "success"
const EdgeConfigurationState_STATE_FAILED = "failed"
const EdgeConfigurationState_STATE_PARTIAL_SUCCESS = "partial_success"
const EdgeConfigurationState_STATE_ORPHANED = "orphaned"
const EdgeConfigurationState_STATE_UNKNOWN = "unknown"
const EdgeConfigurationState_STATE_ERROR = "error"
const EdgeConfigurationState_STATE_IN_SYNC = "in_sync"
const EdgeConfigurationState_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const EdgeConfigurationState_STATE_VM_DEPLOYMENT_QUEUED = "VM_DEPLOYMENT_QUEUED"
const EdgeConfigurationState_STATE_VM_DEPLOYMENT_IN_PROGRESS = "VM_DEPLOYMENT_IN_PROGRESS"
const EdgeConfigurationState_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const EdgeConfigurationState_STATE_VM_POWER_ON_IN_PROGRESS = "VM_POWER_ON_IN_PROGRESS"
const EdgeConfigurationState_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const EdgeConfigurationState_STATE_REGISTRATION_PENDING = "REGISTRATION_PENDING"
const EdgeConfigurationState_STATE_NODE_NOT_READY = "NODE_NOT_READY"
const EdgeConfigurationState_STATE_NODE_READY = "NODE_READY"
const EdgeConfigurationState_STATE_VM_POWER_OFF_IN_PROGRESS = "VM_POWER_OFF_IN_PROGRESS"
const EdgeConfigurationState_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const EdgeConfigurationState_STATE_VM_UNDEPLOY_IN_PROGRESS = "VM_UNDEPLOY_IN_PROGRESS"
const EdgeConfigurationState_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const EdgeConfigurationState_STATE_VM_UNDEPLOY_SUCCESSFUL = "VM_UNDEPLOY_SUCCESSFUL"
const EdgeConfigurationState_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const EdgeConfigurationState_STATE_VM_DEPLOYMENT_RESTARTED = "VM_DEPLOYMENT_RESTARTED"
const EdgeConfigurationState_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const EdgeConfigurationState_STATE_TRANSPORT_NODE_SYNC_PENDING = "TRANSPORT_NODE_SYNC_PENDING"
const EdgeConfigurationState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const EdgeConfigurationState_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const EdgeConfigurationState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const EdgeConfigurationState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const EdgeConfigurationState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const EdgeConfigurationState_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const EdgeConfigurationState_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const EdgeConfigurationState_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const EdgeConfigurationState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const EdgeConfigurationState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const EdgeConfigurationState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const EdgeConfigurationState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const EdgeConfigurationState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const EdgeConfigurationState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const EdgeConfigurationState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const EdgeConfigurationState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const EdgeConfigurationState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const EdgeConfigurationState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const EdgeConfigurationState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const EdgeConfigurationState_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const EdgeConfigurationState_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const EdgeConfigurationState_STATE_TRANSPORT_NODE_READY = "TRANSPORT_NODE_READY"
const EdgeConfigurationState_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const EdgeConfigurationState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const EdgeConfigurationState_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const EdgeConfigurationState_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const EdgeConfigurationState_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const EdgeConfigurationState_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const EdgeConfigurationState_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const EdgeConfigurationState_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const EdgeConfigurationState_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const EdgeConfigurationState_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const EdgeConfigurationState_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const EdgeConfigurationState_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"

// A shaper that specifies egress rate properties in Mb/s
type EgressRateLimiter struct {
    // Average bandwidth in Mb/s format: int32
	AverageBandwidth *int64
    // Burst size in bytes format: int32
	BurstSize *int64
    // Peak bandwidth in Mb/s format: int32
	PeakBandwidth *int64
	Enabled *bool
    // Possible values are: 
    //
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSBROADCASTRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_EGRESSRATELIMITER
    //
    //  Type rate limiter
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const EgressRateLimiter__TYPE_IDENTIFIER = "EgressRateLimiter"

// Ordered list of Endpoint Rules ordered by sequence number of the entries. The maximum number of policies is 25.
type EndpointPolicy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Endpoint Rules that are a part of this EndpointPolicy
	EndpointRules []EndpointRule
    // This field is used to resolve conflicts between maps across domains. format: int32
	SequenceNumber *int64
}

// Endpoint Rule comes from user configuration. User configures Endpoint Rule to specify what services are applied on the groups.
type EndpointRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // We need paths as duplicate names may exist for groups under different domains. In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	Groups []string
    // This field is used to resolve conflicts between multiple entries under EndpointPolicy. It will be system default value when not specified by user. format: int32
	SequenceNumber *int64
    // The policy paths of service profiles are listed here. It pecifies what services are applied on the group. Currently only one is allowed.
	ServiceProfiles []string
}

// Detailed Realized Status of an intent object on an NSX-T type of enforcement point. This is a detailed view of the Realized Status of an intent object from an NSX-T enforcement point perspective.
type EnforcedStatusDetailsNsxt struct {
    // Information about the realized status of the intent on this enforcement point. Some very recent changes may be excluded when preparing this information, which is indicated by Pending Changes Info.
	EnforcedStatusInfo *EnforcedStatusInfoNsxt
    // Information about pending changes, if any, that aren't reflected in the Enforced Realized Status.
	PendingChangesInfo *PendingChangesInfoNsxt
}

// Information about the realized status of the intent object on an NSX-T type of enforcement point. Some very recent changes may be excluded when preparing this information, which is indicated by Pending Changes Info. In addition to the realized status across all scopes, this information holds details about enforced realized status per scope.
type EnforcedStatusInfoNsxt struct {
    // Consolidated Realized Status of an Intent object across all scopes of an NSX-T type of enforcement point.
	EnforcedStatus *EnforcedStatusNsxt
    // List of Enforced Realized Status per Scope.
	EnforcedStatusPerScope []*data.StructValue
}

// NSX-T Enforced Status.
type EnforcedStatusNsxt struct {
    // Possible values are: 
    //
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_UNINITIALIZED
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_UNKNOWN
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_UP
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_DOWN
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_DEGRADED
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_SUCCESS
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_FAILURE
    // * EnforcedStatusNsxt#EnforcedStatusNsxt_STATUS_IN_PROGRESS
    //
    //  Enforced Realized Status.
	Status *string
    // Status Message conveying hints depending on the status value.
	StatusMessage *string
}
const EnforcedStatusNsxt_STATUS_UNINITIALIZED = "UNINITIALIZED"
const EnforcedStatusNsxt_STATUS_UNKNOWN = "UNKNOWN"
const EnforcedStatusNsxt_STATUS_UP = "UP"
const EnforcedStatusNsxt_STATUS_DOWN = "DOWN"
const EnforcedStatusNsxt_STATUS_DEGRADED = "DEGRADED"
const EnforcedStatusNsxt_STATUS_SUCCESS = "SUCCESS"
const EnforcedStatusNsxt_STATUS_FAILURE = "FAILURE"
const EnforcedStatusNsxt_STATUS_IN_PROGRESS = "IN_PROGRESS"

// NSX-T Detailed Realized Status Per Scope.
type EnforcedStatusPerScopeNsxt struct {
    // Possible values are: 
    //
    // * EnforcedStatusPerScopeNsxt#EnforcedStatusPerScopeNsxt_RESOURCE_TYPE_TRANSPORTNODESPANENFORCEDSTATUS
    //
    //  Enforced Realized Status Per Scope Resource Type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const EnforcedStatusPerScopeNsxt__TYPE_IDENTIFIER = "EnforcedStatusPerScopeNsxT"
const EnforcedStatusPerScopeNsxt_RESOURCE_TYPE_TRANSPORTNODESPANENFORCEDSTATUS = "TransportNodeSpanEnforcedStatus"

// Detailed Realized Status Per Transport Node.
type EnforcedStatusPerTransportNode struct {
    // Display name of the transport node.
	DisplayName *string
    // Realized Status of an Intent object on this Transport Node.
	EnforcedStatus *EnforcedStatusNsxt
    // UUID identifying uniquely the Transport Node.
	NsxId *string
    // Policy Path referencing the transport node.
	Path *string
}

// Enforcement point is the endpoint where policy configurations are applied.
type EnforcementPoint struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Auto enforce flag suggests whether the policy objects shall be automatically enforced on this enforcement point or not. When this flag is set to true, all policy objects will be automatically enforced on this enforcement point. If this flag is set to false, user shall rely on the usual means of realization, i.e., deployment maps.
	AutoEnforce *bool
    // Connection Info of the Enforcement Point.
	ConnectionInfo *data.StructValue
    // Version of the Enforcement point.
	Version *string
}

// Contains information required to connect to enforcement point.
type EnforcementPointConnectionInfo struct {
    // Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress *string
    // Possible values are: 
    //
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXTCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXVCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_CVXCONNECTIONINFO
    //
    //  Resource Type of Enforcement Point Connection Info.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const EnforcementPointConnectionInfo__TYPE_IDENTIFIER = "EnforcementPointConnectionInfo"
const EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXTCONNECTIONINFO = "NSXTConnectionInfo"
const EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXVCONNECTIONINFO = "NSXVConnectionInfo"
const EnforcementPointConnectionInfo_RESOURCE_TYPE_CVXCONNECTIONINFO = "CvxConnectionInfo"

// Paged collection of enforcement points.
type EnforcementPointListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Enforcement Point list Results.
	Results []EnforcementPoint
}

// Represents the leaf level constraint to restrict the number instances of an entity type can be created. This is useful in restricting number of CGWs or MGWs or Providers that can created in a system.
type EntityInstanceCountConstraintExpression struct {
    // Instance count. format: int64
	Count *int64
    // Operations supported '<' and '<='.
	Operator *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_VALUECONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_RELATEDATTRIBUTECONDITIONALEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_ENTITYINSTANCECOUNTCONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_FIELDSANITYCONSTRAINTEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const EntityInstanceCountConstraintExpression__TYPE_IDENTIFIER = "EntityInstanceCountConstraintExpression"

// Metadata related to a given error_id
type ErrorResolverInfo struct {
    // The error id for which metadata information is needed format: int64
	ErrorId *int64
    // Indicates whether there is a resolver associated with the error or not
	ResolverPresent *bool
    // User supplied metadata that might be required by the resolver
	UserMetadata *ErrorResolverUserMetadata
}

// Collection of all registered ErrorResolverInfo
type ErrorResolverInfoList struct {
    // ErrorResolverInfo list
	Results []ErrorResolverInfo
}

// Error along with its metadata
type ErrorResolverMetadata struct {
    // The entity/node UUID where the error has occurred.
	EntityId *string
    // The error id as reported by the entity where the error occurred. format: int64
	ErrorId *int64
    // This can come from some external system like syslog collector
	SystemMetadata *ErrorResolverSystemMetadata
    // User supplied metadata that might be required by the resolver
	UserMetadata *ErrorResolverUserMetadata
}

// List of errors with their metadata
type ErrorResolverMetadataList struct {
    // List of errors with their corresponding metadata.
	Errors []ErrorResolverMetadata
}

// Metadata fetched from an external system like Syslog or LogInsight.
type ErrorResolverSystemMetadata struct {
    // The value fetched from another system
	Value *string
}

// Corresponds to one property entered by the user
type ErrorResolverUserInputData struct {
    // Possible values are: 
    //
    // * ErrorResolverUserInputData#ErrorResolverUserInputData_DATA_TYPE_TEXT
    // * ErrorResolverUserInputData#ErrorResolverUserInputData_DATA_TYPE_NUMBER
    // * ErrorResolverUserInputData#ErrorResolverUserInputData_DATA_TYPE_PASSWORD
    //
    //  The datatype of the given property. Useful for data validation
	DataType *string
    // Name of the property supplied by the user
	PropertyName *string
    // The value associated with the above property
	PropertyValue *string
}
const ErrorResolverUserInputData_DATA_TYPE_TEXT = "TEXT"
const ErrorResolverUserInputData_DATA_TYPE_NUMBER = "NUMBER"
const ErrorResolverUserInputData_DATA_TYPE_PASSWORD = "PASSWORD"

// User supplied metadata needed for resolving errors
type ErrorResolverUserMetadata struct {
    // List of user supplied input data.
	UserInputList []ErrorResolverUserInputData
}

// A ServiceEntry that represents an ethertype protocol
type EtherTypeServiceEntry struct {
    // Type of the encapsulated protocol format: int64
	EtherType *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const EtherTypeServiceEntry__TYPE_IDENTIFIER = "EtherTypeServiceEntry"

type EthernetHeader struct {
    // The destination MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	DstMac *string
    // This field defaults to IPv4. format: int64
	EthType *int64
    // The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	SrcMac *string
}

// Criterion Evaluation is the basic logical condition to evaluate whether the event could be potentially met.
type Evaluation struct {
    // Possible values are: 
    //
    // * Evaluation#Evaluation_RESOURCE_TYPE_SOURCEFIELDEVALUATION
    //
    //  Criterion Evaluation resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const Evaluation__TYPE_IDENTIFIER = "Evaluation"
const Evaluation_RESOURCE_TYPE_SOURCEFIELDEVALUATION = "SourceFieldEvaluation"

// The Event is the criterion or criteria applied to the source and, when met, prompt Policy to run the action. All Reaction Events are constructed with reference to the object, the \"source\", that is logically deemed to be the object upon which the Event in question initially occurred upon. Some example events include: - New object was created. - Change in realization state. - Specific API is called.
type Event struct {
    // Criteria applied to the source and, if satisfied, would trigger the action. Criteria is composed of criterions. In order for the Criteria to be met, only one of the criterion must be fulfilled (implicit OR).
	Criteria []Criterion
    // Source that is logically deemed to be the \"object\" upon which the Event in question initially occurred upon.
	Source *data.StructValue
}

// Evpn Configuration.
type EvpnConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Encapsulation method for EVPN service that is used by the transport layer.
	EncapsulationMethod *EvpnEncapConfig
    // Possible values are: 
    //
    // * EvpnConfig#EvpnConfig_MODE_INLINE
    //
    //  EVPN service mode
	Mode *string
}
const EvpnConfig_MODE_INLINE = "INLINE"

// Encapsulation method for EVPN.
type EvpnEncapConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // vni pool path
	VniPoolPath *string
}

// Evpn Tunnel Endpoint Configuration.
type EvpnTunnelEndpointConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // edge path
	EdgePath *string
    // local addresses format: ipv4
	LocalAddresses []string
    // MTU format: int32
	Mtu *int64
}

// All the nodes of the expression extend from this abstract class. This is present for extensibility.
type Expression struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const Expression__TYPE_IDENTIFIER = "Expression"
const Expression_RESOURCE_TYPE_CONDITION = "Condition"
const Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR = "ConjunctionOperator"
const Expression_RESOURCE_TYPE_NESTEDEXPRESSION = "NestedExpression"
const Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION = "IPAddressExpression"
const Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION = "MACAddressExpression"
const Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION = "ExternalIDExpression"
const Expression_RESOURCE_TYPE_PATHEXPRESSION = "PathExpression"
const Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION = "IdentityGroupExpression"

// Represents external ID expressions in the form of an array, to support addition of objects like virtual interfaces, virtual machines, CloudNativeServiceInstance PhysicalServer to a group.
type ExternalIDExpression struct {
    // This array can consist of one or more external IDs for the specified member type.
	ExternalIds []string
    // Possible values are: 
    //
    // * ExternalIDExpression#ExternalIDExpression_MEMBER_TYPE_VIRTUALMACHINE
    // * ExternalIDExpression#ExternalIDExpression_MEMBER_TYPE_VIRTUALNETWORKINTERFACE
    // * ExternalIDExpression#ExternalIDExpression_MEMBER_TYPE_CLOUDNATIVESERVICEINSTANCE
    // * ExternalIDExpression#ExternalIDExpression_MEMBER_TYPE_PHYSICALSERVER
    //
    //  External ID member type
	MemberType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ExternalIDExpression__TYPE_IDENTIFIER = "ExternalIDExpression"
const ExternalIDExpression_MEMBER_TYPE_VIRTUALMACHINE = "VirtualMachine"
const ExternalIDExpression_MEMBER_TYPE_VIRTUALNETWORKINTERFACE = "VirtualNetworkInterface"
const ExternalIDExpression_MEMBER_TYPE_CLOUDNATIVESERVICEINSTANCE = "CloudNativeServiceInstance"
const ExternalIDExpression_MEMBER_TYPE_PHYSICALSERVER = "PhysicalServer"

// Global configuration
type FIPSGlobalConfig struct {
    // When this flag is set to true FIPS mode will be set on ssl encryptions of load balancer feature.
	LbFipsEnabled *bool
}

// Feature Permission
type FeaturePermission struct {
    // Feature Id
	Feature *string
    // Feature Description
	FeatureDescription *string
    // Feature Name
	FeatureName *string
    // Is execute recommended
	IsExecuteRecommended *bool
    // Is internal
	IsInternal *bool
    // Possible values are: 
    //
    // * FeaturePermission#FeaturePermission_PERMISSION_CRUD
    // * FeaturePermission#FeaturePermission_PERMISSION_READ
    // * FeaturePermission#FeaturePermission_PERMISSION_EXECUTE
    // * FeaturePermission#FeaturePermission_PERMISSION_NONE
    //
    //  Permission
	Permission *string
}
const FeaturePermission_PERMISSION_CRUD = "crud"
const FeaturePermission_PERMISSION_READ = "read"
const FeaturePermission_PERMISSION_EXECUTE = "execute"
const FeaturePermission_PERMISSION_NONE = "none"

type FederationComponentUpgradeStatus struct {
    // Component type for the upgrade status
	ComponentType *string
    // Mapping of current versions of nodes and counts of nodes at the respective versions.
	CurrentVersionNodeSummary []FederationNodeSummary
    // Details about the upgrade status
	Details *string
    // Indicator of upgrade progress in percentage
	PercentComplete *float64
    // Possible values are: 
    //
    // * FederationComponentUpgradeStatus#FederationComponentUpgradeStatus_STATUS_SUCCESS
    // * FederationComponentUpgradeStatus#FederationComponentUpgradeStatus_STATUS_FAILED
    // * FederationComponentUpgradeStatus#FederationComponentUpgradeStatus_STATUS_IN_PROGRESS
    // * FederationComponentUpgradeStatus#FederationComponentUpgradeStatus_STATUS_NOT_STARTED
    // * FederationComponentUpgradeStatus#FederationComponentUpgradeStatus_STATUS_PAUSED
    //
    //  Upgrade status of component
	Status *string
    // Target component version
	TargetVersion *string
}
const FederationComponentUpgradeStatus_STATUS_SUCCESS = "SUCCESS"
const FederationComponentUpgradeStatus_STATUS_FAILED = "FAILED"
const FederationComponentUpgradeStatus_STATUS_IN_PROGRESS = "IN_PROGRESS"
const FederationComponentUpgradeStatus_STATUS_NOT_STARTED = "NOT_STARTED"
const FederationComponentUpgradeStatus_STATUS_PAUSED = "PAUSED"

// Global Manager federation configuration. This configuration is distributed to all Sites participating in federation.
type FederationConfig struct {
    // Federation configurations of all Sites
	SiteConfig []SiteFederationConfig
}

// Additional configuration required for federation.
type FederationConnectivityConfig struct {
    // Global id for by Layer3 services for federation usecases. format: int64
	GlobalOverlayId *int64
}

// Additional gateway configuration required for federation
type FederationGatewayConfig struct {
    // Global id for by Layer3 services for federation usecases. format: int64
	GlobalOverlayId *int64
    // Indicies for cross site allocation for edge cluster and its members referred by gateway.
	SiteAllocationIndices []SiteAllocationIndexForEdge
    // Global UUID for transit segment id to be used by Layer2 services for federation usecases.
	TransitSegmentId *string
}

type FederationNodeSummary struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Number of nodes of the type and at the component version. format: int32
	NodeCount *int64
    // Component version
	Version *string
}

// Provides upgrade summary for a specific site.
type FederationUpgradeSummary struct {
    // List of component statuses
	ComponentStatus []FederationComponentUpgradeStatus
    // This is NSX version for the site.
	CurrentVersion *string
    // Name of the global manager if present.
	GpmName *string
    // Unique identifier of this resource.
	Id *string
    // Indicates the time when the site was upgraded.
	LastUpgradeTimestamp *string
    // Name of the site.
	Name *string
    // Possible values are: 
    //
    // * FederationUpgradeSummary#FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_SUCCESS
    // * FederationUpgradeSummary#FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_FAILED
    // * FederationUpgradeSummary#FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_IN_PROGRESS
    // * FederationUpgradeSummary#FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_NOT_STARTED
    // * FederationUpgradeSummary#FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_PAUSED
    //
    //  Status of upgrade
	OverallUpgradeStatus *string
    // This is the Site Manager generated UUID for every NSX deployment.
	SiteId *string
    // IP address of the site.
	SiteIp *string
    // Possible values are: 
    //
    // * FederationUpgradeSummary#FederationUpgradeSummary_SITE_TYPE_ACTIVE_GM_SITE
    // * FederationUpgradeSummary#FederationUpgradeSummary_SITE_TYPE_STANDBY_GM_SITE
    // * FederationUpgradeSummary#FederationUpgradeSummary_SITE_TYPE_NON_GM_SITE
    //
    //  Type of this site.
	SiteType *string
    // This is NSX target version for the site, if it is undergoing upgrade.
	TargetVersion *string
}
const FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_SUCCESS = "SUCCESS"
const FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_FAILED = "FAILED"
const FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_IN_PROGRESS = "IN_PROGRESS"
const FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_NOT_STARTED = "NOT_STARTED"
const FederationUpgradeSummary_OVERALL_UPGRADE_STATUS_PAUSED = "PAUSED"
const FederationUpgradeSummary_SITE_TYPE_ACTIVE_GM_SITE = "ACTIVE_GM_SITE"
const FederationUpgradeSummary_SITE_TYPE_STANDBY_GM_SITE = "STANDBY_GM_SITE"
const FederationUpgradeSummary_SITE_TYPE_NON_GM_SITE = "NON_GM_SITE"

// Paged Collection of site upgrade information
type FederationUpgradeSummaryListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged collection of site upgrade information
	Results []FederationUpgradeSummary
}

// Represents the field value constraint to constrain specified field value based on defined sanity checks. Example - For DNS.upstream_servers, all the IP addresses must either be public or private. { \"target\": { \"target_resource_type\": \"DnsForwarderZone\", \"attribute\": \"upstreamServers\", \"path_prefix\": \"/infra/dns-forwarder-zones/\" }, \"constraint_expression\": { \"resource_type\": \"FieldSanityConstraintExpression\", \"operator\": \"OR\", \"checks\": [\"ALL_PUBLIC_IPS\", \"ALL_PRIVATE_IPS\"] } }
type FieldSanityConstraintExpression struct {
    // Possible values are: 
    //
    // * FieldSanityConstraintExpression#FieldSanityConstraintExpression_CHECKS_PUBLIC_IPS
    // * FieldSanityConstraintExpression#FieldSanityConstraintExpression_CHECKS_PRIVATE_IPS
    //
    //  List of sanity checks.
	Checks []string
    // Possible values are: 
    //
    // * FieldSanityConstraintExpression#FieldSanityConstraintExpression_OPERATOR_OR
    // * FieldSanityConstraintExpression#FieldSanityConstraintExpression_OPERATOR_AND
    //
    //  A conditional operator
	Operator *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_VALUECONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_RELATEDATTRIBUTECONDITIONALEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_ENTITYINSTANCECOUNTCONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_FIELDSANITYCONSTRAINTEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const FieldSanityConstraintExpression__TYPE_IDENTIFIER = "FieldSanityConstraintExpression"
const FieldSanityConstraintExpression_CHECKS_PUBLIC_IPS = "ALL_PUBLIC_IPS"
const FieldSanityConstraintExpression_CHECKS_PRIVATE_IPS = "ALL_PRIVATE_IPS"
const FieldSanityConstraintExpression_OPERATOR_OR = "OR"
const FieldSanityConstraintExpression_OPERATOR_AND = "AND"

// Field Setting.
type FieldSetting struct {
    // Field Pointer.
	FieldPointer *string
    // Value that the field must be set to.
	Value *data.StructValue
}

// Field Setting Value.
type FieldSettingValue struct {
    // Possible values are: 
    //
    // * FieldSettingValue#FieldSettingValue_RESOURCE_TYPE_CONSTANTFIELDVALUE
    //
    //  Field Setting Value resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const FieldSettingValue__TYPE_IDENTIFIER = "FieldSettingValue"
const FieldSettingValue_RESOURCE_TYPE_CONSTANTFIELDVALUE = "ConstantFieldValue"

type FieldsPacketData struct {
    // The ARP header
	ArpHeader *ArpHeader
    // The ethernet header
	EthHeader *EthernetHeader
    // The IPv4 header
	IpHeader *Ipv4Header
    // The IPv6 header
	Ipv6Header *Ipv6Header
    // Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload contains any data the user wants to put after the transport header.
	Payload *string
    // This field contains a protocol that is above IP. It is not restricted to the 'transport' defined by the OSI model (e.g., ICMP is supported).
	TransportHeader *TransportProtocolHeader
    // If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message. The frame will be zero padded to the requested size. format: int64
	FrameSize *int64
    // Possible values are: 
    //
    // * PacketData#PacketData_RESOURCE_TYPE_BINARYPACKETDATA
    // * PacketData#PacketData_RESOURCE_TYPE_FIELDSPACKETDATA
    //
    //  Packet configuration
	ResourceType string
    // A flag, when set true, indicates that the traceflow packet is of L3 routing.
	Routed *bool
    // Possible values are: 
    //
    // * PacketData#PacketData_TRANSPORT_TYPE_BROADCAST
    // * PacketData#PacketData_TRANSPORT_TYPE_UNICAST
    // * PacketData#PacketData_TRANSPORT_TYPE_MULTICAST
    // * PacketData#PacketData_TRANSPORT_TYPE_UNKNOWN
    //
    //  transport type of the traceflow packet
	TransportType *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const FieldsPacketData__TYPE_IDENTIFIER = "FieldsPacketData"

// Remote server authentication details
type FileTransferAuthenticationScheme struct {
    // Password to authenticate with
	Password *string
    // Possible values are: 
    //
    // * FileTransferAuthenticationScheme#FileTransferAuthenticationScheme_SCHEME_NAME_PASSWORD
    //
    //  Authentication scheme name
	SchemeName *string
    // User name to authenticate with
	Username *string
}
const FileTransferAuthenticationScheme_SCHEME_NAME_PASSWORD = "PASSWORD"

// Protocol to transfer backup file to remote server
type FileTransferProtocol struct {
    // Scheme to authenticate if required
	AuthenticationScheme *FileTransferAuthenticationScheme
    // Possible values are: 
    //
    // * FileTransferProtocol#FileTransferProtocol_PROTOCOL_NAME_SFTP
    //
    //  Protocol name
	ProtocolName *string
    // The expected SSH fingerprint of the server. If the server's fingerprint does not match this fingerprint, the connection will be terminated. Only ECDSA fingerprints hashed with SHA256 are supported. To obtain the host's ssh fingerprint, you should connect via some method other than SSH to obtain this information. You can use one of these commands to view the key's fingerprint: 1. ssh-keygen -l -E sha256 -f ssh_host_ecdsa_key.pub 2. awk '{print $2}' ssh_host_ecdsa_key.pub | base64 -d | sha256sum -b | sed 's/ .\*$//' | xxd -r -p | base64 | sed 's/.//44g' | awk '{print \"SHA256:\"$1}'
	SshFingerprint *string
}
const FileTransferProtocol_PROTOCOL_NAME_SFTP = "sftp"

// Represents configuration for filter widget. This is abstract representation of filter widget.
type FilterWidgetConfiguration struct {
    // Alias to be used when emitting filter value.
	Alias *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const FilterWidgetConfiguration__TYPE_IDENTIFIER = "FilterWidgetConfiguration"

// Firewall related configurations
type FirewallConfiguration struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * FirewallConfiguration#FirewallConfiguration_RESOURCE_TYPE_DFWFIREWALLCONFIGURATION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // To disable auto drafts, set it to true. By default, auto drafts are enabled.
	DisableAutoDrafts *bool
    // If set to true, Firewall is enabled.
	EnableFirewall *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const FirewallConfiguration__TYPE_IDENTIFIER = "FirewallConfiguration"
const FirewallConfiguration_RESOURCE_TYPE_DFWFIREWALLCONFIGURATION = "DfwFirewallConfiguration"

// Represents a generic firewall identity store (e.g. Microsoft AD) The firewall identity store allow access to the directory group via LDAP protocol.
type FirewallIdentityStore struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.
	BaseDistinguishedName *string
    // Directory domain LDAP servers' information including host, name, port, protocol and so on.
	LdapServers []FirewallIdentityStoreLdapServer
    // Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.
	Name *string
    // NetBIOS names can contain all alphanumeric characters except for the certain disallowed characters. Names can contain a period, but names cannot start with a period. NetBIOS is similar to DNS in that it can serve as a directory service, but more limited as it has no provisions for a name hierarchy and names are limited to 15 characters. The netbios name is case insensitive and is stored in upper case regardless of input case.
	NetbiosName *string
    // SelectiveSync settings toggle the SelectiveSync feature and selected OrgUnits. If this is not specified, SelectiveSync is disabled by default.
	SelectiveSyncSettings *FirewallIdentityStoreSelectiveSyncSettings
    // Each domain sync settings can be changed using this object. It is not required since there are default values used if there is no specification for this object.
	SyncSettings *FirewallIdentityStoreSyncSettings
}

// Firewall identity LDAP server
type FirewallIdentityStoreLdapServer struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique constraint for domain name among different domains.
	DomainName *string
    // Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization. format: ip-or-hostname
	Host *string
    // Directory LDAP server connection password.
	Password *string
    // Directory LDAP server connection TCP/UDP port. format: int32
	Port *int64
    // Possible values are: 
    //
    // * FirewallIdentityStoreLdapServer#FirewallIdentityStoreLdapServer_PROTOCOL_LDAP
    // * FirewallIdentityStoreLdapServer#FirewallIdentityStoreLdapServer_PROTOCOL_LDAPS
    //
    //  Directory LDAP server connection protocol which is either LDAP or LDAPS.
	Protocol *string
    // Directory LDAP server certificate thumbprint used in secure LDAPS connection.
	Thumbprint *string
    // Directory LDAP server connection user name.
	Username *string
}
const FirewallIdentityStoreLdapServer_PROTOCOL_LDAP = "LDAP"
const FirewallIdentityStoreLdapServer_PROTOCOL_LDAPS = "LDAPS"

// Firewall identity selective sync settings
type FirewallIdentityStoreSelectiveSyncSettings struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Enable or disable SelectiveSync
	Enabled *bool
    // If SelectiveSync is enabled, this contains 1 or more OrgUnits, NSX will synchronize with in LDAP server. If SelectiveSync is disabled, do not define this or specify an empty list.
	SelectedOrgUnits []string
}

// Firewall identity synchronization settings
type FirewallIdentityStoreSyncSettings struct {
    // Directory domain delta synchronization interval time between two delta sync in minutes. format: int64
	DeltaSyncInterval *int64
    // Directory domain full synchronization schedule using cron expression. For example, cron expression \"0 0 12 ? \* SUN \*\" means full sync is scheduled every Sunday midnight. If this object is null, it means there is no background cron job running for full sync.
	FullSyncCronExpr *string
    // Sync delay after Directory domain has been successfully created. if delay is -1, initial full sync will not be triggered. format: int32
	SyncDelayInSec *int64
}

// A profile holding TCP, UDP and ICMP and other protcol connection limits.
type FloodProtectionProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * FloodProtectionProfile#FloodProtectionProfile_RESOURCE_TYPE_GATEWAYFLOODPROTECTIONPROFILE
    // * FloodProtectionProfile#FloodProtectionProfile_RESOURCE_TYPE_DISTRIBUTEDFLOODPROTECTIONPROFILE
    //
    //  GatewayFloodProtectionProfile is used for all Tier0 and Tier1 gateways. DistributedFloodProtectionProfile is used for all Transport Nodes.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If this field is empty, firewall will not set a limit to active ICMP connections. format: int64
	IcmpActiveFlowLimit *int64
    // If this field is empty, firewall will not set a limit to other active connections. besides UDP, ICMP and half open TCP connections. format: int64
	OtherActiveConnLimit *int64
    // If this field is empty, firewall will not set a limit to half open TCP connections. format: int64
	TcpHalfOpenConnLimit *int64
    // If this field is empty, firewall will not set a limit to active UDP connections. format: int64
	UdpActiveFlowLimit *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const FloodProtectionProfile__TYPE_IDENTIFIER = "FloodProtectionProfile"
const FloodProtectionProfile_RESOURCE_TYPE_GATEWAYFLOODPROTECTIONPROFILE = "GatewayFloodProtectionProfile"
const FloodProtectionProfile_RESOURCE_TYPE_DISTRIBUTEDFLOODPROTECTIONPROFILE = "DistributedFloodProtectionProfile"

// Paged Collection of flood protection profile binding maps
type FloodProtectionProfileBindingListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Flood protection profile binding maps list results
	Results []FloodProtectionProfileBindingMap
}

// This entity will be used to establish association between Flood Protection profile and Logical Routers.
type FloodProtectionProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
}

// Paged Collection of flood protection profiles
type FloodProtectionProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Flood protection profile list results
	Results []*data.StructValue
}

// Footer of a widget that provides additional information or allows an action such as clickable url for navigation. An example usage of footer is provided under 'example_request' section of 'CreateWidgetConfiguration' API.
type Footer struct {
    // Action to be performed at the footer of a widget. An action at the footer can be simple text description or a hyperlink to a UI page. Action allows a clickable url for navigation. An example usage of footer action is provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Actions []FooterAction
    // If the condition is met then the footer will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition *string
}

// Action specified at the footer of a widget to provide additional information or to provide a clickable url for navigation. An example usage of footer action is provided under the 'example_request' section of 'CreateWidgetConfiguration' API.
type FooterAction struct {
    // If true, the footer will appear in the underlying container that holds the widget.
	DockToContainerFooter *bool
    // Label to be displayed against the footer action.
	Label *Label
    // Hyperlink to the UI page that provides details of action.
	Url *string
}

// Contains ordered list of forwarding rules that determine when to forward traffic to / from the underlay for accessing cloud native services.
type ForwardingPolicy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category *string
    // Comments for security policy lock/unlock.
	Comments *string
    // This field is to indicate the internal sequence number of a policy with respect to the policies across categories. format: int32
	InternalSequenceNumber *int64
    // A flag to indicate whether policy is a default policy.
	IsDefault *bool
    // ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy *string
    // SecurityPolicy locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked *bool
    // The count of rules in the policy. format: int32
	RuleCount *int64
    // Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath *string
    // The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string
    // This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful *bool
    // Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict *bool
    // Rules that are a part of this ForwardingPolicy
	Rules []ForwardingRule
}

// Paged Collection of ForwardingPolicy objects
type ForwardingPolicyListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // ForwardingPolicy list results
	Results []ForwardingPolicy
}

// Forwarding rule that determine how to forward traffic from a VM. Traffic from VM can either be routed via Overlay or Underlay when VM is on hybrid port. Additionally NAT can be performed for VM or container on overlay to route traffic to/from underlay ROUTE_TO_UNDERLAY - Access a service on underlay space from a VM connected to hybrid port. Eg access to AWS S3 on AWS underlay ROUTE_TO_OVERLAY - Access a service on overlay space from a VM connected to hybrid port. ROUTE_FROM_UNDERLAY - Access a service hosted on a VM (that is connected to hybrid port) from underlay space. Eg access from AWS ELB to VM ROUTE_FROM_OVERLAY - Access a service hosted on a VM (that is connected to hybrid port) from overlay space NAT_FROM_UNDERLAY - Access a service on overlay VM/container from underlay space using DNAT from underlay IP to overlay IP NAT_TO_UNDERLAY - Access an underlay service from a VM/container on overlay space using SNAT from overlay IP to underlay IP
type ForwardingRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded *bool
    // Possible values are: 
    //
    // * ForwardingRule#ForwardingRule_DIRECTION_IN
    // * ForwardingRule#ForwardingRule_DIRECTION_OUT
    // * ForwardingRule#ForwardingRule_DIRECTION_IN_OUT
    //
    //  Define direction of traffic.
	Direction *string
    // Flag to disable the rule. Default is enabled.
	Disabled *bool
    // Possible values are: 
    //
    // * ForwardingRule#ForwardingRule_IP_PROTOCOL_IPV4
    // * ForwardingRule#ForwardingRule_IP_PROTOCOL_IPV6
    // * ForwardingRule#ForwardingRule_IP_PROTOCOL_IPV4_IPV6
    //
    //  Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol *string
    // A flag to indicate whether rule is a default rule.
	IsDefault *bool
    // Flag to enable packet logging. Default is disabled.
	Logged *bool
    // Text for additional notes on changes.
	Notes *string
    // Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string
    // This is a unique 4 byte positive number that is assigned by the system. This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on. format: int64
	RuleId *int64
    // The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string
    // This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []*data.StructValue
    // In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded *bool
    // User level field which will be printed in CLI and packet logs.
	Tag *string
    // Possible values are: 
    //
    // * ForwardingRule#ForwardingRule_ACTION_ROUTE_TO_UNDERLAY
    // * ForwardingRule#ForwardingRule_ACTION_ROUTE_TO_OVERLAY
    // * ForwardingRule#ForwardingRule_ACTION_ROUTE_FROM_UNDERLAY
    // * ForwardingRule#ForwardingRule_ACTION_ROUTE_FROM_OVERLAY
    // * ForwardingRule#ForwardingRule_ACTION_NAT_FROM_UNDERLAY
    // * ForwardingRule#ForwardingRule_ACTION_NAT_TO_UNDERLAY
    //
    //  The action to be applied to all the services
	Action *string
}
const ForwardingRule_DIRECTION_IN = "IN"
const ForwardingRule_DIRECTION_OUT = "OUT"
const ForwardingRule_DIRECTION_IN_OUT = "IN_OUT"
const ForwardingRule_IP_PROTOCOL_IPV4 = "IPV4"
const ForwardingRule_IP_PROTOCOL_IPV6 = "IPV6"
const ForwardingRule_IP_PROTOCOL_IPV4_IPV6 = "IPV4_IPV6"
const ForwardingRule_ACTION_ROUTE_TO_UNDERLAY = "ROUTE_TO_UNDERLAY"
const ForwardingRule_ACTION_ROUTE_TO_OVERLAY = "ROUTE_TO_OVERLAY"
const ForwardingRule_ACTION_ROUTE_FROM_UNDERLAY = "ROUTE_FROM_UNDERLAY"
const ForwardingRule_ACTION_ROUTE_FROM_OVERLAY = "ROUTE_FROM_OVERLAY"
const ForwardingRule_ACTION_NAT_FROM_UNDERLAY = "NAT_FROM_UNDERLAY"
const ForwardingRule_ACTION_NAT_TO_UNDERLAY = "NAT_TO_UNDERLAY"

// Paged Collection of ForwardingRules
type ForwardingRuleListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Rule list results
	Results []ForwardingRule
}

// Provides FullSync state for Local Manager from Global Manager.
type FullSyncState struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Errors occurred during full sync.
	Errors []string
    // Full sync id generated by Async Replicator (AR) service.
	FullSyncId *string
    // Possible values are: 
    //
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_INITIAL
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_PAUSE_DCNS
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_DELETED_STALE_ENTITIES
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_PROCESSED_FULLSYNC_DATA
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_PROCESSED_DELTAS
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_UNPAUSE_DCNS
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_COMPLETED
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_ERROR
    // * FullSyncState#FullSyncState_LAST_COMPLETED_STAGE_ABORTED
    //
    //  The current stage of full sync completion for ongoing sync. When Local Manager (LM) receives full sync data from AR, LM starts with workflow to prserve the state and restore the full sync from where it has left off in case of change of leadership of the service to different NSX node or LM is restarted. LM starts the full sync workflow with state INITIAL capturing the AR full sync id and data location details. The stage/state transition follows the order given below INITIAL - Full sync started PROCESSED_FULLSYNC_DATA - Compelted processing the full state data provided by AR PRCESSED_DELTAS - Completed processing pending delta changes provided by AR. DELETED_STALE_ENTITIES - Completed deletion of all global entities on LM that are not in GM anymore COMPLETED - Full sync handling is completed on LM ERROR - Full sync failed with errors on LM, in which case AR will re-attempt full sync later point in time for the LM ABORTED - Indicates that the full sync cancelled as per user request
	LastCompletedStage *string
    // Timestamp of last update, could be progress or success or error. format: int64
	LastUpateTime *int64
    // Timestamp of Full Sync start. format: int64
	StartTime *int64
}
const FullSyncState_LAST_COMPLETED_STAGE_INITIAL = "INITIAL"
const FullSyncState_LAST_COMPLETED_STAGE_PAUSE_DCNS = "PAUSE_DCNS"
const FullSyncState_LAST_COMPLETED_STAGE_DELETED_STALE_ENTITIES = "DELETED_STALE_ENTITIES"
const FullSyncState_LAST_COMPLETED_STAGE_PROCESSED_FULLSYNC_DATA = "PROCESSED_FULLSYNC_DATA"
const FullSyncState_LAST_COMPLETED_STAGE_PROCESSED_DELTAS = "PROCESSED_DELTAS"
const FullSyncState_LAST_COMPLETED_STAGE_UNPAUSE_DCNS = "UNPAUSE_DCNS"
const FullSyncState_LAST_COMPLETED_STAGE_COMPLETED = "COMPLETED"
const FullSyncState_LAST_COMPLETED_STAGE_ERROR = "ERROR"
const FullSyncState_LAST_COMPLETED_STAGE_ABORTED = "ABORTED"

// Paged Collection of FullSync states.
type FullSyncStateListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // FullSync states list.
	Results []FullSyncState
}

type GatewayFloodProtectionProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * FloodProtectionProfile#FloodProtectionProfile_RESOURCE_TYPE_GATEWAYFLOODPROTECTIONPROFILE
    // * FloodProtectionProfile#FloodProtectionProfile_RESOURCE_TYPE_DISTRIBUTEDFLOODPROTECTIONPROFILE
    //
    //  GatewayFloodProtectionProfile is used for all Tier0 and Tier1 gateways. DistributedFloodProtectionProfile is used for all Transport Nodes.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If this field is empty, firewall will not set a limit to active ICMP connections. format: int64
	IcmpActiveFlowLimit *int64
    // If this field is empty, firewall will not set a limit to other active connections. besides UDP, ICMP and half open TCP connections. format: int64
	OtherActiveConnLimit *int64
    // If this field is empty, firewall will not set a limit to half open TCP connections. format: int64
	TcpHalfOpenConnLimit *int64
    // If this field is empty, firewall will not set a limit to active UDP connections. format: int64
	UdpActiveFlowLimit *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const GatewayFloodProtectionProfile__TYPE_IDENTIFIER = "GatewayFloodProtectionProfile"

// Contains ordered list of Rules for GatewayPolicy
type GatewayPolicy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category *string
    // Comments for security policy lock/unlock.
	Comments *string
    // This field is to indicate the internal sequence number of a policy with respect to the policies across categories. format: int32
	InternalSequenceNumber *int64
    // A flag to indicate whether policy is a default policy.
	IsDefault *bool
    // ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy *string
    // SecurityPolicy locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked *bool
    // The count of rules in the policy. format: int32
	RuleCount *int64
    // Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath *string
    // The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string
    // This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful *bool
    // Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict *bool
    // Rules that are a part of this SecurityPolicy
	Rules []Rule
}

// Paged Collection of gateway policies
type GatewayPolicyListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // GatewayPolicy list results
	Results []GatewayPolicy
}

// QoS profile contains configuration of rate limiting properties which can be applied in ingress and egress directions at Tier1 gateways
type GatewayQosProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Burst size in bytes. format: int32
	BurstSize *int64
    // Committed bandwidth in both directions specoficd in Mbps. Bandwidth is limited to line rate when the value configured is greater than line rate. format: int32
	CommittedBandwitdth *int64
    // Possible values are: 
    //
    // * GatewayQosProfile#GatewayQosProfile_EXCESS_ACTION_DROP
    //
    //  Action on traffic exceeding bandwidth.
	ExcessAction *string
}
const GatewayQosProfile_EXCESS_ACTION_DROP = "DROP"

// Gateway QoS profile configuration
type GatewayQosProfileConfig struct {
    // Policy path to gateway QoS profile in egress direction.
	EgressQosProfilePath *string
    // Policy path to gateway QoS profile in ingress direction.
	IngressQosProfilePath *string
}

type GatewayQosProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paginated list of GatewayQosProfile
	Results []GatewayQosProfile
}

type GatewayRouteCsvRecord struct {
    // The admin distance of the next hop format: int64
	AdminDistance *int64
    // Edge node policy path.
	EdgePath *string
    // The policy path of the interface which is used as the next hop
	_Interface *string
    // Logical router component(Service Router/Distributed Router) id
	LrComponentId *string
    // Logical router component(Service Router/Distributed Router) type
	LrComponentType *string
    // CIDR network address format: ip-cidr-block
	Network *string
    // The IP of the next hop format: ip
	NextHop *string
    // Route type (USER, CONNECTED, NSX_INTERNAL,..)
	RouteType *string
}

type GatewayRouteTableInCsvFormat struct {
    // File name set by HTTP server if API returns CSV result as a file.
	FileName *string
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Results []GatewayRouteCsvRecord
}

// Define DHCP options other than option 121.
type GenericDhcpOption struct {
    // Code of the dhcp option. format: int64
	Code *int64
    // Value of the option.
	Values []string
}

// Represents realized entity
type GenericPolicyRealizedResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // Alarm info detail
	Alarms []PolicyAlarmResource
    // Desire state paths of this object
	IntentReference []string
    // Realization API of this object on enforcement point
	RealizationApi *string
    // Realization id of this object
	RealizationSpecificIdentifier *string
    // It define the root cause for runtime error.
	RuntimeError *string
    // Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus *string
    // Possible values are: 
    //
    // * GenericPolicyRealizedResource#GenericPolicyRealizedResource_STATE_UNAVAILABLE
    // * GenericPolicyRealizedResource#GenericPolicyRealizedResource_STATE_UNREALIZED
    // * GenericPolicyRealizedResource#GenericPolicyRealizedResource_STATE_REALIZED
    // * GenericPolicyRealizedResource#GenericPolicyRealizedResource_STATE_ERROR
    //
    //  Realization state of this object
	State *string
    // The path of the enforcement point.
	EnforcementPointPath *string
    // Type of realized entity
	EntityType *string
    // Collection of type specific properties
	ExtendedAttributes []AttributeVal
    // Collection of intent paths
	IntentPaths []string
    // The site where this entity resides.
	SitePath *string
}
const GenericPolicyRealizedResource_STATE_UNAVAILABLE = "UNAVAILABLE"
const GenericPolicyRealizedResource_STATE_UNREALIZED = "UNREALIZED"
const GenericPolicyRealizedResource_STATE_REALIZED = "REALIZED"
const GenericPolicyRealizedResource_STATE_ERROR = "ERROR"

// GenericPolicyRealizedResource list result
type GenericPolicyRealizedResourceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List of realized resources
	Results []GenericPolicyRealizedResource
}

// Global configuration
type GlobalConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Contains the FIPSGlobalConfig object.
	Fips *FIPSGlobalConfig
    // Possible values are: 
    //
    // * GlobalConfig#GlobalConfig_L3FORWARDING_MODE_ONLY
    // * GlobalConfig#GlobalConfig_L3FORWARDING_MODE_AND_IPV6
    //
    //  Configure forwarding mode for routing. This setting does not restrict configuration for other modes.
	L3ForwardingMode *string
    // Maximum transmission unit (MTU) specifies the size of the largest packet that a network protocol can transmit. format: int32
	Mtu *int64
}
const GlobalConfig_L3FORWARDING_MODE_ONLY = "IPV4_ONLY"
const GlobalConfig_L3FORWARDING_MODE_AND_IPV6 = "IPV4_AND_IPV6"

// Global Manager.
type GlobalManager struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // To create a standby GM, the connection information (username, password, and API thumbprint) for at least one NSX manager node in the remote site must be provided. Once the GM has been successfully onboarded, the connection_info is discarded and authentication to the standby GM occurs using an X.509 client certificate.
	ConnectionInfo []SiteNodeConnectionInfo
    // Fail onboarding if maximum RTT exceeded.
	FailIfRttExceeded *bool
    // Internally generated UUID to the federation of Global Manager.
	FederationId *string
    // If provided and fail_if_rtt_exceeded is true, onboarding of the site will fail if measured RTT is greater than this value. format: int64
	MaximumRtt *int64
    // Possible values are: 
    //
    // * GlobalManager#GlobalManager_MODE_ACTIVE
    // * GlobalManager#GlobalManager_MODE_STANDBY
    //
    //  There can be at most one ACTIVE global manager and one STANDBY global manager. In order to add a STANDBY manager, there must be an ACTIVE manager defined.
	Mode *string
    // UUID of the site where Global manager is running. This is the Site Manager generated UUID for every NSX deployment.
	SiteId *string
}
const GlobalManager_MODE_ACTIVE = "ACTIVE"
const GlobalManager_MODE_STANDBY = "STANDBY"

// This configuration is distributed to all Sites participating in federation.
type GlobalManagerConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Global Manager federation RTEP configuration. This configuration is distributed to all Sites participating in federation.
	RtepConfig *GmRtepConfig
}

// Paged Collection of Global Managers.
type GlobalManagerListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Global Manager List Result.
	Results []GlobalManager
}

// Overall restore process status
type GlobalRestoreStatus struct {
    // A description of the restore status
	Description *string
    // Possible values are: 
    //
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_INITIAL
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_SUCCESS
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_FAILED
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_RUNNING
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_SUSPENDED_BY_USER
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_SUSPENDED_FOR_USER_ACTION
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_SUSPENDED
    // * GlobalRestoreStatus#GlobalRestoreStatus_VALUE_ABORTED
    //
    //  Global rolled-up restore status value
	Value *string
}
const GlobalRestoreStatus_VALUE_INITIAL = "INITIAL"
const GlobalRestoreStatus_VALUE_SUCCESS = "SUCCESS"
const GlobalRestoreStatus_VALUE_FAILED = "FAILED"
const GlobalRestoreStatus_VALUE_RUNNING = "RUNNING"
const GlobalRestoreStatus_VALUE_SUSPENDED_BY_USER = "SUSPENDED_BY_USER"
const GlobalRestoreStatus_VALUE_SUSPENDED_FOR_USER_ACTION = "SUSPENDED_FOR_USER_ACTION"
const GlobalRestoreStatus_VALUE_SUSPENDED = "SUSPENDED"
const GlobalRestoreStatus_VALUE_ABORTED = "ABORTED"

// Additional configuration required for federation at Site.
type GmFederationSiteConfig struct {
    // IP Addresses to be allocated for transit segment when the gateway is stretched. Note that Global Manager will carve out the IP Pool for each site to be used for edge nodes when gateway is stretched based on the user provided subnet and maximum number of edge nodes allowed per site. format: ip-cidr-block
	TransitSubnet *string
}

// Global Manager federation RTEP configuration. This configuration is distributed to all Sites participating in federation.
type GmRtepConfig struct {
    // Password to authenticate IBGP session between remote tunnel endpoints created on federated sites. This is applied to inter-site underlay IBGP neighbors created over remote tunnel endpoints on all sites. Empty string (\"\") clears existing password.
	IbgpPassword *string
}

// Represents configuration of a graph widget
type GraphConfiguration struct {
    // Axes of a graph
	Axes *Axes
    // If true, value of a point is shown as label on X axis. If false, value of point is not shown as label on X axis. false can be useful in situations where there are too many points and showing the X value as label can clutter the X axis.
	DisplayxValue *bool
    // Graphs
	Graphs []GraphDefinition
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // Possible values are: 
    //
    // * GraphConfiguration#GraphConfiguration_SUB_TYPE_LINE_GRAPH
    // * GraphConfiguration#GraphConfiguration_SUB_TYPE_BAR_GRAPH
    // * GraphConfiguration#GraphConfiguration_SUB_TYPE_STACKED_BAR_GRAPH
    //
    //  Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart
	SubType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const GraphConfiguration__TYPE_IDENTIFIER = "GraphConfiguration"
const GraphConfiguration_SUB_TYPE_LINE_GRAPH = "LINE_GRAPH"
const GraphConfiguration_SUB_TYPE_BAR_GRAPH = "BAR_GRAPH"
const GraphConfiguration_SUB_TYPE_STACKED_BAR_GRAPH = "STACKED_BAR_GRAPH"

// Defines a graph
type GraphDefinition struct {
    // Describes the graph. It labels the entities of graph. If the label is not provided then it is not shown for a graph. For example, for a single graph, the title of widget can describe the graph and a label may not be necessary to be shown.
	Label *Label
    // Defines the points of a graph.
	PointDefinition *PointDefinition
    // Additional rendering or conditional evaluation of the field values to be performed, if any.
	RenderConfiguration []RenderConfiguration
}

// Represents configuration of a Grid or Table widget.
type GridConfiguration struct {
    // Array of columns of a Grid widget
	Columns []ColumnItem
    // Number of records per page. page_size will be effective only when the urls provided in the datasource support paging. format: int32
	PageSize *int64
    // Rows of grid or table are formed from the list of objects returned by a row list field.
	RowListFields []RowListField
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const GridConfiguration__TYPE_IDENTIFIER = "GridConfiguration"

// Group.
type Group struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The expression list must follow below criteria: 1. A non-empty expression list, must be of odd size. In a list, with indices starting from 0, all non-conjunction expressions must be at even indices, separated by a conjunction expression at odd indices. 2. The total of ConditionExpression and NestedExpression in a list should not exceed 5. 3. The total of IPAddressExpression, MACAddressExpression, external IDs in an ExternalIDExpression and paths in a PathExpression must not exceed 500. 4. Each expression must be a valid Expression. See the definition of the Expression type for more information.
	Expression []*data.StructValue
    // Extended Expression allows additional higher level context to be specified for grouping criteria. (e.g. user AD group) This field allow users to specified user context as the source of a firewall rule for IDFW feature. Current version only support a single IdentityGroupExpression. In the future, this might expand to support other conjunction and non-conjunction expression. The extended expression list must follow below criteria: 1. Contains a single IdentityGroupExpression. No conjunction expression is supported. 2. No other non-conjunction expression is supported, except for IdentityGroupExpression. 3. Each expression must be a valid Expression. See the definition of the Expression type for more information. 4. Extended expression are implicitly AND with expression. 5. No nesting can be supported if this value is used. 6. If a Group is using extended expression, this group must be the only member in the source field of an communication map.
	ExtendedExpression []*data.StructValue
    // If true, indicates that this is a remote reference group. Such group will have span different from the its parent domain. Default value is false.
	Reference *bool
    // Possible values are: 
    //
    // * Group#Group_STATE_IN_PROGRESS
    // * Group#Group_STATE_SUCCESS
    // * Group#Group_STATE_FAILURE
    //
    //  Realization state of this group
	State *string
}
const Group_STATE_IN_PROGRESS = "IN_PROGRESS"
const Group_STATE_SUCCESS = "SUCCESS"
const Group_STATE_FAILURE = "FAILURE"

// This entity will be used to establish association between discovery profile and Group. With this entity, user can specify intent for applying discovery profile profile to particular Group.
type GroupDiscoveryProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
    // Sequence number used to resolve conflicts betweeen two profiles applied on the same group. Lower sequence number takes higher precedence. Two binding maps applied to the same profile must have the same sequence number. User defined sequence numbers range from 1 through 100,000. System defined sequence numbers range from 100,001 through 200,000. format: int64
	SequenceNumber *int64
}

// Paged Collection of Groups
type GroupListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Group list results
	Results []Group
}

// List of same type members to either add or remove from a group.
type GroupMemberList struct {
    // This array contains group members of similar types.
	Members []string
}

// Collection of tags used in a policy group for a particular member type
type GroupMemberTagsList struct {
    // Member type for which we will list the tags
	MemberType *string
    // List of tags for the member type
	Tags []string
}

type GroupMemberTypeListResult struct {
    // Count of the member types in the results array format: int64
	ResultCount *int64
    // Possible values are: 
    //
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_VIRTUALMACHINE
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_VIRTUALNETWORKINTERFACE
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_SEGMENTPORT
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_SEGMENT
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_CLOUDNATIVESERVICEINSTANCE
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_IPADDRESS
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_MACADDRESS
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_IPSET
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_IDENTITYGROUP
    // * GroupMemberTypeListResult#GroupMemberTypeListResult_RESULTS_PHYSICALSERVER
    //
    //  Collection of member types for the given Group
	Results []string
}
const GroupMemberTypeListResult_RESULTS_VIRTUALMACHINE = "VirtualMachine"
const GroupMemberTypeListResult_RESULTS_VIRTUALNETWORKINTERFACE = "VirtualNetworkInterface"
const GroupMemberTypeListResult_RESULTS_SEGMENTPORT = "SegmentPort"
const GroupMemberTypeListResult_RESULTS_SEGMENT = "Segment"
const GroupMemberTypeListResult_RESULTS_CLOUDNATIVESERVICEINSTANCE = "CloudNativeServiceInstance"
const GroupMemberTypeListResult_RESULTS_IPADDRESS = "IPAddress"
const GroupMemberTypeListResult_RESULTS_MACADDRESS = "MACAddress"
const GroupMemberTypeListResult_RESULTS_IPSET = "IPSet"
const GroupMemberTypeListResult_RESULTS_IDENTITYGROUP = "IdentityGroup"
const GroupMemberTypeListResult_RESULTS_PHYSICALSERVER = "PhysicalServer"

// This entity will be used to establish association between monitoring profile and Group. Using this entity, you can specify intent for applying monitoring profile to particular Group. Group with membership criteria vm only supported as source group. Port mirroring is only supported on group with five vms.
type GroupMonitoringProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated IPFIX DFW Profile
	IpfixDfwProfilePath *string
    // PolicyPath of associated IPFIX L2 Profile
	IpfixL2ProfilePath *string
    // PolicyPath of associated Port Mirroring Profile
	PortMirroringProfilePath *string
}

// Paged collection of Group Monitoring Profile Binding Maps
type GroupMonitoringProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Group Monitoring Profile Binding Map list results
	Results []GroupMonitoringProfileBindingMap
}

// Collection of tags used in a policy group listed per member type
type GroupTagsList struct {
    // Collection of tags used in a policy group listed per member type
	Results []GroupMemberTagsList
}

// Guest virtual machine details include OS name and computer name of guest VM.
type GuestInfo struct {
    // Computer name of guest virtual machine, which is set inside guest OS. Currently this is supported for guests on ESXi that have VMware Tools installed.
	ComputerName *string
    // OS name of guest virtual machine. Currently this is supported for guests on ESXi that have VMware Tools installed.
	OsName *string
}

// Header of a widget that provides additional information. This will be shown at the container level. It includes details as label value pairs.
type Header struct {
    // If the condition is met then the header will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition *string
    // Possible values are: 
    //
    // * Header#Header_CONTENT_ALIGNMENT_LEFT
    // * Header#Header_CONTENT_ALIGNMENT_RIGHT
    //
    //  Alignment of header labels.
	ContentAlignment *string
    // An array of label-value properties.
	SubHeaders []PropertyItem
}
const Header_CONTENT_ALIGNMENT_LEFT = "LEFT"
const Header_CONTENT_ALIGNMENT_RIGHT = "RIGHT"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over HTTP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type HttpPolicyLbMonitorProfile struct {
    // For HTTP active healthchecks, the HTTP request url sent can be customized and can include query parameters.
	Url *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const HttpPolicyLbMonitorProfile__TYPE_IDENTIFIER = "HttpPolicyLbMonitorProfile"

// Virtual server acts as a facade to an application, receives all client connections over HTTP and distributes them among the backend servers.
type HttpPolicyLbVirtualServer struct {
    // Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address.
	InsertClientIpHeader *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled *bool
    // Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath *string
	TrafficSource *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const HttpPolicyLbVirtualServer__TYPE_IDENTIFIER = "HttpPolicyLbVirtualServer"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over HTTPS. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type HttpsPolicyLbMonitorProfile struct {
    // For HTTP active healthchecks, the HTTP request url sent can be customized and can include query parameters.
	Url *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
}

// Virtual server acts as a facade to an application, receives all client connections over HTTPS and distributes them among the backend servers.
type HttpsPolicyLbVirtualServer struct {
    // Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server. The setting is used when load balancer acts as an SSL server and terminating the client SSL connection
	ClientSslCertificateIds []string
    // Possible values are: 
    //
    // * HttpsPolicyLbVirtualServer#HttpsPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_BASE_SECURE_111317
    // * HttpsPolicyLbVirtualServer#HttpsPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_MODERATE_SECURE_111317
    // * HttpsPolicyLbVirtualServer#HttpsPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_HIGH_SECURE_111317
    //
    //  Security settings representing various security settings when the VirtualServer acts as an SSL server - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317
	ClientSslSettings *string
    // The setting is used when load balancer acts as an SSL server and terminating the client SSL connection. A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension.
	DefaultClientSslCertificateId *string
    // Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address.
	InsertClientIpHeader *bool
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled *bool
    // Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath *string
	TrafficSource *string
}
const HttpsPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_BASE_SECURE_111317 = "BASE_SECURE_111317"
const HttpsPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_MODERATE_SECURE_111317 = "MODERATE_SECURE_111317"
const HttpsPolicyLbVirtualServer_CLIENT_SSL_SETTINGS_HIGH_SECURE_111317 = "HIGH_SECURE_111317"

// A ServiceEntry that represents IPv4 or IPv6 ICMP protocol
type ICMPTypeServiceEntry struct {
    // ICMP message code format: int64
	IcmpCode *int64
    // ICMP message type format: int64
	IcmpType *int64
    // Possible values are: 
    //
    // * ICMPTypeServiceEntry#ICMPTypeServiceEntry_PROTOCOL_ICMPV4
    // * ICMPTypeServiceEntry#ICMPTypeServiceEntry_PROTOCOL_ICMPV6
	Protocol *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ICMPTypeServiceEntry__TYPE_IDENTIFIER = "ICMPTypeServiceEntry"
const ICMPTypeServiceEntry_PROTOCOL_ICMPV4 = "ICMPv4"
const ICMPTypeServiceEntry_PROTOCOL_ICMPV6 = "ICMPv6"

// A ServiceEntry that represents IGMP protocol
type IGMPTypeServiceEntry struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IGMPTypeServiceEntry__TYPE_IDENTIFIER = "IGMPTypeServiceEntry"

// Represents IP address expressions in the form of an array, to support addition of IP addresses in a group. Avoid creating groups with multiple IPAddressExpression. In future releases, group will be restricted to contain a single IPAddressExpression. To group IPAddresses, use nested groups instead of multiple IPAddressExpressions.
type IPAddressExpression struct {
    // This array can consist of a single IP address, IP address range or a subnet. Its type can be of either IPv4 or IPv6. Both IPv4 and IPv6 addresses within one expression is not allowed. Supported list of formats are, \"192.168.1.1\", \"192.168.1.1-192.168.1.100\", \"192.168.0.0/24\", \"fe80::250:56ff:fe83:318c\", \"fe80::250:56ff:fe83:3181-fe80::250:56ff:fe83:318c\", \"fe80::250:56ff:fe83:318c/64\". format: address-or-block-or-range
	IpAddresses []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IPAddressExpression__TYPE_IDENTIFIER = "IPAddressExpression"

// Collection of IP Addresses.
type IPAddressList struct {
    // The array contains IP addresses. format: address-or-block-or-range
	IpAddresses []string
}

// IP Address and Port information
type IPAddressPortPair struct {
    // The IPAddress to be combined with Port for defining specific access point. format: ip
	IpAddress *string
    // The port to be combined with IPAddress for defining a specific access point. format: int32
	Port *int64
}

// Using this profile to configure different options of IP Discovery
type IPDiscoveryProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // This property controls the ARP and ND cache timeout period. It is recommended that this property be greater than the ARP/ND cache timeout on the VM. format: int32
	ArpNdBindingTimeout *int64
    // Duplicate IP detection is used to determine if there is any IP conflict with any other port on the same logical switch. If a conflict is detected, then the IP is marked as a duplicate on the port where the IP was discovered last. The duplicate IP will not be added to the realized address binings for the port and hence will not be used in DFW rules or other security configurations for the port.rt.
	DuplicateIpDetection *DuplicateIPDetectionOptions
    // Indicates IPv4 Discovery options
	IpV4DiscoveryOptions *IPv4DiscoveryOptions
    // Indicates IPv6 Discovery options
	IpV6DiscoveryOptions *IPv6DiscoveryOptions
    // Indicates whether \"Trust on First Use(TOFU)\" paradigm is enabled.
	TofuEnabled *bool
}

// Paged collection of IP Discovery Profiles
type IPDiscoveryProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // IP Discovery profile list results
	Results []IPDiscoveryProfile
}

// IPFIX DFW data will be collected on collector Host IP and Port address should be provided for collector.
type IPFIXDFWCollector struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IP address for the IPFIX DFW collector. IP addresses such as 0.0.0.0, 127.0.0.1, 255.255.255.255 are invalid. format: ip
	CollectorIpAddress *string
    // Port for the IPFIX DFW collector. format: int32
	CollectorPort *int64
}

// IPFIX data for the NSX distributed firewall will be sent to the specified IPFIX collectors.
type IPFIXDFWCollectorProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // It accepts Multiple Collectors.
	IpfixDfwCollectors []IPFIXDFWCollector
}

// Paged Collection of IPFIX DFW Collector Profile
type IPFIXDFWCollectorProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // IPFIX DFW Collection Instances list results
	Results []IPFIXDFWCollectorProfile
}

// IPFIX packets from source will be sent to IPFIX DFW collector.
type IPFIXDFWProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // For long standing active flows, IPFIX records will be sent per timeout period in minutes. format: int32
	ActiveFlowExportTimeout *int64
    // Policy path for IPFIX collector profiles. IPFIX data from these logical segments will be sent to all specified IPFIX collectors.
	IpfixDfwCollectorProfilePath *string
    // An identifier that is unique to the exporting process and used to meter the flows. format: int32
	ObservationDomainId *int64
    // This priority field is used to resolve conflicts in Segment Ports which are covered by more than one IPFIX profiles. The IPFIX exporter will send records to Collectors in highest priority profile (lowest number) only. format: int32
	Priority *int64
}

// Paged Collection of IPFIX DFW Profile
type IPFIXDFWProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // IPFIX DFW Profile list results
	Results []IPFIXDFWProfile
}

// IPFIX packets will be collected on collector. IP and port address should be provided for collector.
type IPFIXL2Collector struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IP address for the IPFIX L2 collector. IP addresses such as 0.0.0.0, 127.0.0.1, 255.255.255.255 are invalid. format: ip
	CollectorIpAddress *string
    // Port number for the IPFIX L2 collector. format: int32
	CollectorPort *int64
}

// IPFIX L2 data will be collected on collectors.
type IPFIXL2CollectorProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // It accepts Multiple Collector objects.
	IpfixL2Collectors []IPFIXL2Collector
}

// Paged list of IPFIX collector profiles.
type IPFIXL2CollectorProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // IPFIX collector Profile list results
	Results []IPFIXL2CollectorProfile
}

// IPFIX data from source logical segment, port, group will be forwarded to IPFIX collector.
type IPFIXL2Profile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The time in seconds after a flow is expired even if more packets matching this flow are received by the cache. format: int32
	ActiveTimeout *int64
    // This property controls whether overlay flow info is included in the sample result.
	ExportOverlayFlow *bool
    // The time in seconds after a flow is expired if no more packets matching this flow are received by the cache. format: int32
	IdleTimeout *int64
    // Policy path for IPFIX collector profile. User can specify only one IPFIX collector.
	IpfixCollectorProfilePath *string
    // The maximum number of flow entries in each exporter flow cache. format: int64
	MaxFlows *int64
    // An identifier that is unique to the exporting process and used to meter the flows. format: int64
	ObservationDomainId *int64
    // The probability in percentage that a packet is sampled, in range 0-100. The probability is equal for every packet.
	PacketSampleProbability *float64
    // This priority field is used to resolve conflicts in Segment Ports which are covered by more than one IPFIX profiles. The IPFIX exporter will send records to Collectors in highest priority profile (lowest number) only. format: int32
	Priority *int64
}

// Paged Collection of IPFIX L2 Profile
type IPFIXL2ProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // IPFIX L2 Profile list results
	Results []IPFIXL2Profile
}

type IPInfo struct {
    // IPv4 Addresses format: ipv4
	IpAddresses []string
    // Subnet Prefix Length format: int64
	PrefixLength *int64
}

// A ServiceEntry that represents an IP protocol
type IPProtocolServiceEntry struct {
	ProtocolNumber *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IPProtocolServiceEntry__TYPE_IDENTIFIER = "IPProtocolServiceEntry"

// Dead peer detection (DPD) is a method that allows detection of unreachable internet key excahnge (IKE) peers. Any changes affects all IPSec VPN sessions consuming this profile.
type IPSecVpnDpdProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // DPD probe interval defines an interval for DPD probes (in seconds). - When the DPD probe mode is periodic, this interval is the number of seconds between DPD messages. - When the DPD probe mode is on-demand, this interval is the number of seconds during which traffic is not received from the peer before DPD retry messages are sent if there is IPSec traffic to send. For PERIODIC Mode: Minimum: 3 Maximum: 360 Default: 60 For ON_DEMAND Mode: Minimum: 1 Maximum: 10 Default: 3 format: int64
	DpdProbeInterval *int64
    // Possible values are: 
    //
    // * IPSecVpnDpdProfile#IPSecVpnDpdProfile_DPD_PROBE_MODE_PERIODIC
    // * IPSecVpnDpdProfile#IPSecVpnDpdProfile_DPD_PROBE_MODE_ON_DEMAND
    //
    //  DPD probe mode is used to query the liveliness of the peer. Two modes are possible: - PERIODIC: is used to query the liveliness of the peer at regular intervals (dpd_probe_interval). It does not take into consideration traffic coming from the peer. The benefit of this mode over the on-demand mode is earlier detection of dead peers. However, use of periodic DPD incurs extra overhead. When communicating to large numbers of peers, please consider using on-demand DPD instead. - ON_DEMAND: is used to query the liveliness of the peer by instructing the local endpoint to send DPD message to a peer if there is traffic to send to the peer AND the peer was idle for dpd_probe_interval seconds (i.e. there was no traffic from the peer for dpd_probe_interval seconds).
	DpdProbeMode *string
    // If true, enable dead peer detection.
	Enabled *bool
    // Maximum number of DPD messages' retry attempts. This value is applicable for both dpd probe modes, periodic and on-demand. format: int64
	RetryCount *int64
}
const IPSecVpnDpdProfile_DPD_PROBE_MODE_PERIODIC = "PERIODIC"
const IPSecVpnDpdProfile_DPD_PROBE_MODE_ON_DEMAND = "ON_DEMAND"

// IKE Profile is a reusable profile that captures IKE phase one negotiation parameters. Any changes affects all IPSec VPN sessions consuming this profile.
type IPSecVpnIkeProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP2
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP5
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP14
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP15
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP16
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP19
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP20
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DH_GROUPS_GROUP21
    //
    //  Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.
	DhGroups []string
    // Possible values are: 
    //
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA1
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA2_256
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA2_384
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA2_512
    //
    //  Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.
	DigestAlgorithms []string
    // Possible values are: 
    //
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_128
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_256
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_GCM_128
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_GCM_192
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_GCM_256
    //
    //  Encryption algorithm is used during Internet Key Exchange(IKE) negotiation. Default is AES_128.
	EncryptionAlgorithms []string
    // Possible values are: 
    //
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_IKE_VERSION_V1
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_IKE_VERSION_V2
    // * IPSecVpnIkeProfile#IPSecVpnIkeProfile_IKE_VERSION_FLEX
    //
    //  IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.
	IkeVersion *string
    // Life time for security association. Default is 86400 seconds (1 day). format: int64
	SaLifeTime *int64
}
const IPSecVpnIkeProfile_DH_GROUPS_GROUP2 = "GROUP2"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP5 = "GROUP5"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP14 = "GROUP14"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP15 = "GROUP15"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP16 = "GROUP16"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP19 = "GROUP19"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP20 = "GROUP20"
const IPSecVpnIkeProfile_DH_GROUPS_GROUP21 = "GROUP21"
const IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA1 = "SHA1"
const IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA2_256 = "SHA2_256"
const IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA2_384 = "SHA2_384"
const IPSecVpnIkeProfile_DIGEST_ALGORITHMS_SHA2_512 = "SHA2_512"
const IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_128 = "AES_128"
const IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_256 = "AES_256"
const IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_GCM_128 = "AES_GCM_128"
const IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_GCM_192 = "AES_GCM_192"
const IPSecVpnIkeProfile_ENCRYPTION_ALGORITHMS_GCM_256 = "AES_GCM_256"
const IPSecVpnIkeProfile_IKE_VERSION_V1 = "IKE_V1"
const IPSecVpnIkeProfile_IKE_VERSION_V2 = "IKE_V2"
const IPSecVpnIkeProfile_IKE_VERSION_FLEX = "IKE_FLEX"

// Local endpoint represents a tier-0/tier-1 on which tunnel needs to be terminated.
type IPSecVpnLocalEndpoint struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Policy path referencing site certificate.
	CertificatePath *string
    // IPV4 Address of local endpoint. format: ipv4
	LocalAddress *string
    // Local identifier.
	LocalId *string
    // List of policy paths referencing certificate authority (CA) to verify peer certificates.
	TrustCaPaths []string
    // List of policy paths referencing certificate revocation list (CRL) to peer certificates.
	TrustCrlPaths []string
}

// For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic that meets the policyâs match criteria.
type IPSecVpnRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * IPSecVpnRule#IPSecVpnRule_ACTION_PROTECT
    // * IPSecVpnRule#IPSecVpnRule_ACTION_BYPASS
    //
    //  PROTECT - Protect rules are defined per policy based IPSec VPN session. BYPASS - Bypass rules are defined per IPSec VPN service and affects all policy based IPSec VPN sessions. Bypass rules are prioritized over protect rules.
	Action *string
    // List of peer subnets. Specifying no value is interpreted as 0.0.0.0/0.
	Destinations []IPSecVpnSubnet
    // A flag to enable/disable the rule.
	Enabled *bool
    // A flag to enable/disable the logging for the rule.
	Logged *bool
    // A sequence number is used to give a priority to an IPSecVpnRule. format: int32
	SequenceNumber *int64
    // List of local subnets. Specifying no value is interpreted as 0.0.0.0/0.
	Sources []IPSecVpnSubnet
}
const IPSecVpnRule_ACTION_PROTECT = "PROTECT"
const IPSecVpnRule_ACTION_BYPASS = "BYPASS"

// Create and manage IPSec VPN service for given locale service.
type IPSecVpnService struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Bypass policy rules are configured using VPN service. Bypass rules always have higher priority over protect rules and they affect all policy based vpn sessions associated with the IPSec VPN service. Protect rules are defined per policy based vpn session.
	BypassRules []IPSecVpnRule
    // If true, enable VPN services for given locale service.
	Enabled *bool
    // Enable/disable IPSec HA state sync. IPSec HA state sync can be disabled if in case there are performance issues w.r.t. the state sync messages.
	HaSync *bool
    // Possible values are: 
    //
    // * IPSecVpnService#IPSecVpnService_IKE_LOG_LEVEL_DEBUG
    // * IPSecVpnService#IPSecVpnService_IKE_LOG_LEVEL_INFO
    // * IPSecVpnService#IPSecVpnService_IKE_LOG_LEVEL_WARN
    // * IPSecVpnService#IPSecVpnService_IKE_LOG_LEVEL_ERROR
    // * IPSecVpnService#IPSecVpnService_IKE_LOG_LEVEL_EMERGENCY
    //
    //  Log level for internet key exchange (IKE).
	IkeLogLevel *string
}
const IPSecVpnService_IKE_LOG_LEVEL_DEBUG = "DEBUG"
const IPSecVpnService_IKE_LOG_LEVEL_INFO = "INFO"
const IPSecVpnService_IKE_LOG_LEVEL_WARN = "WARN"
const IPSecVpnService_IKE_LOG_LEVEL_ERROR = "ERROR"
const IPSecVpnService_IKE_LOG_LEVEL_EMERGENCY = "EMERGENCY"

// VPN session defines connection between local and peer endpoint. Until VPN session is defined configuration is not realized.
type IPSecVpnSession struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_RESOURCE_TYPE_POLICYBASEDIPSECVPNSESSION
    // * IPSecVpnSession#IPSecVpnSession_RESOURCE_TYPE_ROUTEBASEDIPSECVPNSESSION
    //
    //  A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to remote site.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_AUTHENTICATION_MODE_PSK
    // * IPSecVpnSession#IPSecVpnSession_AUTHENTICATION_MODE_CERTIFICATE
    //
    //  Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a certificate defined at the global level is to be used for authentication.
	AuthenticationMode *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_CNSA
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_128
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_256
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_PRIME
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_FOUNDATION
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_FIPS
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_NONE
    //
    //  Compliance suite.
	ComplianceSuite *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_INITIATOR
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_RESPOND_ONLY
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_ON_DEMAND
    //
    //  Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.
	ConnectionInitiationMode *string
    // Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
	DpdProfilePath *string
    // Enable/Disable IPSec VPN session.
	Enabled *bool
    // Policy path referencing IKE profile to be used. Default is set according to system default profile.
	IkeProfilePath *string
    // Policy path referencing Local endpoint.
	LocalEndpointPath *string
    // Public IPV4 address of the remote device terminating the VPN connection.
	PeerAddress *string
    // Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
	PeerId *string
    // IPSec Pre-shared key. Maximum length of this field is 128 characters.
	Psk *string
    // TCP Maximum Segment Size Clamping Direction and Value.
	TcpMssClamping *TcpMaximumSegmentSizeClamping
    // Policy path referencing Tunnel profile to be used. Default is set to system default profile.
	TunnelProfilePath *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IPSecVpnSession__TYPE_IDENTIFIER = "IPSecVpnSession"
const IPSecVpnSession_RESOURCE_TYPE_POLICYBASEDIPSECVPNSESSION = "PolicyBasedIPSecVpnSession"
const IPSecVpnSession_RESOURCE_TYPE_ROUTEBASEDIPSECVPNSESSION = "RouteBasedIPSecVpnSession"
const IPSecVpnSession_AUTHENTICATION_MODE_PSK = "PSK"
const IPSecVpnSession_AUTHENTICATION_MODE_CERTIFICATE = "CERTIFICATE"
const IPSecVpnSession_COMPLIANCE_SUITE_CNSA = "CNSA"
const IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_128 = "SUITE_B_GCM_128"
const IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_256 = "SUITE_B_GCM_256"
const IPSecVpnSession_COMPLIANCE_SUITE_PRIME = "PRIME"
const IPSecVpnSession_COMPLIANCE_SUITE_FOUNDATION = "FOUNDATION"
const IPSecVpnSession_COMPLIANCE_SUITE_FIPS = "FIPS"
const IPSecVpnSession_COMPLIANCE_SUITE_NONE = "NONE"
const IPSecVpnSession_CONNECTION_INITIATION_MODE_INITIATOR = "INITIATOR"
const IPSecVpnSession_CONNECTION_INITIATION_MODE_RESPOND_ONLY = "RESPOND_ONLY"
const IPSecVpnSession_CONNECTION_INITIATION_MODE_ON_DEMAND = "ON_DEMAND"

// Used to specify the local/peer subnets in IPSec VPN rule.
type IPSecVpnSubnet struct {
    // Subnet used in policy rule. format: ipv4-cidr-block
	Subnet *string
}

// IP tunnel interface configuration.
type IPSecVpnTunnelInterface struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IP Tunnel interface (commonly referred as VTI) subnet.
	IpSubnets []TunnelInterfaceIPSubnet
}

// IPSec VPN tunnel profile is a reusable profile that captures phase two negotiation parameters and IPSec tunnel properties. Any changes affects all IPSec VPN sessions consuming this profile.
type IPSecVpnTunnelProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DF_POLICY_COPY
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DF_POLICY_CLEAR
    //
    //  Defragmentation policy helps to handle defragmentation bit present in the inner packet. COPY copies the defragmentation bit from the inner IP packet into the outer packet. CLEAR ignores the defragmentation bit present in the inner packet.
	DfPolicy *string
    // Possible values are: 
    //
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP2
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP5
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP14
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP15
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP16
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP19
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP20
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DH_GROUPS_GROUP21
    //
    //  Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.
	DhGroups []string
    // Possible values are: 
    //
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA1
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA2_256
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA2_384
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA2_512
    //
    //  Algorithm to be used for message digest. Default digest algorithm is implicitly covered by default encryption algorithm \"AES_GCM_128\".
	DigestAlgorithms []string
    // If true, perfect forward secrecy (PFS) is enabled.
	EnablePerfectForwardSecrecy *bool
    // Possible values are: 
    //
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_128
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_256
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_GCM_128
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_GCM_192
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_GCM_256
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION_AUTH_AES_GMAC_128
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION_AUTH_AES_GMAC_192
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION_AUTH_AES_GMAC_256
    // * IPSecVpnTunnelProfile#IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION
    //
    //  Encryption algorithm to encrypt/decrypt the messages exchanged between IPSec VPN initiator and responder during tunnel negotiation. Default is AES_GCM_128.
	EncryptionAlgorithms []string
    // Collection of type specific properties. As of now, to hold encapsulation mode and transform protocol.
	ExtendedAttributes []AttributeVal
    // SA life time specifies the expiry time of security association. Default is 3600 seconds. format: int64
	SaLifeTime *int64
}
const IPSecVpnTunnelProfile_DF_POLICY_COPY = "COPY"
const IPSecVpnTunnelProfile_DF_POLICY_CLEAR = "CLEAR"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP2 = "GROUP2"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP5 = "GROUP5"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP14 = "GROUP14"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP15 = "GROUP15"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP16 = "GROUP16"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP19 = "GROUP19"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP20 = "GROUP20"
const IPSecVpnTunnelProfile_DH_GROUPS_GROUP21 = "GROUP21"
const IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA1 = "SHA1"
const IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA2_256 = "SHA2_256"
const IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA2_384 = "SHA2_384"
const IPSecVpnTunnelProfile_DIGEST_ALGORITHMS_SHA2_512 = "SHA2_512"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_128 = "AES_128"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_256 = "AES_256"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_GCM_128 = "AES_GCM_128"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_GCM_192 = "AES_GCM_192"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_AES_GCM_256 = "AES_GCM_256"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION_AUTH_AES_GMAC_128 = "NO_ENCRYPTION_AUTH_AES_GMAC_128"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION_AUTH_AES_GMAC_192 = "NO_ENCRYPTION_AUTH_AES_GMAC_192"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION_AUTH_AES_GMAC_256 = "NO_ENCRYPTION_AUTH_AES_GMAC_256"
const IPSecVpnTunnelProfile_ENCRYPTION_ALGORITHMS_NO_ENCRYPTION = "NO_ENCRYPTION"

// Contains IPv4 related discovery options.
type IPv4DiscoveryOptions struct {
    // Indicates ARP snooping options
	ArpSnoopingConfig *ArpSnoopingConfig
    // Indicates whether DHCP snooping is enabled
	DhcpSnoopingEnabled *bool
    // Indicates whether fetching IP using vm-tools is enabled. This option is only supported on ESX where vm-tools is installed.
	VmtoolsEnabled *bool
}

// IPv6 DAD status
type IPv6DADStatus struct {
    // IP address on the port for which DAD status is reported. format: ip
	IpAddress *string
    // Possible values are: 
    //
    // * IPv6DADStatus#IPv6DADStatus_STATUS_DUPLICATED
    // * IPv6DADStatus#IPv6DADStatus_STATUS_TENTATIVE
    // * IPv6DADStatus#IPv6DADStatus_STATUS_ASSIGNED
    // * IPv6DADStatus#IPv6DADStatus_STATUS_NOT_APPLICABLE
    // * IPv6DADStatus#IPv6DADStatus_STATUS_UNKNOWN
    //
    //  DAD status for IP address on the port.
	Status *string
    // Array of transport node id on which DAD status is reported for given IP address.
	TransportNode []ResourceReference
}
const IPv6DADStatus_STATUS_DUPLICATED = "DUPLICATED"
const IPv6DADStatus_STATUS_TENTATIVE = "TENTATIVE"
const IPv6DADStatus_STATUS_ASSIGNED = "ASSIGNED"
const IPv6DADStatus_STATUS_NOT_APPLICABLE = "NOT_APPLICABLE"
const IPv6DADStatus_STATUS_UNKNOWN = "UNKNOWN"

// Contains IPv6 related discovery options.
type IPv6DiscoveryOptions struct {
    // Enable this method will snoop the DHCPv6 message transaction which a VM makes with a DHCPv6 server. From the transaction, we learn the IPv6 addresses assigned by the DHCPv6 server to this VM along with its lease time.
	DhcpSnoopingV6Enabled *bool
    // Indicates ND snooping options
	NdSnoopingConfig *NdSnoopingConfig
    // Enable this method will learn the IPv6 addresses which are configured on interfaces of a VM with the help of the VMTools software.
	VmtoolsV6Enabled *bool
}

// IPv6 status
type IPv6Status struct {
    // Path of the segment attached to the interface.
	ConnectedSegmentPath *string
    // Array of DAD status which contains DAD information for IP addresses on the interface.
	DadStatuses []IPv6DADStatus
    // Policy path or realization ID of interface for which IPv6 DAD status is returned.
	InterfaceId *string
}

type IcmpEchoRequestHeader struct {
    // ICMP id format: int64
	Id *int64
    // ICMP sequence number format: int64
	Sequence *int64
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over ICMP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healt hchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type IcmpPolicyLbMonitorProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IcmpPolicyLbMonitorProfile__TYPE_IDENTIFIER = "IcmpPolicyLbMonitorProfile"

// Icon to be applied at dashboard for widgets and UI elements.
type Icon struct {
    // Possible values are: 
    //
    // * Icon#Icon_PLACEMENT_PRE
    // * Icon#Icon_PLACEMENT_POST
    //
    //  If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.
	Placement *string
    // Multi-line text to be shown on tooltip while hovering over the icon.
	Tooltip []Tooltip
    // Possible values are: 
    //
    // * Icon#Icon_TYPE_ERROR
    // * Icon#Icon_TYPE_WARNING
    // * Icon#Icon_TYPE_INFO
    // * Icon#Icon_TYPE_INPROGRESS
    // * Icon#Icon_TYPE_SUCCESS
    // * Icon#Icon_TYPE_DETAIL
    // * Icon#Icon_TYPE_NOT_AVAILABLE
    // * Icon#Icon_TYPE_SECURITY
    // * Icon#Icon_TYPE_NETWORKING
    // * Icon#Icon_TYPE_LOAD_BALANCER
    // * Icon#Icon_TYPE_VPN
    // * Icon#Icon_TYPE_DOMAIN
    // * Icon#Icon_TYPE_GROUP
    // * Icon#Icon_TYPE_DISTRIBUTED_FIREWALL
    // * Icon#Icon_TYPE_NETWORKING_TIER0
    // * Icon#Icon_TYPE_NETWORKING_TIER1
    // * Icon#Icon_TYPE_SEGMENT
    // * Icon#Icon_TYPE_SYSTEM
    // * Icon#Icon_TYPE_SYSTEM_FABRIC
    // * Icon#Icon_TYPE_SYSTEM_BACKUPRESTORE
    // * Icon#Icon_TYPE_INVENTORY_GROUPS
    // * Icon#Icon_TYPE_SECURITY_DFW
    //
    //  Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.
	Type_ *string
}
const Icon_PLACEMENT_PRE = "PRE"
const Icon_PLACEMENT_POST = "POST"
const Icon_TYPE_ERROR = "ERROR"
const Icon_TYPE_WARNING = "WARNING"
const Icon_TYPE_INFO = "INFO"
const Icon_TYPE_INPROGRESS = "INPROGRESS"
const Icon_TYPE_SUCCESS = "SUCCESS"
const Icon_TYPE_DETAIL = "DETAIL"
const Icon_TYPE_NOT_AVAILABLE = "NOT_AVAILABLE"
const Icon_TYPE_SECURITY = "SECURITY"
const Icon_TYPE_NETWORKING = "NETWORKING"
const Icon_TYPE_LOAD_BALANCER = "LOAD_BALANCER"
const Icon_TYPE_VPN = "VPN"
const Icon_TYPE_DOMAIN = "DOMAIN"
const Icon_TYPE_GROUP = "GROUP"
const Icon_TYPE_DISTRIBUTED_FIREWALL = "DISTRIBUTED_FIREWALL"
const Icon_TYPE_NETWORKING_TIER0 = "NETWORKING_TIER0"
const Icon_TYPE_NETWORKING_TIER1 = "NETWORKING_TIER1"
const Icon_TYPE_SEGMENT = "SEGMENT"
const Icon_TYPE_SYSTEM = "SYSTEM"
const Icon_TYPE_SYSTEM_FABRIC = "SYSTEM_FABRIC"
const Icon_TYPE_SYSTEM_BACKUPRESTORE = "SYSTEM_BACKUPRESTORE"
const Icon_TYPE_INVENTORY_GROUPS = "INVENTORY_GROUPS"
const Icon_TYPE_SECURITY_DFW = "SECURITY_DFW"

// Represents a list of identity group (Ad group SID) expressions.
type IdentityGroupExpression struct {
    // This array consists of set of identity group object. All members within this array are implicitly OR'ed together.
	IdentityGroups []IdentityGroupInfo
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IdentityGroupExpression__TYPE_IDENTIFIER = "IdentityGroupExpression"

// Identity (Directory) group
type IdentityGroupInfo struct {
    // Each LDAP object is uniquely identified by its distinguished name (DN). A DN is a sequence of relative distinguished names (RDN) connected by commas. e.g. CN=Larry Cole,CN=admin,DC=corp,DC=acme,DC=com. A valid fully qualified distinguished name should be provided to include specific groups else the create / update realization of the Group containing an invalid/ partial DN will fail. This value is valid only if it matches to exactly 1 LDAP object on the LDAP server.
	DistinguishedName *string
    // This is the base distinguished name for the domain where this particular group resides. (e.g. dc=example,dc=com) Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.
	DomainBaseDistinguishedName *string
    // A security identifier (SID) is a unique value of variable length used to identify a trustee. A SID consists of the following components: The revision level of the SID structure; A 48-bit identifier authority value that identifies the authority that issued the SID; A variable number of subauthority or relative identifier (RID) values that uniquely identify the trustee relative to the authority that issued the SID. This field is only populated for Microsoft Active Directory identity store.
	Sid *string
}

// Information about a single LDAP server.
type IdentitySourceLdapServer struct {
    // A username used to authenticate to the directory when admnistering roles in NSX. This user should have privileges to search the LDAP directory for groups and users. This user is also used in some cases (OpenLDAP) to look up an NSX user's distinguished name based on their NSX login name. If omitted, NSX will authenticate to the LDAP server using an LDAP anonymous bind operation. For Active Directory, provide a userPrincipalName (e.g. administrator\\\\@airius.com) or the full distinguished nane. For OpenLDAP, provide the distinguished name of the user (e.g. uid=admin, cn=airius, dc=com).
	BindIdentity *string
    // If using LDAPS or STARTTLS, provide the X.509 certificate of the LDAP server in PEM format. This property is not required when connecting without TLS encryption and is ignored in that case.
	Certificates []string
    // Allows the LDAP server to be enabled or disabled. When disabled, this LDAP server will not be used to authenticate users.
	Enabled *bool
    // A password used when authenticating to the directory.
	Password *string
    // The URL for the LDAP server. Supported URL schemes are LDAP and LDAPS. Either a hostname or an IP address may be given, and the port number is optional and defaults to 389 for the LDAP scheme and 636 for the LDAPS scheme.
	Url *string
    // If set to true, Use the StartTLS extended operation to upgrade the connection to TLS before sending any sensitive information. The LDAP server must support the StartTLS extended operation in order for this protocol to operate correctly. This option is ignored if the URL scheme is LDAPS.
	UseStarttls *bool
}

// Information about a single LDAP server endpoint.
type IdentitySourceLdapServerEndpoint struct {
    // The URL for the LDAP server. Supported URL schemes are LDAP and LDAPS. Either a hostname or an IP address may be given, and the port number is optional and defaults to 389 for the LDAP scheme and 636 for the LDAPS scheme.
	Url *string
    // If set to true, Use the StartTLS extended operation to upgrade the connection to TLS before sending any sensitive information. The LDAP server must support the StartTLS extended operation in order for this protocol to operate correctly. This option is ignored if the URL scheme is LDAPS.
	UseStarttls *bool
}

// The results of probing an individual LDAP server.
type IdentitySourceLdapServerProbeResult struct {
    // Detail about errors encountered during the probe.
	Errors []LdapProbeError
    // Possible values are: 
    //
    // * IdentitySourceLdapServerProbeResult#IdentitySourceLdapServerProbeResult_RESULT_SUCCESS
    // * IdentitySourceLdapServerProbeResult#IdentitySourceLdapServerProbeResult_RESULT_FAILURE
    //
    //  Overall result of the probe. If the probe was able to connect to the LDAP service, authenticate using the provided credentials, and perform searches of the configured user and group search bases without error, the result is SUCCESS. Otherwise, the result is FAILURE, and additional details may be found in the errors property.
	Result *string
    // THe URL of the probed LDAP host.
	Url *string
}
const IdentitySourceLdapServerProbeResult_RESULT_SUCCESS = "SUCCESS"
const IdentitySourceLdapServerProbeResult_RESULT_FAILURE = "FAILURE"

// IDS configuration to enable/disable IDS on cluster level.
type IdsClusterConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Contains policy resource reference object
	Cluster *PolicyResourceReference
    // If set to true, IDS is enabled on the respective cluster
	IdsEnabled *bool
}

// IDS Profile which contains the signatures and will be used in IDS rules.
type IdsProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Represents the severities of signatures which are part of this profile.
	Severities []IdsProfileSeverity
}

// Intrusion Detection System Profile severity.
type IdsProfileSeverity struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Contains the id of signatures that will be ignored as part of the profile.
	IgnoreSignatures []string
    // Possible values are: 
    //
    // * IdsProfileSeverity#IdsProfileSeverity_SEVERITY_CRITICAL
    // * IdsProfileSeverity#IdsProfileSeverity_SEVERITY_HIGH
    // * IdsProfileSeverity#IdsProfileSeverity_SEVERITY_MEDIUM
    // * IdsProfileSeverity#IdsProfileSeverity_SEVERITY_LOW
    //
    //  Represents the severity of a profile.
	Severity *string
}
const IdsProfileSeverity_SEVERITY_CRITICAL = "CRITICAL"
const IdsProfileSeverity_SEVERITY_HIGH = "HIGH"
const IdsProfileSeverity_SEVERITY_MEDIUM = "MEDIUM"
const IdsProfileSeverity_SEVERITY_LOW = "LOW"

// Represents the Intrusion Detection System rule which indicates the action to be performed for the corresponding workload groups.
type IdsRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded *bool
    // Possible values are: 
    //
    // * IdsRule#IdsRule_DIRECTION_IN
    // * IdsRule#IdsRule_DIRECTION_OUT
    // * IdsRule#IdsRule_DIRECTION_IN_OUT
    //
    //  Define direction of traffic.
	Direction *string
    // Flag to disable the rule. Default is enabled.
	Disabled *bool
    // Possible values are: 
    //
    // * IdsRule#IdsRule_IP_PROTOCOL_IPV4
    // * IdsRule#IdsRule_IP_PROTOCOL_IPV6
    // * IdsRule#IdsRule_IP_PROTOCOL_IPV4_IPV6
    //
    //  Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol *string
    // A flag to indicate whether rule is a default rule.
	IsDefault *bool
    // Flag to enable packet logging. Default is disabled.
	Logged *bool
    // Text for additional notes on changes.
	Notes *string
    // Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string
    // This is a unique 4 byte positive number that is assigned by the system. This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on. format: int64
	RuleId *int64
    // The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string
    // This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []*data.StructValue
    // In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded *bool
    // User level field which will be printed in CLI and packet logs.
	Tag *string
    // Possible values are: 
    //
    // * IdsRule#IdsRule_ACTION_DETECT
    //
    //  The action to be applied.
	Action *string
    // collections of IDS profiles.
	IdsProfiles []string
}
const IdsRule_DIRECTION_IN = "IN"
const IdsRule_DIRECTION_OUT = "OUT"
const IdsRule_DIRECTION_IN_OUT = "IN_OUT"
const IdsRule_IP_PROTOCOL_IPV4 = "IPV4"
const IdsRule_IP_PROTOCOL_IPV6 = "IPV6"
const IdsRule_IP_PROTOCOL_IPV4_IPV6 = "IPV4_IPV6"
const IdsRule_ACTION_DETECT = "DETECT"

// Represents the Intrusion Detection System Security Policy, which contains the list of IDS Rules.
type IdsSecurityPolicy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category *string
    // Comments for security policy lock/unlock.
	Comments *string
    // This field is to indicate the internal sequence number of a policy with respect to the policies across categories. format: int32
	InternalSequenceNumber *int64
    // A flag to indicate whether policy is a default policy.
	IsDefault *bool
    // ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy *string
    // SecurityPolicy locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked *bool
    // The count of rules in the policy. format: int32
	RuleCount *int64
    // Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath *string
    // The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string
    // This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful *bool
    // Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict *bool
    // IDS Rules that are a part of this SecurityPolicy
	Rules []IdsRule
}

// Intrusion Detection System Signature .
type IdsSignature struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Target of the signature.
	AttackTarget *string
    // Possible values are: 
    //
    // * IdsSignature#IdsSignature_CATEGORIES_APPLICATION
    // * IdsSignature#IdsSignature_CATEGORIES_MALWARE
    // * IdsSignature#IdsSignature_CATEGORIES_VULNERABILITY
    //
    //  Represents the internal categories a signature belongs to.
	Categories []string
    // Class type of Signature.
	ClassType *string
    // CVE score
	Cves []string
    // Signature cvssv2 score.
	Cvssv2 *string
    // Signature cvssv3 score.
	Cvssv3 *string
    // Flow established from server, from client etc.
	Flow *string
    // Signature name.
	Name *string
    // Product affected by this signature.
	ProductAffected *string
    // Represents the severity of the Signature.
	Severity *string
    // Represents the Signature's id.
	SignatureId *string
    // Represents revision of the Signature.
	SignatureRevision *string
    // List of mitre attack URLs pertaining to signature
	Urls []string
}
const IdsSignature_CATEGORIES_APPLICATION = "APPLICATION"
const IdsSignature_CATEGORIES_MALWARE = "MALWARE"
const IdsSignature_CATEGORIES_VULNERABILITY = "VULNERABILITY"

// IDS configuration to enable/disable IDS on standalone host level.
type IdsStandaloneHostConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If set to true, IDS is enabled on standalone hosts.
	IdsEnabled *bool
}

// A list of fields to include in query results
type IncludedFieldsParameters struct {
    // Comma separated list of fields that should be included in query result
	IncludedFields *string
}

// Infra space related policy.
type Infra struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * Infra#Infra_CONNECTIVITY_STRATEGY_WHITELIST
    // * Infra#Infra_CONNECTIVITY_STRATEGY_BLACKLIST
    // * Infra#Infra_CONNECTIVITY_STRATEGY_WHITELIST_ENABLE_LOGGING
    // * Infra#Infra_CONNECTIVITY_STRATEGY_BLACKLIST_ENABLE_LOGGING
    // * Infra#Infra_CONNECTIVITY_STRATEGY_NONE
    //
    //  The connectivity strategy is deprecated. Use default layer3 rule, /infra/domains/default/security-policies/default-layer3-security-policy/rules/default-layer3-rule. This field indicates the default connectivity policy for the infra or tenant space WHITELIST - Adds a default drop rule. Administrator can then use \"allow\" rules (aka whitelist) to allow traffic between groups BLACKLIST - Adds a default allow rule. Admin can then use \"drop\" rules (aka blacklist) to block traffic between groups WHITELIST_ENABLE_LOGGING - Whitelising with logging enabled BLACKLIST_ENABLE_LOGGING - Blacklisting with logging enabled NONE - No default rules are added.
	ConnectivityStrategy *string
    // This field is used while creating or updating the infra space.
	Domains []Domain
}
const Infra_CONNECTIVITY_STRATEGY_WHITELIST = "WHITELIST"
const Infra_CONNECTIVITY_STRATEGY_BLACKLIST = "BLACKLIST"
const Infra_CONNECTIVITY_STRATEGY_WHITELIST_ENABLE_LOGGING = "WHITELIST_ENABLE_LOGGING"
const Infra_CONNECTIVITY_STRATEGY_BLACKLIST_ENABLE_LOGGING = "BLACKLIST_ENABLE_LOGGING"
const Infra_CONNECTIVITY_STRATEGY_NONE = "NONE"

// A shaper that specifies ingress rate properties in kb/s
type IngressBroadcastRateLimiter struct {
    // Average bandwidth in kb/s format: int32
	AverageBandwidth *int64
    // Burst size in bytes format: int32
	BurstSize *int64
    // Peak bandwidth in kb/s format: int32
	PeakBandwidth *int64
	Enabled *bool
    // Possible values are: 
    //
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSBROADCASTRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_EGRESSRATELIMITER
    //
    //  Type rate limiter
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IngressBroadcastRateLimiter__TYPE_IDENTIFIER = "IngressBroadcastRateLimiter"

// A shaper that specifies ingress rate properties in Mb/s
type IngressRateLimiter struct {
    // You can use the average bandwidth to reduce network congestion. format: int32
	AverageBandwidth *int64
    // The burst duration is set in the burst size setting. format: int32
	BurstSize *int64
    // The peak bandwidth rate is used to support burst traffic. format: int32
	PeakBandwidth *int64
	Enabled *bool
    // Possible values are: 
    //
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSBROADCASTRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_EGRESSRATELIMITER
    //
    //  Type rate limiter
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IngressRateLimiter__TYPE_IDENTIFIER = "IngressRateLimiter"

type InitiateClusterRestoreRequest struct {
    // IP address or FQDN of the node from which the backup was taken format: hostname-or-ip
	IpAddress *string
    // Unique id of the backed-up configuration from which the appliance will be restored
	NodeId *string
    // Timestamp of the backed-up configuration from which the appliance will be restored format: int64
	Timestamp *int64
}

// Injection holding a key and a corresponding value.
type Injection struct {
    // Injection key.
	Key *string
    // Injection value.
	Value *data.StructValue
}

// Injection Value.
type InjectionValue struct {
    // Possible values are: 
    //
    // * InjectionValue#InjectionValue_RESOURCE_TYPE_UNARYOPERATIONBASEDINJECTIONVALUE
    //
    //  Injection Value resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const InjectionValue__TYPE_IDENTIFIER = "InjectionValue"
const InjectionValue_RESOURCE_TYPE_UNARYOPERATIONBASEDINJECTIONVALUE = "UnaryOperationBasedInjectionValue"

// Details of the instructions displayed during restore process
type InstructionInfo struct {
    // A list of actions that are to be applied to resources
	Actions []string
    // A list of fields that are displayable to users in a table
	Fields []string
    // UUID of the instruction
	Id *string
    // Instruction name
	Name *string
}

// Request parameters that represents a an intent path.
type IntentRuntimeRequestParameters struct {
    // Policy Path referencing an intent object.
	IntentPath *string
    // Policy Path referencing a site. This is applicable only on a GlobalManager. If no site_path is specified, then based on the span of the intent the response will be fetched from the respective sites
	SitePath *string
}

type InterfaceArpCsvRecord struct {
    // The IP address format: ip
	Ip *string
    // The MAC address
	MacAddress *string
}

type InterfaceArpEntry struct {
    // The IP address format: ip
	Ip *string
    // The MAC address
	MacAddress *string
}

type InterfaceArpTable struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Policy path of edge node.
	EdgePath *string
    // String Path of the enforcement point.
	EnforcementPointPath *string
    // The ID of the logical router port
	InterfacePath *string
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Results []InterfaceArpEntry
}

type InterfaceArpTableInCsvFormat struct {
    // File name set by HTTP server if API returns CSV result as a file.
	FileName *string
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Results []InterfaceArpCsvRecord
}

// Duplicate address detection status on the interface.
type InterfaceDADState struct {
    // Array of DAD status which contains DAD information for IP addresses on the interface.
	DadStatuses []InterfaceiPv6DADStatus
    // Policy path or realization ID of interface for which IPv6 DAD status is returned.
	InterfacePath *string
}

// Duplicate address detection status for IP address on the interface.
type InterfaceiPv6DADStatus struct {
    // Array of edge nodes on which DAD status is reported for given IP address.
	EdgePaths []string
    // IP address on the port for which DAD status is reported. format: ip
	IpAddress *string
    // Possible values are: 
    //
    // * InterfaceiPv6DADStatus#InterfaceiPv6DADStatus_STATUS_DUPLICATED
    // * InterfaceiPv6DADStatus#InterfaceiPv6DADStatus_STATUS_TENTATIVE
    // * InterfaceiPv6DADStatus#InterfaceiPv6DADStatus_STATUS_ASSIGNED
    // * InterfaceiPv6DADStatus#InterfaceiPv6DADStatus_STATUS_NOT_APPLICABLE
    // * InterfaceiPv6DADStatus#InterfaceiPv6DADStatus_STATUS_UNKNOWN
    //
    //  DAD status for IP address on the port.
	Status *string
}
const InterfaceiPv6DADStatus_STATUS_DUPLICATED = "DUPLICATED"
const InterfaceiPv6DADStatus_STATUS_TENTATIVE = "TENTATIVE"
const InterfaceiPv6DADStatus_STATUS_ASSIGNED = "ASSIGNED"
const InterfaceiPv6DADStatus_STATUS_NOT_APPLICABLE = "NOT_APPLICABLE"
const InterfaceiPv6DADStatus_STATUS_UNKNOWN = "UNKNOWN"

// Subnet specification for interface connectivity
type InterfaceSubnet struct {
    // IP addresses assigned to interface format: ip
	IpAddresses []string
    // Subnet prefix length format: int32
	PrefixLen *int64
}

// Intersite gateway configuration.
type IntersiteGatewayConfig struct {
    // Fallback site to be used as new primary site on current primary site failure. Disaster recovery must be initiated via API/UI. Fallback site configuration is supported only for T0 gateway. T1 gateway will follow T0 gateway's primary site during disaster recovery.
	FallbackSites []string
    // IPv4 subnet for inter-site transit segment connecting service routers across sites for stretched gateway. For IPv6 link local subnet is auto configured. format: ip-cidr-block
	IntersiteTransitSubnet *string
    // Epoch(in seconds) is auto updated based on system current timestamp when primary locale service is updated. It is used for resolving conflict during site failover. If system clock not in sync then User can optionally override this. New value must be higher than the current value. format: int64
	LastAdminActiveEpoch *int64
    // Primary egress site for gateway. T0/T1 gateway in Active/Standby mode supports stateful services on primary site. In this mode primary site must be set if gateway is stretched to more than one site. For T0 gateway in Active/Active primary site is optional field. If set then secondary site prefers routes learned from primary over locally learned routes. This field is not applicable for T1 gateway with no services.
	PrimarySitePath *string
}

// Schedule to specify the interval time at which automated backups need to be taken
type IntervalBackupSchedule struct {
    // Time interval in seconds between two consecutive automated backups format: int64
	SecondsBetweenBackups *int64
    // Possible values are: 
    //
    // * BackupSchedule#BackupSchedule_RESOURCE_TYPE_WEEKLYBACKUPSCHEDULE
    // * BackupSchedule#BackupSchedule_RESOURCE_TYPE_INTERVALBACKUPSCHEDULE
    //
    //  Schedule type
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IntervalBackupSchedule__TYPE_IDENTIFIER = "IntervalBackupSchedule"

// Allocation parameters for the IP address (e.g. specific IP address) can be specified. Tags, display_name and description attributes are not supported in this release.
type IpAddressAllocation struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Address that is allocated from pool format: ip
	AllocationIp *string
}

// A block of IP addresses defined by a start address and a mask/prefix (network CIDR). An IP block is typically large & allocated to a tenant for automated consumption. An IP block is always a contiguous address space, for example 192.0.0.1/8. An IP block can be further subdivided into subnets called IP block subnets. These IP block subnets can be added to IP pools and used for IP allocation.
type IpAddressBlock struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Represents a network address and the prefix length which will be associated with a layer-2 broadcast domain. Support IPv4 and IPv6 CIDR. format: ip-cidr-block
	Cidr *string
}

// Ipaddress information of the fabric node.
type IpAddressInfo struct {
    // IP Addresses of the the virtual network interface, as discovered in the source. format: ip
	IpAddresses []string
    // Possible values are: 
    //
    // * IpAddressInfo#IpAddressInfo_SOURCE_TOOLS
    //
    //  Source of the ipaddress information.
	Source *string
}
const IpAddressInfo_SOURCE_TOOLS = "VM_TOOLS"

// IpAddressPool is a collection of subnets. The subnets can either be derived from an IpBlock or specified by the user. User can request for IP addresses to be allocated from a pool. When an IP is requested from a pool, the IP that is returned can come from any subnet that belongs to the pool.
type IpAddressPool struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Delay in milliseconds, while releasing allocated IP address from IP pool (Default is 2 mins). format: int64
	IpReleaseDelay *int64
}

// This type of subnet allows user to dynamically carve a subnet out of a preconfigured IpAddressBlock. The user must specify the size of the subnet and the IpAddressBlock from which the subnet is to be derived. If the required amount of IP adress space is available in the specified IpAddressBlock, the system automatically configures subnet range.
type IpAddressPoolBlockSubnet struct {
    // If this property is set to true, the first IP in the range will be reserved for gateway.
	AutoAssignGateway *bool
    // The path of the IpAddressBlock from which the subnet is to be created.
	IpBlockPath *string
    // The size parameter is required for subnet creation. It must be specified during creation but cannot be changed later. format: int64
	Size *int64
    // For internal system use Only. Represents start ip address of the subnet from IP block. Subnet ip adddress will start from this ip address. format: ip
	StartIp *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * IpAddressPoolSubnet#IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLBLOCKSUBNET
    // * IpAddressPoolSubnet#IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLSTATICSUBNET
    //
    //  Specifies whether the IpAddressPoolSubnet is to be carved out of a IpAddressBlock or will be specified by the user
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IpAddressPoolBlockSubnet__TYPE_IDENTIFIER = "IpAddressPoolBlockSubnet"

// This type of subnet is statically configured by the user. The user provides the range details and the gateway for the subnet.
type IpAddressPoolStaticSubnet struct {
    // A collection of IPv4 or IPv6 IP Pool Ranges.
	AllocationRanges []IpPoolRange
    // Subnet representation is a network address and prefix length
	Cidr *string
    // The collection of upto 3 DNS servers for the subnet. format: ip
	DnsNameservers []string
    // The DNS suffix for the DNS server. format: hostname
	DnsSuffix *string
    // The default gateway address on a layer-3 router. format: ip
	GatewayIp *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * IpAddressPoolSubnet#IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLBLOCKSUBNET
    // * IpAddressPoolSubnet#IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLSTATICSUBNET
    //
    //  Specifies whether the IpAddressPoolSubnet is to be carved out of a IpAddressBlock or will be specified by the user
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IpAddressPoolStaticSubnet__TYPE_IDENTIFIER = "IpAddressPoolStaticSubnet"

// IpAddressPoolSubnet can either be carved out of a PolicyBlock or statically specified by the user. In the first case where the subnet is carved out of a IpAddressBlock, the user must specify the ID of the block from which this subnet is to be derived. This block must be pre-created. The subnet range is auto populated by the system. In the second case, the user configures the subnet range directly. No IpAddressBlock is required.
type IpAddressPoolSubnet struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * IpAddressPoolSubnet#IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLBLOCKSUBNET
    // * IpAddressPoolSubnet#IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLSTATICSUBNET
    //
    //  Specifies whether the IpAddressPoolSubnet is to be carved out of a IpAddressBlock or will be specified by the user
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const IpAddressPoolSubnet__TYPE_IDENTIFIER = "IpAddressPoolSubnet"
const IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLBLOCKSUBNET = "IpAddressPoolBlockSubnet"
const IpAddressPoolSubnet_RESOURCE_TYPE_IPADDRESSPOOLSTATICSUBNET = "IpAddressPoolStaticSubnet"

// A set of IPv4 or IPv6 addresses defined by a start and end address.
type IpPoolRange struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The end IP Address of the IP Range. format: ip
	End *string
    // The start IP Address of the IP Range. format: ip
	Start *string
}

type Ipv4Header struct {
    // The destination ip address. format: ipv4
	DstIp *string
    // IP flags format: int64
	Flags *int64
    // IP protocol - defaults to ICMP format: int64
	Protocol *int64
    // The source ip address. format: ipv4
	SrcIp *string
    // This is used together with src_ip to calculate dst_ip for broadcast when dst_ip is not given; not used in all other cases. format: int64
	SrcSubnetPrefixLen *int64
    // Time to live (ttl) format: int64
	Ttl *int64
}

// Duplicate address detection profile.
type Ipv6DadProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * Ipv6DadProfile#Ipv6DadProfile_DAD_MODE_LOOSE
    // * Ipv6DadProfile#Ipv6DadProfile_DAD_MODE_STRICT
    //
    //  DAD Mode
	DadMode *string
    // Number of Neighbor solicitation packets generated before completing the Duplicate address detection process. format: int64
	NsRetries *int64
    // The time duration in seconds, to wait for Neighbor advertisement after sending the Neighbor solicitation message. format: int64
	WaitTime *int64
}
const Ipv6DadProfile_DAD_MODE_LOOSE = "LOOSE"
const Ipv6DadProfile_DAD_MODE_STRICT = "STRICT"

type Ipv6DadProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paginated list of Ipv6DadProfile
	Results []Ipv6DadProfile
}

type Ipv6Header struct {
    // The destination ip address. format: ipv6
	DstIp *string
    // Decremented by 1 by each node that forwards the packets. The packet is discarded if Hop Limit is decremented to zero. format: int64
	HopLimit *int64
    // Identifies the type of header immediately following the IPv6 header. format: int64
	NextHeader *int64
    // The source ip address. format: ipv6
	SrcIp *string
}

type Ipv6NdraProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // DNS Configurations
	DnsConfig *RaDNSConfig
    // RA Configuration
	RaConfig *RAConfig
    // Possible values are: 
    //
    // * Ipv6NdraProfile#Ipv6NdraProfile_RA_MODE_DISABLED
    // * Ipv6NdraProfile#Ipv6NdraProfile_RA_MODE_SLAAC_DNS_THROUGH_RA
    // * Ipv6NdraProfile#Ipv6NdraProfile_RA_MODE_SLAAC_DNS_THROUGH_DHCP
    // * Ipv6NdraProfile#Ipv6NdraProfile_RA_MODE_DHCP_ADDRESS_AND_DNS_THROUGH_DHCP
    // * Ipv6NdraProfile#Ipv6NdraProfile_RA_MODE_SLAAC_AND_ADDRESS_DNS_THROUGH_DHCP
    //
    //  RA Mode
	RaMode *string
    // Neighbour reachable time duration in milliseconds. A value of 0 means unspecified. format: int64
	ReachableTimer *int64
    // The time, in milliseconds, between retransmitted neighbour solicitation messages. A value of 0 means unspecified. format: int64
	RetransmitInterval *int64
}
const Ipv6NdraProfile_RA_MODE_DISABLED = "DISABLED"
const Ipv6NdraProfile_RA_MODE_SLAAC_DNS_THROUGH_RA = "SLAAC_DNS_THROUGH_RA"
const Ipv6NdraProfile_RA_MODE_SLAAC_DNS_THROUGH_DHCP = "SLAAC_DNS_THROUGH_DHCP"
const Ipv6NdraProfile_RA_MODE_DHCP_ADDRESS_AND_DNS_THROUGH_DHCP = "DHCP_ADDRESS_AND_DNS_THROUGH_DHCP"
const Ipv6NdraProfile_RA_MODE_SLAAC_AND_ADDRESS_DNS_THROUGH_DHCP = "SLAAC_AND_ADDRESS_DNS_THROUGH_DHCP"

type Ipv6NdraProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paginated list of Ipv6NdraProfile
	Results []Ipv6NdraProfile
}

// An arbitrary key-value pair
type KeyValuePair struct {
    // Key
	Key *string
    // Value
	Value *string
}

// Used to configure L2 Bridge endpoint profile
type L2BridgeEndpointProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of policy paths to edge nodes. Edge allocation for L2 bridging.
	EdgePaths []string
    // Possible values are: 
    //
    // * L2BridgeEndpointProfile#L2BridgeEndpointProfile_FAILOVER_MODE_PREEMPTIVE
    // * L2BridgeEndpointProfile#L2BridgeEndpointProfile_FAILOVER_MODE_NON_PREEMPTIVE
    //
    //  Failover mode for the edge bridge cluster
	FailoverMode *string
    // Possible values are: 
    //
    // * L2BridgeEndpointProfile#L2BridgeEndpointProfile_HA_MODE_STANDBY
    //
    //  High avaialability mode can be active-active or active-standby. High availability mode cannot be modified after realization.
	HaMode *string
}
const L2BridgeEndpointProfile_FAILOVER_MODE_PREEMPTIVE = "PREEMPTIVE"
const L2BridgeEndpointProfile_FAILOVER_MODE_NON_PREEMPTIVE = "NON_PREEMPTIVE"
const L2BridgeEndpointProfile_HA_MODE_STANDBY = "ACTIVE_STANDBY"

// Segment specific L2 VPN configuration
type L2Extension struct {
    // This property has been deprecated. Please use the property l2vpn_paths for setting the paths of associated L2 VPN session. This property will continue to work as expected to provide backwards compatibility. However, when both l2vpn_path and l2vpn_paths properties are specified, only l2vpn_paths is used.
	L2vpnPath *string
    // Policy paths corresponding to the associated L2 VPN sessions
	L2vpnPaths []string
    // Local Egress.
	LocalEgress *LocalEgress
    // Tunnel ID format: int32
	TunnelId *int64
}

// L2VPN Service defines if service running as server or client. It also defines all the common properties for the multiple L2VPN Sessions associated with this service.
type L2VPNService struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // This property applies only in SERVER mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint.
	EnableHub *bool
    // IP Pool to allocate local and peer endpoint IPs for L2VpnSession logical tap. format: ipv4-cidr-block
	EncapIpPool []string
    // Possible values are: 
    //
    // * L2VPNService#L2VPNService_MODE_SERVER
    // * L2VPNService#L2VPNService_MODE_CLIENT
    //
    //  Specify an L2VPN service mode as SERVER or CLIENT.
	Mode *string
}
const L2VPNService_MODE_SERVER = "SERVER"
const L2VPNService_MODE_CLIENT = "CLIENT"

// Defines the tunnel local and peer addresses along with multiple tansport tunnels for redundancy. L2VPNSession belongs to only one L2VPNService.
type L2VPNSession struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Enable to extend all the associated segments.
	Enabled *bool
    // List of transport tunnels for redundancy.
	TransportTunnels []string
    // Tunnel encapsulation config. This property only applies in CLIENT mode. It is auto-populated from the L2VPNSessionData.
	TunnelEncapsulation *L2VPNTunnelEncapsulation
}

// L2VPN tunnel encapsulation config.
type L2VPNTunnelEncapsulation struct {
    // IP Address of the local tunnel port. This property only applies in CLIENT mode. format: ipv4
	LocalEndpointAddress *string
    // IP Address of the peer tunnel port. This property only applies in CLIENT mode. format: ipv4
	PeerEndpointAddress *string
    // Possible values are: 
    //
    // * L2VPNTunnelEncapsulation#L2VPNTunnelEncapsulation_PROTOCOL_GRE
    //
    //  Encapsulation protocol used by the tunnel.
	Protocol *string
}
const L2VPNTunnelEncapsulation_PROTOCOL_GRE = "GRE"

// Contains information necessary to configure L2Vpn.
type L2Vpn struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Enable to extend all the associated segments.
	Enabled *bool
    // List of paths referencing transport tunnels.
	TransportTunnels []string
}

// L2Vpn Context provides meta-data information about the parent Tier-0.
type L2VpnContext struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If enabled, the tier-0 acts as a Hub and replicates traffic received from peer to all other peers. If disabled, the tier-0 acts as a Spoke and replicates only the local.
	EnableHub *bool
}

// Contains information necessary to configure IPSec VPN.
type L3Vpn struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * L3Vpn#L3Vpn_DH_GROUPS_GROUP2
    // * L3Vpn#L3Vpn_DH_GROUPS_GROUP5
    // * L3Vpn#L3Vpn_DH_GROUPS_GROUP14
    // * L3Vpn#L3Vpn_DH_GROUPS_GROUP15
    // * L3Vpn#L3Vpn_DH_GROUPS_GROUP16
    //
    //  Diffie-Hellman group to be used if PFS is enabled. Default group is GROUP14.
	DhGroups []string
    // If true, perfect forward secrecy (PFS) is enabled.
	EnablePerfectForwardSecrecy *bool
    // Flag to enable L3Vpn. Default is enabled.
	Enabled *bool
    // Possible values are: 
    //
    // * L3Vpn#L3Vpn_IKE_DIGEST_ALGORITHMS_SHA1
    // * L3Vpn#L3Vpn_IKE_DIGEST_ALGORITHMS_SHA2_256
    //
    //  Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.
	IkeDigestAlgorithms []string
    // Possible values are: 
    //
    // * L3Vpn#L3Vpn_IKE_ENCRYPTION_ALGORITHMS_128
    // * L3Vpn#L3Vpn_IKE_ENCRYPTION_ALGORITHMS_256
    // * L3Vpn#L3Vpn_IKE_ENCRYPTION_ALGORITHMS_GCM_128
    // * L3Vpn#L3Vpn_IKE_ENCRYPTION_ALGORITHMS_GCM_192
    // * L3Vpn#L3Vpn_IKE_ENCRYPTION_ALGORITHMS_GCM_256
    //
    //  Algorithm to be used during Internet Key Exchange(IKE) negotiation. Default is AES_128.
	IkeEncryptionAlgorithms []string
    // Possible values are: 
    //
    // * L3Vpn#L3Vpn_IKE_VERSION_V1
    // * L3Vpn#L3Vpn_IKE_VERSION_V2
    // * L3Vpn#L3Vpn_IKE_VERSION_FLEX
    //
    //  IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.
	IkeVersion *string
    // L3Vpn Session
	L3vpnSession *data.StructValue
    // IPv4 address of local gateway format: ipv4
	LocalAddress *string
    // List of IPSec pre-shared keys used for IPSec authentication. If not specified, the older passphrase values are retained if there are any.
	Passphrases []string
    // This field is used to resolve conflicts in case of a remote site being behind NAT as remote public ip address is not enough. If it is not the case the remote public address should be provided here. If not provided, the value of this field is set to remote_public_address.
	RemotePrivateAddress *string
    // Public IPv4 address of remote gateway format: ipv4
	RemotePublicAddress *string
    // Possible values are: 
    //
    // * L3Vpn#L3Vpn_TUNNEL_DIGEST_ALGORITHMS_SHA1
    // * L3Vpn#L3Vpn_TUNNEL_DIGEST_ALGORITHMS_SHA2_256
    //
    //  Algorithm to be used for message digest during tunnel establishment. Default algorithm is empty.
	TunnelDigestAlgorithms []string
    // Possible values are: 
    //
    // * L3Vpn#L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_128
    // * L3Vpn#L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_256
    // * L3Vpn#L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_GCM_128
    // * L3Vpn#L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_GCM_192
    // * L3Vpn#L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_GCM_256
    //
    //  Encryption algorithm to encrypt/decrypt the messages exchanged between IPSec VPN initiator and responder during tunnel negotiation. Default is AES_GCM_128.
	TunnelEncryptionAlgorithms []string
}
const L3Vpn_DH_GROUPS_GROUP2 = "GROUP2"
const L3Vpn_DH_GROUPS_GROUP5 = "GROUP5"
const L3Vpn_DH_GROUPS_GROUP14 = "GROUP14"
const L3Vpn_DH_GROUPS_GROUP15 = "GROUP15"
const L3Vpn_DH_GROUPS_GROUP16 = "GROUP16"
const L3Vpn_IKE_DIGEST_ALGORITHMS_SHA1 = "SHA1"
const L3Vpn_IKE_DIGEST_ALGORITHMS_SHA2_256 = "SHA2_256"
const L3Vpn_IKE_ENCRYPTION_ALGORITHMS_128 = "AES_128"
const L3Vpn_IKE_ENCRYPTION_ALGORITHMS_256 = "AES_256"
const L3Vpn_IKE_ENCRYPTION_ALGORITHMS_GCM_128 = "AES_GCM_128"
const L3Vpn_IKE_ENCRYPTION_ALGORITHMS_GCM_192 = "AES_GCM_192"
const L3Vpn_IKE_ENCRYPTION_ALGORITHMS_GCM_256 = "AES_GCM_256"
const L3Vpn_IKE_VERSION_V1 = "IKE_V1"
const L3Vpn_IKE_VERSION_V2 = "IKE_V2"
const L3Vpn_IKE_VERSION_FLEX = "IKE_FLEX"
const L3Vpn_TUNNEL_DIGEST_ALGORITHMS_SHA1 = "SHA1"
const L3Vpn_TUNNEL_DIGEST_ALGORITHMS_SHA2_256 = "SHA2_256"
const L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_128 = "AES_128"
const L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_256 = "AES_256"
const L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_GCM_128 = "AES_GCM_128"
const L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_GCM_192 = "AES_GCM_192"
const L3Vpn_TUNNEL_ENCRYPTION_ALGORITHMS_GCM_256 = "AES_GCM_256"

// L3Vpn Context provides the configuration context that different L3Vpns can consume.
type L3VpnContext struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Local gateway IPv4 addresses available for configuration of each L3Vpn.
	AvailableLocalAddresses []PolicyIPAddressInfo
    // Bypass L3Vpn rules that will be shared across L3Vpns. Only Bypass action is supported on these L3Vpn rules.
	BypassRules []L3VpnRule
    // If true, enable L3Vpn Service for given tier-0. Enabling/disabling this service affects all L3Vpns under the given tier-0.
	Enabled *bool
    // Possible values are: 
    //
    // * L3VpnContext#L3VpnContext_IKE_LOG_LEVEL_DEBUG
    // * L3VpnContext#L3VpnContext_IKE_LOG_LEVEL_INFO
    // * L3VpnContext#L3VpnContext_IKE_LOG_LEVEL_WARN
    // * L3VpnContext#L3VpnContext_IKE_LOG_LEVEL_ERROR
    // * L3VpnContext#L3VpnContext_IKE_LOG_LEVEL_EMERGENCY
    //
    //  Log level for internet key exchange (IKE).
	IkeLogLevel *string
    // Policy path referencing Label. A label is used as a mechanism to group route-based L3Vpns in order to apply edge firewall rules on members' VTIs.
	Label *string
}
const L3VpnContext_IKE_LOG_LEVEL_DEBUG = "DEBUG"
const L3VpnContext_IKE_LOG_LEVEL_INFO = "INFO"
const L3VpnContext_IKE_LOG_LEVEL_WARN = "WARN"
const L3VpnContext_IKE_LOG_LEVEL_ERROR = "ERROR"
const L3VpnContext_IKE_LOG_LEVEL_EMERGENCY = "EMERGENCY"

// For policy-based L3Vpn sessions, a rule specifies as its action the vpn tunnel to be used for transit traffic that meets the rule's match criteria.
type L3VpnRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * L3VpnRule#L3VpnRule_ACTION_PROTECT
    // * L3VpnRule#L3VpnRule_ACTION_BYPASS
    //
    //  Action to exchange data with or without protection. PROTECT - Allows to exchange data with ipsec protection. Protect rules are defined per L3Vpn. BYPASS - Allows to exchange data without ipsec protection. Bypass rules are defined per L3VpnContext and affects all policy based L3Vpns. Bypass rules are prioritized over protect rules.
	Action *string
    // List of remote subnets used in policy-based L3Vpn.
	Destinations []L3VpnSubnet
    // This field is used to resolve conflicts between multiple L3VpnRules associated with a single L3Vpn or L3VpnContext. format: int32
	SequenceNumber *int64
    // List of local subnets used in policy-based L3Vpn.
	Sources []L3VpnSubnet
}
const L3VpnRule_ACTION_PROTECT = "PROTECT"
const L3VpnRule_ACTION_BYPASS = "BYPASS"

// Contains information about L3Vpn session.
type L3VpnSession struct {
    // Possible values are: 
    //
    // * L3VpnSession#L3VpnSession_RESOURCE_TYPE_POLICYBASEDL3VPNSESSION
    // * L3VpnSession#L3VpnSession_RESOURCE_TYPE_ROUTEBASEDL3VPNSESSION
    //
    //  - A Policy Based L3Vpn is a configuration in which protect rules to match local and remote subnet needs to be defined. Tunnel is established for each pair of local and remote subnet defined in protect rules. - A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet (commonly known as VTI) is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const L3VpnSession__TYPE_IDENTIFIER = "L3VpnSession"
const L3VpnSession_RESOURCE_TYPE_POLICYBASEDL3VPNSESSION = "PolicyBasedL3VpnSession"
const L3VpnSession_RESOURCE_TYPE_ROUTEBASEDL3VPNSESSION = "RouteBasedL3VpnSession"

// Used to specify subnets in L3Vpn rule.
type L3VpnSubnet struct {
    // Subnet used in L3Vpn Rule. format: ipv4-cidr-block
	Subnet *string
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type L4PolicyLbPersistenceProfile struct {
    // Possible values are: 
    //
    // * L4PolicyLbPersistenceProfile#L4PolicyLbPersistenceProfile_PERSISTENCE_IP
    //
    //  This field indicates the persistence method used for the PolicyLbVirtualServer. - SOURCE_IP persistence ensures all connections from a client (identified by IP address) are sent to the same backend server for a specified period. - This object is not required and persistence is disabled by default
	Persistence *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L4POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L7POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_CUSTOMPOLICYLBPERSISTENCEPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const L4PolicyLbPersistenceProfile__TYPE_IDENTIFIER = "L4PolicyLbPersistenceProfile"
const L4PolicyLbPersistenceProfile_PERSISTENCE_IP = "SOURCE_IP"

// L4PortSet can be specified in comma separated notation of parts. Parts of a L4PortSet includes single integer or range of port in hyphen notation. Example of a PortSet: \"22, 33-70, 44\".
type L4PortSetServiceEntry struct {
	DestinationPorts []string
    // Possible values are: 
    //
    // * L4PortSetServiceEntry#L4PortSetServiceEntry_L4PROTOCOL_TCP
    // * L4PortSetServiceEntry#L4PortSetServiceEntry_L4PROTOCOL_UDP
	L4Protocol *string
	SourcePorts []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const L4PortSetServiceEntry__TYPE_IDENTIFIER = "L4PortSetServiceEntry"
const L4PortSetServiceEntry_L4PROTOCOL_TCP = "TCP"
const L4PortSetServiceEntry_L4PROTOCOL_UDP = "UDP"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type L7PolicyLbPersistenceProfile struct {
    // Possible values are: 
    //
    // * L7PolicyLbPersistenceProfile#L7PolicyLbPersistenceProfile_PERSISTENCE_COOKIE
    //
    //  This field indicates the persistence method used for the PolicyLbVirtualServer. - COOKIE persistence allows related client connections, identified by the same cookie in HTTP requests [Refer to HTTP Cookie for details on HTTP cookies], to be redirected to the same server. Load balancer does not maintain any persistence table for cookie persistence. Instead, it encodes the necessary information in the HTTP cookie value sent to client and relies on the client to store it and send it back in subsequent related HTTP requests. Hence there is no limit on the number of cookie persistence entries that can be supported. - This object is not required and persistence is disabled by default
	Persistence *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L4POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L7POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_CUSTOMPOLICYLBPERSISTENCEPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const L7PolicyLbPersistenceProfile__TYPE_IDENTIFIER = "L7PolicyLbPersistenceProfile"
const L7PolicyLbPersistenceProfile_PERSISTENCE_COOKIE = "COOKIE"

// LBAccessListControl is used to define how IP access list control can filter the connections from clients.
type LBAccessListControl struct {
    // Possible values are: 
    //
    // * LBAccessListControl#LBAccessListControl_ACTION_ALLOW
    // * LBAccessListControl#LBAccessListControl_ACTION_DROP
    //
    //  ALLOW means connections matching grouping object IP list are allowed and requests not matching grouping object IP list are dropped. DROP means connections matching grouping object IP list are dropped and requests not matching grouping object IP list are allowed.
	Action *string
    // The enabled flag indicates whether to enable access list control option. It is false by default.
	Enabled *bool
    // The path of grouping object which defines the IP addresses or ranges to match the client IP.
	GroupPath *string
}
const LBAccessListControl_ACTION_ALLOW = "ALLOW"
const LBAccessListControl_ACTION_DROP = "DROP"

// All the active types of LBMonitorProfile extend from this abstract class. This is present for extensibility.
type LBActiveMonitor struct {
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBActiveMonitor__TYPE_IDENTIFIER = "LBActiveMonitor"

// App profile.
type LBAppProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBHTTPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTTCPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTUDPPROFILE
    //
    //  An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBAppProfile__TYPE_IDENTIFIER = "LBAppProfile"
const LBAppProfile_RESOURCE_TYPE_LBHTTPPROFILE = "LBHttpProfile"
const LBAppProfile_RESOURCE_TYPE_LBFASTTCPPROFILE = "LBFastTcpProfile"
const LBAppProfile_RESOURCE_TYPE_LBFASTUDPPROFILE = "LBFastUdpProfile"

// Match condition for client certficate issuer DN.
type LBClientCertificateIssuerDnCondition struct {
    // If true, case is significant when comparing issuer DN value.
	CaseSensitive *bool
    // Value of issuer DN.
	IssuerDn *string
    // Possible values are: 
    //
    // * LBClientCertificateIssuerDnCondition#LBClientCertificateIssuerDnCondition_MATCH_TYPE_STARTS_WITH
    // * LBClientCertificateIssuerDnCondition#LBClientCertificateIssuerDnCondition_MATCH_TYPE_ENDS_WITH
    // * LBClientCertificateIssuerDnCondition#LBClientCertificateIssuerDnCondition_MATCH_TYPE_EQUALS
    // * LBClientCertificateIssuerDnCondition#LBClientCertificateIssuerDnCondition_MATCH_TYPE_CONTAINS
    // * LBClientCertificateIssuerDnCondition#LBClientCertificateIssuerDnCondition_MATCH_TYPE_REGEX
    //
    //  Match type of issuer DN.
	MatchType *string
}
const LBClientCertificateIssuerDnCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBClientCertificateIssuerDnCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBClientCertificateIssuerDnCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBClientCertificateIssuerDnCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBClientCertificateIssuerDnCondition_MATCH_TYPE_REGEX = "REGEX"

// Match condition for client certficate subject DN.
type LBClientCertificateSubjectDnCondition struct {
    // If true, case is significant when comparing subject DN value.
	CaseSensitive *bool
    // Possible values are: 
    //
    // * LBClientCertificateSubjectDnCondition#LBClientCertificateSubjectDnCondition_MATCH_TYPE_STARTS_WITH
    // * LBClientCertificateSubjectDnCondition#LBClientCertificateSubjectDnCondition_MATCH_TYPE_ENDS_WITH
    // * LBClientCertificateSubjectDnCondition#LBClientCertificateSubjectDnCondition_MATCH_TYPE_EQUALS
    // * LBClientCertificateSubjectDnCondition#LBClientCertificateSubjectDnCondition_MATCH_TYPE_CONTAINS
    // * LBClientCertificateSubjectDnCondition#LBClientCertificateSubjectDnCondition_MATCH_TYPE_REGEX
    //
    //  Match type of subject DN.
	MatchType *string
    // Value of subject DN.
	SubjectDn *string
}
const LBClientCertificateSubjectDnCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBClientCertificateSubjectDnCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBClientCertificateSubjectDnCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBClientCertificateSubjectDnCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBClientCertificateSubjectDnCondition_MATCH_TYPE_REGEX = "REGEX"

// Client SSL profile.
type LBClientSslProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * LBClientSslProfile#LBClientSslProfile_CIPHER_GROUP_LABEL_BALANCED
    // * LBClientSslProfile#LBClientSslProfile_CIPHER_GROUP_LABEL_HIGH_SECURITY
    // * LBClientSslProfile#LBClientSslProfile_CIPHER_GROUP_LABEL_HIGH_COMPATIBILITY
    // * LBClientSslProfile#LBClientSslProfile_CIPHER_GROUP_LABEL_CUSTOM
    //
    //  It is a label of cipher group which is mostly consumed by GUI.
	CipherGroupLabel *string
    // Possible values are: 
    //
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_3DES_EDE_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_AES_128_GCM_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_RSA_WITH_AES_256_GCM_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    // * LBClientSslProfile#LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    //
    //  Supported SSL cipher list to client side.
	Ciphers []string
    // This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant..
	IsFips *bool
    // This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.
	IsSecure *bool
    // During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference.
	PreferServerCiphers *bool
    // Possible values are: 
    //
    // * LBClientSslProfile#LBClientSslProfile_PROTOCOLS_SSL_V2
    // * LBClientSslProfile#LBClientSslProfile_PROTOCOLS_SSL_V3
    // * LBClientSslProfile#LBClientSslProfile_PROTOCOLS_TLS_V1
    // * LBClientSslProfile#LBClientSslProfile_PROTOCOLS_TLS_V1_1
    // * LBClientSslProfile#LBClientSslProfile_PROTOCOLS_TLS_V1_2
    //
    //  SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.
	Protocols []string
    // SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.
	SessionCacheEnabled *bool
    // Session cache timeout specifies how long the SSL session parameters are held on to and can be reused. format: int64
	SessionCacheTimeout *int64
}
const LBClientSslProfile_CIPHER_GROUP_LABEL_BALANCED = "BALANCED"
const LBClientSslProfile_CIPHER_GROUP_LABEL_HIGH_SECURITY = "HIGH_SECURITY"
const LBClientSslProfile_CIPHER_GROUP_LABEL_HIGH_COMPATIBILITY = "HIGH_COMPATIBILITY"
const LBClientSslProfile_CIPHER_GROUP_LABEL_CUSTOM = "CUSTOM"
const LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
const LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
const LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"
const LBClientSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"
const LBClientSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"
const LBClientSslProfile_CIPHERS_RSA_WITH_3DES_EDE_CBC_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
const LBClientSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
const LBClientSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"
const LBClientSslProfile_CIPHERS_RSA_WITH_AES_128_GCM_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"
const LBClientSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"
const LBClientSslProfile_CIPHERS_RSA_WITH_AES_256_GCM_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"
const LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
const LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
const LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
const LBClientSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
const LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"
const LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"
const LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"
const LBClientSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"
const LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"
const LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"
const LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"
const LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"
const LBClientSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
const LBClientSslProfile_PROTOCOLS_SSL_V2 = "SSL_V2"
const LBClientSslProfile_PROTOCOLS_SSL_V3 = "SSL_V3"
const LBClientSslProfile_PROTOCOLS_TLS_V1 = "TLS_V1"
const LBClientSslProfile_PROTOCOLS_TLS_V1_1 = "TLS_V1_1"
const LBClientSslProfile_PROTOCOLS_TLS_V1_2 = "TLS_V1_2"

// Client SSL profile binding.
type LBClientSslProfileBinding struct {
    // Authentication depth is used to set the verification depth in the client certificates chain. format: int64
	CertificateChainDepth *int64
    // Possible values are: 
    //
    // * LBClientSslProfileBinding#LBClientSslProfileBinding_CLIENT_AUTH_REQUIRED
    // * LBClientSslProfileBinding#LBClientSslProfileBinding_CLIENT_AUTH_IGNORE
    //
    //  Client authentication mode.
	ClientAuth *string
    // If client auth type is REQUIRED, client certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.
	ClientAuthCaPaths []string
    // A Certificate Revocation List (CRL) can be specified in the client-side SSL profile binding to disallow compromised client certificates.
	ClientAuthCrlPaths []string
    // A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension.
	DefaultCertificatePath *string
    // Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server.
	SniCertificatePaths []string
    // Client SSL profile defines reusable, application-independent client side SSL properties.
	SslProfilePath *string
}
const LBClientSslProfileBinding_CLIENT_AUTH_REQUIRED = "REQUIRED"
const LBClientSslProfileBinding_CLIENT_AUTH_IGNORE = "IGNORE"

// This action is used to drop the connections. There is no extra propery in this action. If there is no match condition specified, the connection will be always dropped. This action can be specified at HTTP_ACCESS or HTTP_FORWARDING pahse.
type LBConnectionDropAction struct {
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBConnectionDropAction__TYPE_IDENTIFIER = "LBConnectionDropAction"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it.
type LBCookiePersistenceProfile struct {
    // HTTP cookie domain could be configured, only available for insert mode.
	CookieDomain *string
    // If fallback is true, once the cookie points to a server that is down (i.e. admin state DISABLED or healthcheck state is DOWN), then a new server is selected by default to handle that request. If fallback is false, it will cause the request to be rejected if cookie points to a server.
	CookieFallback *bool
    // If garble is set to true, cookie value (server IP and port) would be encrypted. If garble is set to false, cookie value would be plain text.
	CookieGarble *bool
    // Possible values are: 
    //
    // * LBCookiePersistenceProfile#LBCookiePersistenceProfile_COOKIE_MODE_INSERT
    // * LBCookiePersistenceProfile#LBCookiePersistenceProfile_COOKIE_MODE_PREFIX
    // * LBCookiePersistenceProfile#LBCookiePersistenceProfile_COOKIE_MODE_REWRITE
    //
    //  Cookie persistence mode.
	CookieMode *string
    // Cookie name.
	CookieName *string
    // HTTP cookie path could be set, only available for insert mode.
	CookiePath *string
    // Both session cookie and persistence cookie are supported, if not specified, it's a session cookie. It expires when the browser is closed.
	CookieTime *data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBSOURCEIPPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBCOOKIEPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBGENERICPERSISTENCEPROFILE
    //
    //  The resource_type property identifies persistence profile type.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled. Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first. When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBCookiePersistenceProfile__TYPE_IDENTIFIER = "LBCookiePersistenceProfile"
const LBCookiePersistenceProfile_COOKIE_MODE_INSERT = "INSERT"
const LBCookiePersistenceProfile_COOKIE_MODE_PREFIX = "PREFIX"
const LBCookiePersistenceProfile_COOKIE_MODE_REWRITE = "REWRITE"

// Cookie time.
type LBCookieTime struct {
    // Possible values are: 
    //
    // * LBCookieTime#LBCookieTime_TYPE_LBSESSIONCOOKIETIME
    // * LBCookieTime#LBCookieTime_TYPE_LBPERSISTENCECOOKIETIME
    //
    //  Both session cookie and persistence cookie are supported, Use LbSessionCookieTime for session cookie time setting, Use LbPersistenceCookieTime for persistence cookie time setting
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBCookieTime__TYPE_IDENTIFIER = "LBCookieTime"
const LBCookieTime_TYPE_LBSESSIONCOOKIETIME = "LBSessionCookieTime"
const LBCookieTime_TYPE_LBPERSISTENCECOOKIETIME = "LBPersistenceCookieTime"

// Fast TCP profile.
type LBFastTcpProfile struct {
    // It is used to specify how long a closing TCP connection (both FINs received or a RST is received) should be kept for this application before cleaning up the connection. format: int64
	CloseTimeout *int64
    // If flow mirroring is enabled, all the flows to the bounded virtual server are mirrored to the standby node.
	HaFlowMirroringEnabled *bool
    // It is used to configure how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up. format: int64
	IdleTimeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBHTTPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTTCPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTUDPPROFILE
    //
    //  An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBFastTcpProfile__TYPE_IDENTIFIER = "LBFastTcpProfile"

// Fast UDP profile.
type LBFastUdpProfile struct {
    // If flow mirroring is enabled, all the flows to the bounded virtual server are mirrored to the standby node.
	FlowMirroringEnabled *bool
    // Though UDP is a connectionless protocol, for the purposes of load balancing, all UDP packets with the same flow signature (source and destination IP/ports and IP protocol) received within the idle timeout period are considered to belong to the same connection and are sent to the same backend server. If no packets are received for idle timeout period, the connection (association between flow signature and the selected server) is cleaned up. format: int64
	IdleTimeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBHTTPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTTCPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTUDPPROFILE
    //
    //  An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBFastUdpProfile__TYPE_IDENTIFIER = "LBFastUdpProfile"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it. LBGenericPersistenceProfile cannot be attached to virtual server directly, it can be specified in LB rule actions. In HTTP forwarding phase, the profile can be specified in LBVariablePersistenceOnAction. In HTTP response rewriting phase, the profile can be specified in LBVariablePersistenceLearnAction.
type LBGenericPersistenceProfile struct {
    // The mirroring enabled flag is to synchronize persistence entries. Persistence entries are not synchronized to the HA peer by default.
	HaPersistenceMirroringEnabled *bool
    // When all connections complete (reference count reaches 0), persistence entry timer is started with the expiration time. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBSOURCEIPPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBCOOKIEPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBGENERICPERSISTENCEPROFILE
    //
    //  The resource_type property identifies persistence profile type.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled. Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first. When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBGenericPersistenceProfile__TYPE_IDENTIFIER = "LBGenericPersistenceProfile"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over HTTP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LBHttpMonitorProfile struct {
    // String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST.
	RequestBody *string
    // Array of HTTP request headers.
	RequestHeaders []LbHttpRequestHeader
    // Possible values are: 
    //
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_METHOD_GET
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_METHOD_OPTIONS
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_METHOD_POST
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_METHOD_HEAD
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_METHOD_PUT
    //
    //  The health check method for HTTP monitor type.
	RequestMethod *string
    // For HTTP active healthchecks, the HTTP request url sent can be customized and can include query parameters.
	RequestUrl *string
    // Possible values are: 
    //
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_VERSION_1_0
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_VERSION_1_1
    // * LBHttpMonitorProfile#LBHttpMonitorProfile_REQUEST_VERSION_2_0
    //
    //  HTTP request version.
	RequestVersion *string
    // If HTTP response body match string (regular expressions not supported) is specified (using LBHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful.
	ResponseBody *string
    // The HTTP response status code should be a valid HTTP status code. format: int32
	ResponseStatusCodes []int64
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
const LBHttpMonitorProfile_REQUEST_METHOD_GET = "GET"
const LBHttpMonitorProfile_REQUEST_METHOD_OPTIONS = "OPTIONS"
const LBHttpMonitorProfile_REQUEST_METHOD_POST = "POST"
const LBHttpMonitorProfile_REQUEST_METHOD_HEAD = "HEAD"
const LBHttpMonitorProfile_REQUEST_METHOD_PUT = "PUT"
const LBHttpMonitorProfile_REQUEST_VERSION_1_0 = "HTTP_VERSION_1_0"
const LBHttpMonitorProfile_REQUEST_VERSION_1_1 = "HTTP_VERSION_1_1"
const LBHttpMonitorProfile_REQUEST_VERSION_2_0 = "HTTP_VERSION_2_0"

// Http profile.
type LBHttpProfile struct {
    // If a website is temporarily down or has moved, incoming requests for that virtual server can be temporarily redirected to a URL.
	HttpRedirectTo *string
    // Certain secure applications may want to force communication over SSL, but instead of rejecting non-SSL connections, they may choose to redirect the client automatically to use SSL.
	HttpRedirectToHttps *bool
    // It is used to specify the HTTP application idle timeout, it means that how long the load balancer will keep the connection idle to wait for the client to send the next keep-alive request. It is not a TCP socket setting. format: int64
	IdleTimeout *int64
    // NTLM is an authentication protocol that can be used over HTTP. If the flag is set to true, LB will use NTLM challenge/response methodology.
	Ntlm *bool
    // If it is not specified, it means that request body size is unlimited. format: int64
	RequestBodySize *int64
    // A request with header equal to or below this size is guaranteed to be processed. A request with header larger than request_header_size will be processed up to 32K bytes on best effort basis. format: int64
	RequestHeaderSize *int64
    // When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. When buffering is enabled, LB receives a response from the backend server as soon as possible, saving it into the buffers.
	ResponseBuffering *bool
    // A response with header larger than response_header_size will be dropped. format: int64
	ResponseHeaderSize *int64
    // If server doesnât send any packet within this time, the connection is closed. format: int64
	ResponseTimeout *int64
    // Possible values are: 
    //
    // * LBHttpProfile#LBHttpProfile_XFORWARDED_FOR_INSERT
    // * LBHttpProfile#LBHttpProfile_XFORWARDED_FOR_REPLACE
    //
    //  When X-Forwareded-For is configured, X-Forwarded-Proto and X-Forwarded-Port information is added automatically. The two additional header information can be also modified or deleted in load balancer rules.
	XForwardedFor *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBHTTPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTTCPPROFILE
    // * LBAppProfile#LBAppProfile_RESOURCE_TYPE_LBFASTUDPPROFILE
    //
    //  An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpProfile__TYPE_IDENTIFIER = "LBHttpProfile"
const LBHttpProfile_XFORWARDED_FOR_INSERT = "INSERT"
const LBHttpProfile_XFORWARDED_FOR_REPLACE = "REPLACE"

// This action is used to redirect HTTP request messages to a new URL. The reply_status value specified in this action is used as the status code of HTTP response message which is sent back to client (Normally a browser). The HTTP status code for redirection is 3xx, for example, 301, 302, 303, 307, etc. The redirect_url is the new URL that the HTTP request message is redirected to. Normally browser will send another HTTP request to the new URL after receiving a redirection response message. Captured variables and built-in variables can be used in redirect_url field. For example, to redirect all HTTP requests to HTTPS requests for a virtual server. We create an LBRule without any conditions, add an LBHttpRedirectAction to the rule. Set the redirect_url field of the LBHttpRedirectAction to: https://$_host$_request_uri And set redirect_status to \"302\", which means found. This rule will redirect all HTTP requests to HTTPS server port on the same host.
type LBHttpRedirectAction struct {
    // HTTP response status code.
	RedirectStatus *string
    // The URL that the HTTP request is redirected to.
	RedirectUrl *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRedirectAction__TYPE_IDENTIFIER = "LBHttpRedirectAction"

// This action is used to reject HTTP request messages. The specified reply_status value is used as the status code for the corresponding HTTP response message which is sent back to client (Normally a browser) indicating the reason it was rejected. Reference official HTTP status code list for your specific HTTP version to set the reply_status properly. LBHttpRejectAction does not support variables.
type LBHttpRejectAction struct {
    // Response message.
	ReplyMessage *string
    // HTTP response status code.
	ReplyStatus *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRejectAction__TYPE_IDENTIFIER = "LBHttpRejectAction"

// This condition is used to match the message body of an HTTP request. Typically, only HTTP POST, PATCH, or PUT requests have request body. The match_type field defines how body_value field is used to match the body of HTTP requests.
type LBHttpRequestBodyCondition struct {
    // HTTP request body
	BodyValue *string
    // If true, case is significant when comparing HTTP body value.
	CaseSensitive *bool
    // Possible values are: 
    //
    // * LBHttpRequestBodyCondition#LBHttpRequestBodyCondition_MATCH_TYPE_STARTS_WITH
    // * LBHttpRequestBodyCondition#LBHttpRequestBodyCondition_MATCH_TYPE_ENDS_WITH
    // * LBHttpRequestBodyCondition#LBHttpRequestBodyCondition_MATCH_TYPE_EQUALS
    // * LBHttpRequestBodyCondition#LBHttpRequestBodyCondition_MATCH_TYPE_CONTAINS
    // * LBHttpRequestBodyCondition#LBHttpRequestBodyCondition_MATCH_TYPE_REGEX
    //
    //  Match type of HTTP body
	MatchType *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestBodyCondition__TYPE_IDENTIFIER = "LBHttpRequestBodyCondition"
const LBHttpRequestBodyCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBHttpRequestBodyCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBHttpRequestBodyCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBHttpRequestBodyCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBHttpRequestBodyCondition_MATCH_TYPE_REGEX = "REGEX"

// This condition is used to match HTTP request messages by cookie which is a specific type of HTTP header. The match_type and case_sensitive define how to compare cookie value.
type LBHttpRequestCookieCondition struct {
    // If true, case is significant when comparing cookie value.
	CaseSensitive *bool
    // Cookie name.
	CookieName *string
    // Cookie value.
	CookieValue *string
    // Possible values are: 
    //
    // * LBHttpRequestCookieCondition#LBHttpRequestCookieCondition_MATCH_TYPE_STARTS_WITH
    // * LBHttpRequestCookieCondition#LBHttpRequestCookieCondition_MATCH_TYPE_ENDS_WITH
    // * LBHttpRequestCookieCondition#LBHttpRequestCookieCondition_MATCH_TYPE_EQUALS
    // * LBHttpRequestCookieCondition#LBHttpRequestCookieCondition_MATCH_TYPE_CONTAINS
    // * LBHttpRequestCookieCondition#LBHttpRequestCookieCondition_MATCH_TYPE_REGEX
    //
    //  Match type of cookie value.
	MatchType *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestCookieCondition__TYPE_IDENTIFIER = "LBHttpRequestCookieCondition"
const LBHttpRequestCookieCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBHttpRequestCookieCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBHttpRequestCookieCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBHttpRequestCookieCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBHttpRequestCookieCondition_MATCH_TYPE_REGEX = "REGEX"

// This condition is used to match HTTP request messages by HTTP header fields. HTTP header fields are components of the header section of HTTP request and response messages. They define the operating parameters of an HTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One condition can be used to match one header field, to match multiple header fields, multiple conditions must be specified. The match_type field defines how header_value field is used to match HTTP requests. The header_name field does not support match types.
type LBHttpRequestHeaderCondition struct {
    // If true, case is significant when comparing HTTP header value.
	CaseSensitive *bool
    // Name of HTTP header
	HeaderName *string
    // Value of HTTP header
	HeaderValue *string
    // Possible values are: 
    //
    // * LBHttpRequestHeaderCondition#LBHttpRequestHeaderCondition_MATCH_TYPE_STARTS_WITH
    // * LBHttpRequestHeaderCondition#LBHttpRequestHeaderCondition_MATCH_TYPE_ENDS_WITH
    // * LBHttpRequestHeaderCondition#LBHttpRequestHeaderCondition_MATCH_TYPE_EQUALS
    // * LBHttpRequestHeaderCondition#LBHttpRequestHeaderCondition_MATCH_TYPE_CONTAINS
    // * LBHttpRequestHeaderCondition#LBHttpRequestHeaderCondition_MATCH_TYPE_REGEX
    //
    //  Match type of HTTP header value
	MatchType *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestHeaderCondition__TYPE_IDENTIFIER = "LBHttpRequestHeaderCondition"
const LBHttpRequestHeaderCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBHttpRequestHeaderCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBHttpRequestHeaderCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBHttpRequestHeaderCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBHttpRequestHeaderCondition_MATCH_TYPE_REGEX = "REGEX"

// This action is used to delete header fields of HTTP request messages at HTTP_REQUEST_REWRITE phase. One action can be used to delete all headers with same header name. To delete headers with different header names, multiple actions must be defined.
type LBHttpRequestHeaderDeleteAction struct {
    // Name of a header field of HTTP request message.
	HeaderName *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestHeaderDeleteAction__TYPE_IDENTIFIER = "LBHttpRequestHeaderDeleteAction"

// This action is used to rewrite header fields of matched HTTP request messages to specified new values. One action can be used to rewrite one header field. To rewrite multiple header fields, multiple actions must be defined. Captured variables and built-in variables can be used in the header_value field, header_name field does not support variables.
type LBHttpRequestHeaderRewriteAction struct {
    // Name of HTTP request header.
	HeaderName *string
    // Value of HTTP request header.
	HeaderValue *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestHeaderRewriteAction__TYPE_IDENTIFIER = "LBHttpRequestHeaderRewriteAction"

// This condition is used to match method of HTTP requests. If the method of an HTTP request is same as the method specified in this condition, the HTTP request match this condition. For example, if the method field is set to GET in this condition, any HTTP request with GET method matches the condition.
type LBHttpRequestMethodCondition struct {
    // Possible values are: 
    //
    // * LBHttpRequestMethodCondition#LBHttpRequestMethodCondition_METHOD_GET
    // * LBHttpRequestMethodCondition#LBHttpRequestMethodCondition_METHOD_OPTIONS
    // * LBHttpRequestMethodCondition#LBHttpRequestMethodCondition_METHOD_POST
    // * LBHttpRequestMethodCondition#LBHttpRequestMethodCondition_METHOD_HEAD
    // * LBHttpRequestMethodCondition#LBHttpRequestMethodCondition_METHOD_PUT
    //
    //  Type of HTTP request method
	Method *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestMethodCondition__TYPE_IDENTIFIER = "LBHttpRequestMethodCondition"
const LBHttpRequestMethodCondition_METHOD_GET = "GET"
const LBHttpRequestMethodCondition_METHOD_OPTIONS = "OPTIONS"
const LBHttpRequestMethodCondition_METHOD_POST = "POST"
const LBHttpRequestMethodCondition_METHOD_HEAD = "HEAD"
const LBHttpRequestMethodCondition_METHOD_PUT = "PUT"

// This condition is used to match URI arguments aka query string of Http request messages, for example, in URI http://exaple.com?foo=1&bar=2, the \"foo=1&bar=2\" is the query string containing URI arguments. In an URI scheme, query string is indicated by the first question mark (\"?\") character and terminated by a number sign (\"#\") character or by the end of the URI. The uri_arguments field can be specified as a regular expression(Set match_type to REGEX). For example, \"foo=(?&lt;x&gt;\\d+)\". It matches HTTP requests whose URI arguments containing \"foo\", the value of foo contains only digits. And the value of foo is captured as $x which can be used in LBRuleAction fields which support variables.
type LBHttpRequestUriArgumentsCondition struct {
    // If true, case is significant when comparing URI arguments.
	CaseSensitive *bool
    // Possible values are: 
    //
    // * LBHttpRequestUriArgumentsCondition#LBHttpRequestUriArgumentsCondition_MATCH_TYPE_STARTS_WITH
    // * LBHttpRequestUriArgumentsCondition#LBHttpRequestUriArgumentsCondition_MATCH_TYPE_ENDS_WITH
    // * LBHttpRequestUriArgumentsCondition#LBHttpRequestUriArgumentsCondition_MATCH_TYPE_EQUALS
    // * LBHttpRequestUriArgumentsCondition#LBHttpRequestUriArgumentsCondition_MATCH_TYPE_CONTAINS
    // * LBHttpRequestUriArgumentsCondition#LBHttpRequestUriArgumentsCondition_MATCH_TYPE_REGEX
    //
    //  Match type of URI arguments
	MatchType *string
    // URI arguments, aka query string of URI.
	UriArguments *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestUriArgumentsCondition__TYPE_IDENTIFIER = "LBHttpRequestUriArgumentsCondition"
const LBHttpRequestUriArgumentsCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBHttpRequestUriArgumentsCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBHttpRequestUriArgumentsCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBHttpRequestUriArgumentsCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBHttpRequestUriArgumentsCondition_MATCH_TYPE_REGEX = "REGEX"

// This condition is used to match URIs(Uniform Resource Identifier) of HTTP request messages. The URI field can be specified as a regular expression. If an HTTP request message is requesting an URI which matches specified regular expression, it matches the condition. The syntax of whole URI looks like this: scheme:[//[user[:password]\\\\@]host[:port]][/path][?query][#fragment] This condition matches only the path part of entire URI. When match_type field is specified as REGEX, the uri field is used as a regular expression to match URI path of HTTP requests. For example, to match any URI that has \"/image/\" or \"/images/\", uri field can be specified as: \"/image[s]?/\". Named capturing groups can be used in the uri field to capture substrings of matched URIs and store them in variables for use in LBRuleAction. For example, specify uri field as: \"/news/(?&lt;year&gt;\\d+)/(?&lt;month&gt;\\d+)/(?&lt;article&gt;.\*)\" If the URI path is /articles/news/2017/06/xyz.html, then substring \"2017\" is captured in variable year, \"06\" is captured in variable month, and \"xyz.html\" is captured in variable article. These variables can then be used in an LBRuleAction field which supports variables, such as uri field of LBHttpRequestUriRewriteAction. For example, set the uri field of LBHttpRequestUriRewriteAction as: \"/articles/news/$year-$month-$article\" Then the URI path /articles/news/2017/06/xyz.html is rewritten to: \"/articles/news/2017-06-xyz.html\"
type LBHttpRequestUriCondition struct {
    // If true, case is significant when comparing URI.
	CaseSensitive *bool
    // Possible values are: 
    //
    // * LBHttpRequestUriCondition#LBHttpRequestUriCondition_MATCH_TYPE_STARTS_WITH
    // * LBHttpRequestUriCondition#LBHttpRequestUriCondition_MATCH_TYPE_ENDS_WITH
    // * LBHttpRequestUriCondition#LBHttpRequestUriCondition_MATCH_TYPE_EQUALS
    // * LBHttpRequestUriCondition#LBHttpRequestUriCondition_MATCH_TYPE_CONTAINS
    // * LBHttpRequestUriCondition#LBHttpRequestUriCondition_MATCH_TYPE_REGEX
    //
    //  Match type of URI
	MatchType *string
    // A string used to identify resource
	Uri *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestUriCondition__TYPE_IDENTIFIER = "LBHttpRequestUriCondition"
const LBHttpRequestUriCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBHttpRequestUriCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBHttpRequestUriCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBHttpRequestUriCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBHttpRequestUriCondition_MATCH_TYPE_REGEX = "REGEX"

// This action is used to rewrite URIs in matched HTTP request messages. Specify the uri and uri_arguments fields in this condition to rewrite the matched HTTP request message's URI and URI arguments to the new values. Full URI scheme of HTTP messages have following syntax: scheme:[//[user[:password]\\\\@]host[:port]][/path][?query][#fragment] The uri field of this action is used to rewrite the /path part in above scheme. And the uri_arguments field is used to rewrite the query part. Captured variables and built-in variables can be used in the uri and uri_arguments fields. Check the example in LBRuleAction to see how to use variables in this action.
type LBHttpRequestUriRewriteAction struct {
    // URI of HTTP request.
	Uri *string
    // Query string of URI, typically contains key value pairs, for example: foo1=bar1&foo2=bar2.
	UriArguments *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestUriRewriteAction__TYPE_IDENTIFIER = "LBHttpRequestUriRewriteAction"

// This condition is used to match the HTTP protocol version of the HTTP request messages.
type LBHttpRequestVersionCondition struct {
    // Possible values are: 
    //
    // * LBHttpRequestVersionCondition#LBHttpRequestVersionCondition_VERSION_1_0
    // * LBHttpRequestVersionCondition#LBHttpRequestVersionCondition_VERSION_1_1
    // * LBHttpRequestVersionCondition#LBHttpRequestVersionCondition_VERSION_2_0
    //
    //  HTTP version
	Version *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpRequestVersionCondition__TYPE_IDENTIFIER = "LBHttpRequestVersionCondition"
const LBHttpRequestVersionCondition_VERSION_1_0 = "HTTP_VERSION_1_0"
const LBHttpRequestVersionCondition_VERSION_1_1 = "HTTP_VERSION_1_1"
const LBHttpRequestVersionCondition_VERSION_2_0 = "HTTP_VERSION_2_0"

// This condition is used to match HTTP response messages from backend servers by HTTP header fields. HTTP header fields are components of the header section of HTTP request and response messages. They define the operating parameters of an HTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One condition can be used to match one header field, to match multiple header fields, multiple conditions must be specified. The match_type field defines how header_value field is used to match HTTP responses. The header_name field does not support match types.
type LBHttpResponseHeaderCondition struct {
    // If true, case is significant when comparing HTTP header value.
	CaseSensitive *bool
    // Name of HTTP header field
	HeaderName *string
    // Value of HTTP header field
	HeaderValue *string
    // Possible values are: 
    //
    // * LBHttpResponseHeaderCondition#LBHttpResponseHeaderCondition_MATCH_TYPE_STARTS_WITH
    // * LBHttpResponseHeaderCondition#LBHttpResponseHeaderCondition_MATCH_TYPE_ENDS_WITH
    // * LBHttpResponseHeaderCondition#LBHttpResponseHeaderCondition_MATCH_TYPE_EQUALS
    // * LBHttpResponseHeaderCondition#LBHttpResponseHeaderCondition_MATCH_TYPE_CONTAINS
    // * LBHttpResponseHeaderCondition#LBHttpResponseHeaderCondition_MATCH_TYPE_REGEX
    //
    //  Match type of HTTP header value
	MatchType *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpResponseHeaderCondition__TYPE_IDENTIFIER = "LBHttpResponseHeaderCondition"
const LBHttpResponseHeaderCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBHttpResponseHeaderCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBHttpResponseHeaderCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBHttpResponseHeaderCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBHttpResponseHeaderCondition_MATCH_TYPE_REGEX = "REGEX"

// This action is used to delete header fields of HTTP response messages at HTTP_RESPONSE_REWRITE phase. One action can be used to delete allgi headers with same header name. To delete headers with different header names, multiple actions must be defined.
type LBHttpResponseHeaderDeleteAction struct {
    // Name of a header field of HTTP response message.
	HeaderName *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpResponseHeaderDeleteAction__TYPE_IDENTIFIER = "LBHttpResponseHeaderDeleteAction"

// This action is used to rewrite header fields of HTTP response messages to specified new values at HTTP_RESPONSE_REWRITE phase. One action can be used to rewrite one header field. To rewrite multiple header fields, multiple actions must be defined. Captured variables and built-in variables can be used in the header_value field, header_name field does not support variables.
type LBHttpResponseHeaderRewriteAction struct {
    // Name of a header field of HTTP request message.
	HeaderName *string
    // Value of header field
	HeaderValue *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpResponseHeaderRewriteAction__TYPE_IDENTIFIER = "LBHttpResponseHeaderRewriteAction"

// This condition is used to match SSL handshake and SSL connection at all phases.If multiple properties are configured, the rule is considered a match when all the configured properties are matched.
type LBHttpSslCondition struct {
    // The issuer DN match condition of the client certificate for an established SSL connection.
	ClientCertificateIssuerDn *LBClientCertificateIssuerDnCondition
    // The subject DN match condition of the client certificate for an established SSL connection.
	ClientCertificateSubjectDn *LBClientCertificateSubjectDnCondition
    // Possible values are: 
    //
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_3DES_EDE_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_256_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    //
    //  Cipher list which supported by client.
	ClientSupportedSslCiphers []string
    // Possible values are: 
    //
    // * LBHttpSslCondition#LBHttpSslCondition_SESSION_REUSED_IGNORE
    // * LBHttpSslCondition#LBHttpSslCondition_SESSION_REUSED_REUSED
    // * LBHttpSslCondition#LBHttpSslCondition_SESSION_REUSED_NEW
    //
    //  The type of SSL session reused.
	SessionReused *string
    // Possible values are: 
    //
    // * LBHttpSslCondition#LBHttpSslCondition_USED_PROTOCOL_SSL_V2
    // * LBHttpSslCondition#LBHttpSslCondition_USED_PROTOCOL_SSL_V3
    // * LBHttpSslCondition#LBHttpSslCondition_USED_PROTOCOL_TLS_V1
    // * LBHttpSslCondition#LBHttpSslCondition_USED_PROTOCOL_TLS_V1_1
    // * LBHttpSslCondition#LBHttpSslCondition_USED_PROTOCOL_TLS_V1_2
    //
    //  Protocol of an established SSL connection.
	UsedProtocol *string
    // Possible values are: 
    //
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_256_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_3DES_EDE_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_256_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_128_CBC_SHA
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_128_CBC_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_128_GCM_SHA256
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_256_CBC_SHA384
    // * LBHttpSslCondition#LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_256_GCM_SHA384
    //
    //  Cipher used for an established SSL connection.
	UsedSslCipher *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBHttpSslCondition__TYPE_IDENTIFIER = "LBHttpSslCondition"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_256_CBC_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_128_CBC_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_3DES_EDE_CBC_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_128_CBC_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_128_GCM_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_256_CBC_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_RSA_WITH_AES_256_GCM_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_CLIENT_SUPPORTED_SSL_CIPHERS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_SESSION_REUSED_IGNORE = "IGNORE"
const LBHttpSslCondition_SESSION_REUSED_REUSED = "REUSED"
const LBHttpSslCondition_SESSION_REUSED_NEW = "NEW"
const LBHttpSslCondition_USED_PROTOCOL_SSL_V2 = "SSL_V2"
const LBHttpSslCondition_USED_PROTOCOL_SSL_V3 = "SSL_V3"
const LBHttpSslCondition_USED_PROTOCOL_TLS_V1 = "TLS_V1"
const LBHttpSslCondition_USED_PROTOCOL_TLS_V1_1 = "TLS_V1_1"
const LBHttpSslCondition_USED_PROTOCOL_TLS_V1_2 = "TLS_V1_2"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_256_CBC_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_128_CBC_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_3DES_EDE_CBC_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_128_CBC_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_128_GCM_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_256_CBC_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_RSA_WITH_AES_256_GCM_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"
const LBHttpSslCondition_USED_SSL_CIPHER_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over HTTPS. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LBHttpsMonitorProfile struct {
    // String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST.
	RequestBody *string
    // Array of HTTP request headers.
	RequestHeaders []LbHttpRequestHeader
    // Possible values are: 
    //
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_METHOD_GET
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_METHOD_OPTIONS
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_METHOD_POST
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_METHOD_HEAD
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_METHOD_PUT
    //
    //  The health check method for HTTP monitor type.
	RequestMethod *string
    // For HTTPS active healthchecks, the HTTPS request url sent can be customized and can include query parameters.
	RequestUrl *string
    // Possible values are: 
    //
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_VERSION_1_0
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_VERSION_1_1
    // * LBHttpsMonitorProfile#LBHttpsMonitorProfile_REQUEST_VERSION_2_0
    //
    //  HTTP request version.
	RequestVersion *string
    // If HTTP response body match string (regular expressions not supported) is specified (using LBHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful.
	ResponseBody *string
    // The HTTP response status code should be a valid HTTP status code. format: int32
	ResponseStatusCodes []int64
    // The setting is used when the monitor acts as an SSL client and establishing a connection to the backend server.
	ServerSslProfileBinding *LBServerSslProfileBinding
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
const LBHttpsMonitorProfile_REQUEST_METHOD_GET = "GET"
const LBHttpsMonitorProfile_REQUEST_METHOD_OPTIONS = "OPTIONS"
const LBHttpsMonitorProfile_REQUEST_METHOD_POST = "POST"
const LBHttpsMonitorProfile_REQUEST_METHOD_HEAD = "HEAD"
const LBHttpsMonitorProfile_REQUEST_METHOD_PUT = "PUT"
const LBHttpsMonitorProfile_REQUEST_VERSION_1_0 = "HTTP_VERSION_1_0"
const LBHttpsMonitorProfile_REQUEST_VERSION_1_1 = "HTTP_VERSION_1_1"
const LBHttpsMonitorProfile_REQUEST_VERSION_2_0 = "HTTP_VERSION_2_0"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over ICMP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healt hchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LBIcmpMonitorProfile struct {
    // The data size (in byte) of the ICMP healthcheck packet format: int64
	DataLength *int64
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// This condition is used to match IP header fields of HTTP messages. Either source_address or group_id should be specified.
type LBIpHeaderCondition struct {
    // Source IP address of HTTP message should match IP addresses which are configured in Group in order to perform actions.
	GroupPath *string
    // Source IP address of HTTP message. IP Address can be expressed as a single IP address like 10.1.1.1, or a range of IP addresses like 10.1.1.101-10.1.1.160. Both IPv4 and IPv6 addresses are supported. format: address-or-block-or-range
	SourceAddress *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBIpHeaderCondition__TYPE_IDENTIFIER = "LBIpHeaderCondition"

// This action is used to control access to backend server resources using JSON Web Token(JWT) authentication. The JWT authentication is done before any HTTP manipulation if the HTTP request matches the given condition in LBRule. Any verification failed, the HTTP process will be terminated, and HTTP response with 401 status code and WWW-Authentication header will be returned to client.
type LBJwtAuthAction struct {
    // LBJwtKey used for verifying the signature of JWT token
	Key *data.StructValue
    // Specify whether to pass the JWT to backend server or remove it. By default, it is false which means will not pass the JWT to backend servers.
	PassJwtToPool *bool
    // A description of the protected area. If no realm is specified, clients often display a formatted hostname instead. The configured realm is returned when client request is rejected with 401 http status. In the response, it will be \"WWW-Authentication: Bearer realm=<realm>\".
	Realm *string
    // JWT is an open standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Load balancer will search for every specified tokens one by one for the jwt message until found. This parameter is optional. In case not found or this field is not configured, load balancer searches the Bearer header by default in the http request \"Authorization: Bearer <token>\".
	Tokens []string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBJwtAuthAction__TYPE_IDENTIFIER = "LBJwtAuthAction"

// The key is used to specify certificate which is used to verify the signature of JWT tokens.
type LBJwtCertificateKey struct {
    // Certificate identifier
	CertificatePath *string
    // Possible values are: 
    //
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTCERTIFICATEKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTSYMMETRICKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTPUBLICKEY
    //
    //  The property is used to identify JWT key type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBJwtCertificateKey__TYPE_IDENTIFIER = "LBJwtCertificateKey"

// LBJwtKey specifies the symmetric key or asymmetric public key used to decrypt the data in JWT.
type LBJwtKey struct {
    // Possible values are: 
    //
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTCERTIFICATEKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTSYMMETRICKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTPUBLICKEY
    //
    //  The property is used to identify JWT key type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBJwtKey__TYPE_IDENTIFIER = "LBJwtKey"
const LBJwtKey_TYPE_LBJWTCERTIFICATEKEY = "LBJwtCertificateKey"
const LBJwtKey_TYPE_LBJWTSYMMETRICKEY = "LBJwtSymmetricKey"
const LBJwtKey_TYPE_LBJWTPUBLICKEY = "LBJwtPublicKey"

// The key is used to specify the public key content which is used to verify the signature of JWT tokens.
type LBJwtPublicKey struct {
    // Content of public key
	PublicKeyContent *string
    // Possible values are: 
    //
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTCERTIFICATEKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTSYMMETRICKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTPUBLICKEY
    //
    //  The property is used to identify JWT key type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBJwtPublicKey__TYPE_IDENTIFIER = "LBJwtPublicKey"

// The key is used to specify the symmetric key which is used to verify the signature of JWT tokens.
type LBJwtSymmetricKey struct {
    // Possible values are: 
    //
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTCERTIFICATEKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTSYMMETRICKEY
    // * LBJwtKey#LBJwtKey_TYPE_LBJWTPUBLICKEY
    //
    //  The property is used to identify JWT key type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBJwtSymmetricKey__TYPE_IDENTIFIER = "LBJwtSymmetricKey"

type LBMonitorProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBMonitorProfile__TYPE_IDENTIFIER = "LBMonitorProfile"
const LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE = "LBTcpMonitorProfile"
const LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE = "LBUdpMonitorProfile"
const LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE = "LBIcmpMonitorProfile"
const LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE = "LBHttpMonitorProfile"
const LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE = "LBHttpsMonitorProfile"
const LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE = "LBPassiveMonitorProfile"

// The passive type of LBMonitorProfile.
type LBPassiveMonitorProfile struct {
    // When the consecutive failures reach this value, then the member is considered temporarily unavailable for a configurable period format: int64
	MaxFails *int64
    // After this timeout period, the member is tried again for a new connection to see if it is available. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBPassiveMonitorProfile__TYPE_IDENTIFIER = "LBPassiveMonitorProfile"

// Persistence cookie time.
type LBPersistenceCookieTime struct {
    // HTTP cookie max-age to expire cookie, only available for insert mode. format: int64
	CookieMaxIdle *int64
    // Possible values are: 
    //
    // * LBCookieTime#LBCookieTime_TYPE_LBSESSIONCOOKIETIME
    // * LBCookieTime#LBCookieTime_TYPE_LBPERSISTENCECOOKIETIME
    //
    //  Both session cookie and persistence cookie are supported, Use LbSessionCookieTime for session cookie time setting, Use LbPersistenceCookieTime for persistence cookie time setting
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBPersistenceCookieTime__TYPE_IDENTIFIER = "LBPersistenceCookieTime"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it. LBGenericPersistenceProfile cannot be attached to LBVirtualServer directly, it can be specified in LBVariablePersistenceOnAction or LBVariablePersistenceLearnAction in LBRule. If a user attaches a LBGenericPersistenceProfile directly to a virtual server, the operation is rejected.
type LBPersistenceProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBSOURCEIPPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBCOOKIEPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBGENERICPERSISTENCEPROFILE
    //
    //  The resource_type property identifies persistence profile type.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled. Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first. When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBPersistenceProfile__TYPE_IDENTIFIER = "LBPersistenceProfile"
const LBPersistenceProfile_RESOURCE_TYPE_LBSOURCEIPPERSISTENCEPROFILE = "LBSourceIpPersistenceProfile"
const LBPersistenceProfile_RESOURCE_TYPE_LBCOOKIEPERSISTENCEPROFILE = "LBCookiePersistenceProfile"
const LBPersistenceProfile_RESOURCE_TYPE_LBGENERICPERSISTENCEPROFILE = "LBGenericPersistenceProfile"

// Defining access of a Group from a LBVirtualServer and binding to LBMonitorProfile.
type LBPool struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the pool. If multiple active monitors are configured, the pool member status is UP only when the health check status for all the monitors are UP.
	ActiveMonitorPaths []string
    // Possible values are: 
    //
    // * LBPool#LBPool_ALGORITHM_ROUND_ROBIN
    // * LBPool#LBPool_ALGORITHM_WEIGHTED_ROUND_ROBIN
    // * LBPool#LBPool_ALGORITHM_LEAST_CONNECTION
    // * LBPool#LBPool_ALGORITHM_WEIGHTED_LEAST_CONNECTION
    // * LBPool#LBPool_ALGORITHM_IP_HASH
    //
    //  Load Balancing algorithm chooses a server for each new connection by going through the list of servers in the pool. Currently, following load balancing algorithms are supported with ROUND_ROBIN as the default. ROUND_ROBIN means that a server is selected in a round-robin fashion. The weight would be ignored even if it is configured. WEIGHTED_ROUND_ROBIN means that a server is selected in a weighted round-robin fashion. Default weight of 1 is used if weight is not configured. LEAST_CONNECTION means that a server is selected when it has the least number of connections. The weight would be ignored even if it is configured. Slow start would be enabled by default. WEIGHTED_LEAST_CONNECTION means that a server is selected in a weighted least connection fashion. Default weight of 1 is used if weight is not configured. Slow start would be enabled by default. IP_HASH means that consistent hash is performed on the source IP address of the incoming connection. This ensures that the same client IP address will always reach the same server as long as no server goes down or up. It may be used on the Internet to provide a best-effort stickiness to clients which refuse session cookies.
	Algorithm *string
    // Load balancer pool support grouping object as dynamic pool members. When member group is defined, members setting should not be specified.
	MemberGroup *LBPoolMemberGroup
    // Server pool consists of one or more pool members. Each pool member is identified, typically, by an IP address and a port.
	Members []LBPoolMember
    // A pool is considered active if there are at least certain minimum number of members. format: int64
	MinActiveMembers *int64
    // Passive healthchecks are disabled by default and can be enabled by attaching a passive health monitor to a server pool. Each time a client connection to a pool member fails, its failed count is incremented. For pools bound to L7 virtual servers, a connection is considered to be failed and failed count is incremented if any TCP connection errors (e.g. TCP RST or failure to send data) or SSL handshake failures occur. For pools bound to L4 virtual servers, if no response is received to a TCP SYN sent to the pool member or if a TCP RST is received in response to a TCP SYN, then the pool member is considered to have failed and the failed count is incremented.
	PassiveMonitorPath *string
    // Depending on the topology, Source NAT (SNAT) may be required to ensure traffic from the server destined to the client is received by the load balancer. SNAT can be enabled per pool. If SNAT is not enabled for a pool, then load balancer uses the client IP and port (spoofing) while establishing connections to the servers. This is referred to as no-SNAT or TRANSPARENT mode. By default Source NAT is enabled as LBSnatAutoMap.
	SnatTranslation *data.StructValue
    // TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending multiple client requests from different client TCP connections.
	TcpMultiplexingEnabled *bool
    // The maximum number of TCP connections per pool that are idly kept alive for sending future client requests. format: int64
	TcpMultiplexingNumber *int64
}
const LBPool_ALGORITHM_ROUND_ROBIN = "ROUND_ROBIN"
const LBPool_ALGORITHM_WEIGHTED_ROUND_ROBIN = "WEIGHTED_ROUND_ROBIN"
const LBPool_ALGORITHM_LEAST_CONNECTION = "LEAST_CONNECTION"
const LBPool_ALGORITHM_WEIGHTED_LEAST_CONNECTION = "WEIGHTED_LEAST_CONNECTION"
const LBPool_ALGORITHM_IP_HASH = "IP_HASH"

// Pool member.
type LBPoolMember struct {
    // Possible values are: 
    //
    // * LBPoolMember#LBPoolMember_ADMIN_STATE_ENABLED
    // * LBPoolMember#LBPoolMember_ADMIN_STATE_DISABLED
    // * LBPoolMember#LBPoolMember_ADMIN_STATE_GRACEFUL_DISABLED
    //
    //  Member admin state.
	AdminState *string
    // Backup servers are typically configured with a sorry page indicating to the user that the application is currently unavailable. While the pool is active (a specified minimum number of pool members are active) BACKUP members are skipped during server selection. When the pool is inactive, incoming connections are sent to only the BACKUP member(s).
	BackupMember *bool
    // Pool member name.
	DisplayName *string
    // Pool member IP address. format: ip
	IpAddress *string
    // To ensure members are not overloaded, connections to a member can be capped by the load balancer. When a member reaches this limit, it is skipped during server selection. If it is not specified, it means that connections are unlimited. format: int64
	MaxConcurrentConnections *int64
    // If port is specified, all connections will be sent to this port. Only single port is supported. If unset, the same port the client connected to will be used, it could be overrode by default_pool_member_port setting in virtual server. The port should not specified for port range case. format: port-or-range
	Port *string
    // Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing algorithm. The weight value would be ignored in other algorithms. format: int64
	Weight *int64
}
const LBPoolMember_ADMIN_STATE_ENABLED = "ENABLED"
const LBPoolMember_ADMIN_STATE_DISABLED = "DISABLED"
const LBPoolMember_ADMIN_STATE_GRACEFUL_DISABLED = "GRACEFUL_DISABLED"

// Pool member group.
type LBPoolMemberGroup struct {
    // The list is used to show the customized pool member settings. User can only user pool member action API to update the admin state for a specific IP address.
	CustomizedMembers []PoolMemberSetting
    // Load balancer pool support Group as dynamic pool members. The IP list of the Group would be used as pool member IP setting.
	GroupPath *string
    // Possible values are: 
    //
    // * LBPoolMemberGroup#LBPoolMemberGroup_IP_REVISION_FILTER_IPV4
    // * LBPoolMemberGroup#LBPoolMemberGroup_IP_REVISION_FILTER_IPV6
    // * LBPoolMemberGroup#LBPoolMemberGroup_IP_REVISION_FILTER_IPV4_IPV6
    //
    //  Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out.
	IpRevisionFilter *string
    // The size is used to define the maximum number of grouping object IP address list. These IP addresses would be used as pool members. If the grouping object includes more than certain number of IP addresses, the redundant parts would be ignored and those IP addresses would not be treated as pool members. If the size is not specified, one member is budgeted for this dynamic pool so that the pool has at least one member even if some other dynamic pools grow beyond the capacity of load balancer service. Other members are picked according to available dynamic capacity. The unused members would be set to DISABLED so that the load balancer system itself is not overloaded during runtime. format: int64
	MaxIpListSize *int64
    // If port is specified, all connections will be sent to this port. If unset, the same port the client connected to will be used, it could be overridden by default_pool_member_ports setting in virtual server. The port should not specified for multiple ports case. format: int32
	Port *int64
}
const LBPoolMemberGroup_IP_REVISION_FILTER_IPV4 = "IPV4"
const LBPoolMemberGroup_IP_REVISION_FILTER_IPV6 = "IPV6"
const LBPoolMemberGroup_IP_REVISION_FILTER_IPV4_IPV6 = "IPV4_IPV6"

// Binding of a LBPool and Group to a LBVirtualServer used to route application traffic passing through load balancers. LBRule uses match conditions to match application traffic passing through a LBVirtualServer using HTTP or HTTPS. Can bind multiple LBVirtualServers to a Group. Each LBRule consists of two optional match conditions, each match contidion defines a criterion for application traffic. If no match conditions are specified, then the LBRule will always match and it is used typically to define default rules. If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the LBRule to be considered a match. A match indicates that the LBVirtualServer should route the request to the Group (parent of LBRule).
type LBRule struct {
    // A list of actions to be executed at specified phase when load balancer rule matches. The actions are used to manipulate application traffic, such as rewrite URI of HTTP messages, redirect HTTP messages, etc.
	Actions []*data.StructValue
    // A display name useful for identifying an LBRule.
	DisplayName *string
    // A list of match conditions used to match application traffic. Multiple match conditions can be specified in one load balancer rule, each match condition defines a criterion to match application traffic. If no match conditions are specified, then the load balancer rule will always match and it is used typically to define default rules. If more than one match condition is specified, then match strategy determines if all conditions should match or any one condition should match for the load balancer rule to considered a match.
	MatchConditions []*data.StructValue
    // Possible values are: 
    //
    // * LBRule#LBRule_MATCH_STRATEGY_ALL
    // * LBRule#LBRule_MATCH_STRATEGY_ANY
    //
    //  If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the LB Rule to be considered a match. - ALL indicates that both host_match and path_match must match for this LBRule to be considered a match. - ANY indicates that either host_match or patch match may match for this LBRule to be considered a match.
	MatchStrategy *string
    // Possible values are: 
    //
    // * LBRule#LBRule_PHASE_HTTP_REQUEST_REWRITE
    // * LBRule#LBRule_PHASE_HTTP_FORWARDING
    // * LBRule#LBRule_PHASE_HTTP_RESPONSE_REWRITE
    // * LBRule#LBRule_PHASE_HTTP_ACCESS
    // * LBRule#LBRule_PHASE_TRANSPORT
    //
    //  Each load balancer rule is used at a specific phase of load balancer processing. Currently five phases are supported, HTTP_REQUEST_REWRITE, HTTP_FORWARDING, HTTP_RESPONSE_REWRITE, HTTP_ACCESS and TRANSPORT. When an HTTP request message is received by load balancer, all HTTP_REQUEST_REWRITE rules, if present are executed in the order they are applied to virtual server. And then if HTTP_FORWARDING rules present, only first matching rule's action is executed, remaining rules are not checked. HTTP_FORWARDING rules can have only one action. If the request is forwarded to a backend server and the response goes back to load balancer, all HTTP_RESPONSE_REWRITE rules, if present, are executed in the order they are applied to the virtual server. In HTTP_ACCESS phase, user can define action to control access using JWT authentication. In TRANSPORT phase, user can define the condition to match SNI in TLS client hello and define the action to do SSL end-to-end, SSL offloading or SSL passthrough using a specific load balancer server pool.
	Phase *string
}
const LBRule_MATCH_STRATEGY_ALL = "ALL"
const LBRule_MATCH_STRATEGY_ANY = "ANY"
const LBRule_PHASE_HTTP_REQUEST_REWRITE = "HTTP_REQUEST_REWRITE"
const LBRule_PHASE_HTTP_FORWARDING = "HTTP_FORWARDING"
const LBRule_PHASE_HTTP_RESPONSE_REWRITE = "HTTP_RESPONSE_REWRITE"
const LBRule_PHASE_HTTP_ACCESS = "HTTP_ACCESS"
const LBRule_PHASE_TRANSPORT = "TRANSPORT"

// Load balancer rule actions are used to manipulate application traffic. Currently load balancer rules can be used at three load balancer processing phases. Each phase has its own supported type of actions. Supported actions in HTTP_REQUST_REWRITE phase are: LBHttpRequestUriRewriteAction LBHttpRequestHeaderRewriteAction LBHttpRequestHeaderDeleteAction LBVariableAssignmentAction Supported actions in HTTP_FORWARDING phase are: LBHttpRejectAction LBHttpRedirectAction LBSelectPoolAction LBVariablePersistenceOnAction LBConnectionDropAction Supported action in HTTP_RESPONSE_REWRITE phase is: LBHttpResponseHeaderRewriteAction LBHttpResponseHeaderDeleteAction LBVariablePersistenceLearnAction Supported action in HTTP_ACCESS phase is: LBJwtAuthAction LBConnectionDropAction LBVariableAssignmentAction Supported action in TRANSPORT phase is: LBSslModeSelectionAction LBSelectPoolAction If the match type of an LBRuleCondition field is specified as REGEX and named capturing groups are used in the specified regular expression. The groups can be used as variables in LBRuleAction fields. For example, define a rule with LBHttpRequestUriCondition as match condition and LBHttpRequestUriRewriteAction as action. Set match_type field of LBHttpRequestUriCondition to REGEX, and set uri field to \"/news/(?&lt;year&gt;\\d+)/(?&lt;month&gt;\\d+)/(?&lt;article&gt;.\*)\". Set uri field of LBHttpRequestUriRewriteAction to: \"/news/$year-$month/$article\" In uri field of LBHttpRequestUriCondition, the (?&lt;year&gt;\\d+), (?&lt;month&gt;\\d+) and (?&lt;article&gt;.\*) are named capturing groups, they define variables named $year, $month and $article respectively. The defined variables are used in LBHttpRequestUriRewriteAction. For a matched HTTP request with URI \"/news/2017/06/xyz.html\", the substring \"2017\" is captured in variable $year, \"06\" is captured in variable $month, and \"xyz.html\" is captured in variable $article. The LBHttpRequestUriRewriteAction will rewrite the URI to: \"/news/2017-06/xyz.html\" A set of built-in variables can be used in LBRuleAction as well. The name of built-in variables start with underscore, the name of user defined variables is not allowed to start with underscore. Following are some of the built-in variables: $_scheme: Reference the scheme part of matched HTTP messages, could be \"http\" or \"https\". $_host: Host of matched HTTP messages, for example \"www.example.com\". $_server_port: Port part of URI, it is also the port of the server which accepted a request. Default port is 80 for http and 443 for https. $_uri: The URI path, for example \"/products/sample.html\". $_request_uri: Full original request URI with arguments, for example, \"/products/sample.html?a=b&c=d\". $_args: URI arguments, for instance \"a=b&c=d\" $_is_args: \"?\" if a request has URI arguments, or an empty string otherwise. For the full list of built-in variables, please reference the NSX-T Administrator's Guide.
type LBRuleAction struct {
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBRuleAction__TYPE_IDENTIFIER = "LBRuleAction"
const LBRuleAction_TYPE_LBSELECTPOOLACTION = "LBSelectPoolAction"
const LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION = "LBHttpRequestUriRewriteAction"
const LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION = "LBHttpRequestHeaderRewriteAction"
const LBRuleAction_TYPE_LBHTTPREJECTACTION = "LBHttpRejectAction"
const LBRuleAction_TYPE_LBHTTPREDIRECTACTION = "LBHttpRedirectAction"
const LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION = "LBHttpResponseHeaderRewriteAction"
const LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION = "LBHttpRequestHeaderDeleteAction"
const LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION = "LBHttpResponseHeaderDeleteAction"
const LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION = "LBVariableAssignmentAction"
const LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION = "LBVariablePersistenceOnAction"
const LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION = "LBVariablePersistenceLearnAction"
const LBRuleAction_TYPE_LBJWTAUTHACTION = "LBJwtAuthAction"
const LBRuleAction_TYPE_LBSSLMODESELECTIONACTION = "LBSslModeSelectionAction"
const LBRuleAction_TYPE_LBCONNECTIONDROPACTION = "LBConnectionDropAction"

// Match conditions are used to match application traffic passing through load balancers. Multiple match conditions can be specified in one load balancer rule, each match condition defines a criterion for application traffic. If inverse field is set to true, the match result of the condition is inverted. If more than one match condition is specified, match strategy determines if all conditions should match or any one condition should match for the load balancer rule to be considered a match. Currently only HTTP messages are supported by load balancer rules. Each load balancer rule is used at a specific phase of load balancer processing. Currently three phases are supported, HTTP_REQUEST_REWRITE, HTTP_FORWARDING and HTTP_RESPONSE_REWRITE. Each phase supports certain types of match conditions, supported match conditions in HTTP_REQUEST_REWRITE phase are: LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBHttpRequestBodyCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition Supported match conditions in HTTP_FORWARDING phase are: LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBHttpRequestBodyCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition LBSslSniCondition Supported match conditions in HTTP_RESPONSE_REWRITE phase are: LBHttpResponseHeaderCondition LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition Supported match condition in HTTP_ACCESS phase is: LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBHttpRequestBodyCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition Supported match condition in TRANSPORT phase is: LBSslSniCondition
type LBRuleCondition struct {
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBRuleCondition__TYPE_IDENTIFIER = "LBRuleCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION = "LBHttpRequestUriCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION = "LBHttpRequestHeaderCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION = "LBHttpRequestMethodCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION = "LBHttpRequestUriArgumentsCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION = "LBHttpRequestVersionCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION = "LBHttpRequestCookieCondition"
const LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION = "LBHttpRequestBodyCondition"
const LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION = "LBHttpResponseHeaderCondition"
const LBRuleCondition_TYPE_LBTCPHEADERCONDITION = "LBTcpHeaderCondition"
const LBRuleCondition_TYPE_LBIPHEADERCONDITION = "LBIpHeaderCondition"
const LBRuleCondition_TYPE_LBVARIABLECONDITION = "LBVariableCondition"
const LBRuleCondition_TYPE_LBHTTPSSLCONDITION = "LBHttpSslCondition"
const LBRuleCondition_TYPE_LBSSLSNICONDITION = "LBSslSniCondition"

// This action is used to select a pool for matched HTTP request messages. The pool is specified by path. The matched HTTP request messages are forwarded to the specified pool.
type LBSelectPoolAction struct {
    // Path of load balancer pool.
	PoolId *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSelectPoolAction__TYPE_IDENTIFIER = "LBSelectPoolAction"

// Server SSL profile.
type LBServerSslProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * LBServerSslProfile#LBServerSslProfile_CIPHER_GROUP_LABEL_BALANCED
    // * LBServerSslProfile#LBServerSslProfile_CIPHER_GROUP_LABEL_HIGH_SECURITY
    // * LBServerSslProfile#LBServerSslProfile_CIPHER_GROUP_LABEL_HIGH_COMPATIBILITY
    // * LBServerSslProfile#LBServerSslProfile_CIPHER_GROUP_LABEL_CUSTOM
    //
    //  It is a label of cipher group which is mostly consumed by GUI.
	CipherGroupLabel *string
    // Possible values are: 
    //
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_3DES_EDE_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_AES_128_GCM_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_RSA_WITH_AES_256_GCM_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    // * LBServerSslProfile#LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    //
    //  Supported SSL cipher list to client side.
	Ciphers []string
    // This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant.
	IsFips *bool
    // This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.
	IsSecure *bool
    // Possible values are: 
    //
    // * LBServerSslProfile#LBServerSslProfile_PROTOCOLS_SSL_V2
    // * LBServerSslProfile#LBServerSslProfile_PROTOCOLS_SSL_V3
    // * LBServerSslProfile#LBServerSslProfile_PROTOCOLS_TLS_V1
    // * LBServerSslProfile#LBServerSslProfile_PROTOCOLS_TLS_V1_1
    // * LBServerSslProfile#LBServerSslProfile_PROTOCOLS_TLS_V1_2
    //
    //  SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.
	Protocols []string
    // SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.
	SessionCacheEnabled *bool
}
const LBServerSslProfile_CIPHER_GROUP_LABEL_BALANCED = "BALANCED"
const LBServerSslProfile_CIPHER_GROUP_LABEL_HIGH_SECURITY = "HIGH_SECURITY"
const LBServerSslProfile_CIPHER_GROUP_LABEL_HIGH_COMPATIBILITY = "HIGH_COMPATIBILITY"
const LBServerSslProfile_CIPHER_GROUP_LABEL_CUSTOM = "CUSTOM"
const LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
const LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
const LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"
const LBServerSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA"
const LBServerSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA"
const LBServerSslProfile_CIPHERS_RSA_WITH_3DES_EDE_CBC_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
const LBServerSslProfile_CIPHERS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
const LBServerSslProfile_CIPHERS_RSA_WITH_AES_128_CBC_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256"
const LBServerSslProfile_CIPHERS_RSA_WITH_AES_128_GCM_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256"
const LBServerSslProfile_CIPHERS_RSA_WITH_AES_256_CBC_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256"
const LBServerSslProfile_CIPHERS_RSA_WITH_AES_256_GCM_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384"
const LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
const LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
const LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
const LBServerSslProfile_CIPHERS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
const LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"
const LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"
const LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"
const LBServerSslProfile_CIPHERS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"
const LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"
const LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"
const LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"
const LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"
const LBServerSslProfile_CIPHERS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
const LBServerSslProfile_PROTOCOLS_SSL_V2 = "SSL_V2"
const LBServerSslProfile_PROTOCOLS_SSL_V3 = "SSL_V3"
const LBServerSslProfile_PROTOCOLS_TLS_V1 = "TLS_V1"
const LBServerSslProfile_PROTOCOLS_TLS_V1_1 = "TLS_V1_1"
const LBServerSslProfile_PROTOCOLS_TLS_V1_2 = "TLS_V1_2"

// Server SSL profile binding.
type LBServerSslProfileBinding struct {
    // Authentication depth is used to set the verification depth in the server certificates chain. format: int64
	CertificateChainDepth *int64
    // To support client authentication (load balancer acting as a client authenticating to the backend server), client certificate can be specified in the server-side SSL profile binding
	ClientCertificatePath *string
    // Possible values are: 
    //
    // * LBServerSslProfileBinding#LBServerSslProfileBinding_SERVER_AUTH_REQUIRED
    // * LBServerSslProfileBinding#LBServerSslProfileBinding_SERVER_AUTH_IGNORE
    // * LBServerSslProfileBinding#LBServerSslProfileBinding_SERVER_AUTH_AUTO_APPLY
    //
    //  Server authentication mode.
	ServerAuth *string
    // If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.
	ServerAuthCaPaths []string
    // A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.
	ServerAuthCrlPaths []string
    // Server SSL profile defines reusable, application-independent server side SSL properties.
	SslProfilePath *string
}
const LBServerSslProfileBinding_SERVER_AUTH_REQUIRED = "REQUIRED"
const LBServerSslProfileBinding_SERVER_AUTH_IGNORE = "IGNORE"
const LBServerSslProfileBinding_SERVER_AUTH_AUTO_APPLY = "AUTO_APPLY"

// Loadbalancer Service.
type LBService struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Flag to enable access log
	AccessLogEnabled *bool
    // LBS could be instantiated (or created) on the Tier-1, etc. For now, only the Tier-1 object is supported.
	ConnectivityPath *string
    // Flag to enable the load balancer service.
	Enabled *bool
    // Possible values are: 
    //
    // * LBService#LBService_ERROR_LOG_LEVEL_DEBUG
    // * LBService#LBService_ERROR_LOG_LEVEL_INFO
    // * LBService#LBService_ERROR_LOG_LEVEL_WARNING
    // * LBService#LBService_ERROR_LOG_LEVEL_ERROR
    // * LBService#LBService_ERROR_LOG_LEVEL_CRITICAL
    // * LBService#LBService_ERROR_LOG_LEVEL_ALERT
    // * LBService#LBService_ERROR_LOG_LEVEL_EMERGENCY
    //
    //  Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.
	ErrorLogLevel *string
    // If relax_scale_validation is true, the scale validations for virtual servers/pools/pool members/rules are relaxed for load balancer service. When load balancer service is deployed on edge nodes, the scale of virtual servers/pools/pool members for the load balancer service should not exceed the scale number of the largest load balancer size which could be configured on a certain edge form factor. For example, the largest load balancer size supported on a MEDIUM edge node is MEDIUM. So one SMALL load balancer deployed on MEDIUM edge nodes can support the scale number of MEDIUM load balancer. It is not recommended to enable active monitors if relax_scale_validation is true due to performance consideration. If relax_scale_validation is false, scale numbers should be validated for load balancer service.
	RelaxScaleValidation *bool
    // Possible values are: 
    //
    // * LBService#LBService_SIZE_SMALL
    // * LBService#LBService_SIZE_MEDIUM
    // * LBService#LBService_SIZE_LARGE
    // * LBService#LBService_SIZE_XLARGE
    // * LBService#LBService_SIZE_DLB
    //
    //  Load balancer service size.
	Size *string
}
const LBService_ERROR_LOG_LEVEL_DEBUG = "DEBUG"
const LBService_ERROR_LOG_LEVEL_INFO = "INFO"
const LBService_ERROR_LOG_LEVEL_WARNING = "WARNING"
const LBService_ERROR_LOG_LEVEL_ERROR = "ERROR"
const LBService_ERROR_LOG_LEVEL_CRITICAL = "CRITICAL"
const LBService_ERROR_LOG_LEVEL_ALERT = "ALERT"
const LBService_ERROR_LOG_LEVEL_EMERGENCY = "EMERGENCY"
const LBService_SIZE_SMALL = "SMALL"
const LBService_SIZE_MEDIUM = "MEDIUM"
const LBService_SIZE_LARGE = "LARGE"
const LBService_SIZE_XLARGE = "XLARGE"
const LBService_SIZE_DLB = "DLB"

// Session cookie time.
type LBSessionCookieTime struct {
    // Instead of using HTTP Cookie max-age and relying on client to expire the cookie, max idle time and/or max lifetime of the cookie can be used. Max idle time, if configured, specifies the maximum interval the cookie is valid for from the last time it was seen in a request. It is available for insert mode. format: int64
	CookieMaxIdle *int64
    // Max life time, if configured, specifies the maximum interval the cookie is valid for from the first time the cookie was seen in a request. It is available for insert mode. format: int64
	CookieMaxLife *int64
    // Possible values are: 
    //
    // * LBCookieTime#LBCookieTime_TYPE_LBSESSIONCOOKIETIME
    // * LBCookieTime#LBCookieTime_TYPE_LBPERSISTENCECOOKIETIME
    //
    //  Both session cookie and persistence cookie are supported, Use LbSessionCookieTime for session cookie time setting, Use LbPersistenceCookieTime for persistence cookie time setting
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSessionCookieTime__TYPE_IDENTIFIER = "LBSessionCookieTime"

// Snat auto map.
type LBSnatAutoMap struct {
    // Possible values are: 
    //
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATAUTOMAP
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATIPPOOL
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATDISABLED
    //
    //  Snat translation type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSnatAutoMap__TYPE_IDENTIFIER = "LBSnatAutoMap"

// Snat disabled.
type LBSnatDisabled struct {
    // Possible values are: 
    //
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATAUTOMAP
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATIPPOOL
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATDISABLED
    //
    //  Snat translation type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSnatDisabled__TYPE_IDENTIFIER = "LBSnatDisabled"

// Snat Ip element.
type LBSnatIpElement struct {
    // Ip address or ip range such as 1.1.1.1 or 1.1.1.101-1.1.1.160. format: address-or-block-or-range
	IpAddress *string
    // Subnet prefix length should be not specified if there is only one single IP address or IP range. format: int64
	PrefixLength *int64
}

// Snat Ip pool.
type LBSnatIpPool struct {
    // If an IP range is specified, the range may contain no more than 64 IP addresses.
	IpAddresses []LBSnatIpElement
    // Possible values are: 
    //
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATAUTOMAP
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATIPPOOL
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATDISABLED
    //
    //  Snat translation type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSnatIpPool__TYPE_IDENTIFIER = "LBSnatIpPool"

// Snat Translation.
type LBSnatTranslation struct {
    // Possible values are: 
    //
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATAUTOMAP
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATIPPOOL
    // * LBSnatTranslation#LBSnatTranslation_TYPE_LBSNATDISABLED
    //
    //  Snat translation type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSnatTranslation__TYPE_IDENTIFIER = "LBSnatTranslation"
const LBSnatTranslation_TYPE_LBSNATAUTOMAP = "LBSnatAutoMap"
const LBSnatTranslation_TYPE_LBSNATIPPOOL = "LBSnatIpPool"
const LBSnatTranslation_TYPE_LBSNATDISABLED = "LBSnatDisabled"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it.
type LBSourceIpPersistenceProfile struct {
    // Persistence entries are not synchronized to the HA peer by default.
	HaPersistenceMirroringEnabled *bool
    // Possible values are: 
    //
    // * LBSourceIpPersistenceProfile#LBSourceIpPersistenceProfile_PURGE_NO_PURGE
    // * LBSourceIpPersistenceProfile#LBSourceIpPersistenceProfile_PURGE_FULL
    //
    //  Persistence purge setting.
	Purge *string
    // When all connections complete (reference count reaches 0), persistence entry timer is started with the expiration time. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBSOURCEIPPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBCOOKIEPERSISTENCEPROFILE
    // * LBPersistenceProfile#LBPersistenceProfile_RESOURCE_TYPE_LBGENERICPERSISTENCEPROFILE
    //
    //  The resource_type property identifies persistence profile type.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled. Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first. When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSourceIpPersistenceProfile__TYPE_IDENTIFIER = "LBSourceIpPersistenceProfile"
const LBSourceIpPersistenceProfile_PURGE_NO_PURGE = "NO_PURGE"
const LBSourceIpPersistenceProfile_PURGE_FULL = "FULL"

// This action is used to select SSL mode. Three types of SSL mode actions can be specified in Transport phase, ssl passthrough, ssl offloading and ssl end-to-end.
type LBSslModeSelectionAction struct {
    // Possible values are: 
    //
    // * LBSslModeSelectionAction#LBSslModeSelectionAction_SSL_MODE_PASSTHROUGH
    // * LBSslModeSelectionAction#LBSslModeSelectionAction_SSL_MODE_END_TO_END
    // * LBSslModeSelectionAction#LBSslModeSelectionAction_SSL_MODE_OFFLOAD
    //
    //  SSL Passthrough: LB establishes a TCP connection with client and another connection with selected backend server. LB won't inspect the stream data between client and backend server, but just pass it through. Backend server exchanges SSL connection with client. SSL Offloading: LB terminiates the connections from client, and establishes SSL connection with it. After receiving the HTTP request, LB connects the selected backend server and talk with it via HTTP without SSL. LB estalishes new connection to selected backend server for each HTTP request, in case ntlm or multiplexing are NOT configured. SSL End-to-End: LB terminiates the connections from client, and establishes SSL connection with it. After receiving the HTTP request, LB connects the selected backend server and talk with it via HTTPS. LB estalishes new SSL connection to selected backend server for each HTTP request, in case ntlm or multiplexing are NOT configured.
	SslMode *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSslModeSelectionAction__TYPE_IDENTIFIER = "LBSslModeSelectionAction"
const LBSslModeSelectionAction_SSL_MODE_PASSTHROUGH = "SSL_PASSTHROUGH"
const LBSslModeSelectionAction_SSL_MODE_END_TO_END = "SSL_END_TO_END"
const LBSslModeSelectionAction_SSL_MODE_OFFLOAD = "SSL_OFFLOAD"

// Load balancer abstract SSL profile.
type LBSslProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// This condition is used to match SSL SNI in client hello. This condition is only supported in TRANSPORT phase. Only if virtual server is associated with client SSL profile, matching SNI condition in transport phase is available to be configured.
type LBSslSniCondition struct {
    // If true, case is significant when comparing SNI value.
	CaseSensitive *bool
    // Possible values are: 
    //
    // * LBSslSniCondition#LBSslSniCondition_MATCH_TYPE_STARTS_WITH
    // * LBSslSniCondition#LBSslSniCondition_MATCH_TYPE_ENDS_WITH
    // * LBSslSniCondition#LBSslSniCondition_MATCH_TYPE_EQUALS
    // * LBSslSniCondition#LBSslSniCondition_MATCH_TYPE_CONTAINS
    // * LBSslSniCondition#LBSslSniCondition_MATCH_TYPE_REGEX
    //
    //  Match type of SNI
	MatchType *string
    // The SNI(Server Name indication) in client hello message.
	Sni *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBSslSniCondition__TYPE_IDENTIFIER = "LBSslSniCondition"
const LBSslSniCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBSslSniCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBSslSniCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBSslSniCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBSslSniCondition_MATCH_TYPE_REGEX = "REGEX"

// This condition is used to match TCP header fields of HTTP messages. Currently, only the TCP source port is supported. Ports can be expressed as a single port number like 80, or a port range like 1024-1030.
type LBTcpHeaderCondition struct {
    // TCP source port of HTTP message format: port-or-range
	SourcePort *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBTcpHeaderCondition__TYPE_IDENTIFIER = "LBTcpHeaderCondition"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over TCP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LBTcpMonitorProfile struct {
    // Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.
	Receive *string
    // If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.
	Send *string
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over UDP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LBUdpMonitorProfile struct {
    // Expected data, can be anywhere in the response and it has to be a string, regular expressions are not supported. UDP healthcheck is considered failed if there is no server response within the timeout period.
	Receive *string
    // The data to be sent to the monitored server.
	Send *string
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBTCPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBUDPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBICMPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBHTTPSMONITORPROFILE
    // * LBMonitorProfile#LBMonitorProfile_RESOURCE_TYPE_LBPASSIVEMONITORPROFILE
    //
    //  There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// This action is used to create a new variable and assign value to it. One action can be used to create one variable. To create multiple variables, multiple actions must be defined. The variables can be used by LBVariableCondition, etc.
type LBVariableAssignmentAction struct {
    // Name of the variable to be assigned.
	VariableName *string
    // Value of variable.
	VariableValue *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBVariableAssignmentAction__TYPE_IDENTIFIER = "LBVariableAssignmentAction"

// This condition is used to match variable's name and value at all phases. The variables could be captured from REGEX or assigned by LBVariableAssignmentAction or system embedded variable. Varialbe_name and variable_value should be matched at the same time.
type LBVariableCondition struct {
    // If true, case is significant when comparing variable value.
	CaseSensitive *bool
    // Possible values are: 
    //
    // * LBVariableCondition#LBVariableCondition_MATCH_TYPE_STARTS_WITH
    // * LBVariableCondition#LBVariableCondition_MATCH_TYPE_ENDS_WITH
    // * LBVariableCondition#LBVariableCondition_MATCH_TYPE_EQUALS
    // * LBVariableCondition#LBVariableCondition_MATCH_TYPE_CONTAINS
    // * LBVariableCondition#LBVariableCondition_MATCH_TYPE_REGEX
    //
    //  Match type of variable value
	MatchType *string
    // Name of the variable to be matched
	VariableName *string
    // Value of variable to be matched
	VariableValue *string
    // A flag to indicate whether reverse the match result of this condition
	Inverse *bool
    // Possible values are: 
    //
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURICONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTMETHODCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTURIARGUMENTSCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTVERSIONCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTCOOKIECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPREQUESTBODYCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPRESPONSEHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBTCPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBIPHEADERCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBVARIABLECONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBHTTPSSLCONDITION
    // * LBRuleCondition#LBRuleCondition_TYPE_LBSSLSNICONDITION
    //
    //  Type of load balancer rule condition
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBVariableCondition__TYPE_IDENTIFIER = "LBVariableCondition"
const LBVariableCondition_MATCH_TYPE_STARTS_WITH = "STARTS_WITH"
const LBVariableCondition_MATCH_TYPE_ENDS_WITH = "ENDS_WITH"
const LBVariableCondition_MATCH_TYPE_EQUALS = "EQUALS"
const LBVariableCondition_MATCH_TYPE_CONTAINS = "CONTAINS"
const LBVariableCondition_MATCH_TYPE_REGEX = "REGEX"

// This action is performed in HTTP response rewrite phase. It is used to learn the value of variable from the HTTP response, and insert an entry into the persistence table if the entry doesn't exist.
type LBVariablePersistenceLearnAction struct {
    // If the persistence profile path is not specified, a default persistence table is created per virtual server. Currently, only LBGenericPersistenceProfile is supported.
	PersistenceProfilePath *string
    // The property is used to enable a hash operation for variable value when composing the persistence key.
	VariableHashEnabled *bool
    // The property is the name of variable to be learnt. It is used to identify which variable's value is learnt from HTTP response. The variable can be a built-in variable such as \"_cookie_JSESSIONID\", a customized variable defined in LBVariableAssignmentAction or a captured variable in regular expression such as \"article\". For the full list of built-in variables, please reference the NSX-T Administrator's Guide.
	VariableName *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBVariablePersistenceLearnAction__TYPE_IDENTIFIER = "LBVariablePersistenceLearnAction"

// This action is performed in HTTP forwarding phase. It is used to inspect the variable of HTTP request, and look up the persistence entry with its value and pool uuid as key. If the persistence entry is found, the HTTP request is forwarded to the recorded backend server according to the persistence entry. If the persistence entry is not found, a new entry is created in the table after backend server is selected.
type LBVariablePersistenceOnAction struct {
    // If the persistence profile path is not specified, a default persistence table is created per virtual server. Currently, only LBGenericPersistenceProfile is supported.
	PersistenceProfilePath *string
    // The property is used to enable a hash operation for variable value when composing the persistence key.
	VariableHashEnabled *bool
    // The property is the name of variable to be used. It specifies which variable's value of a HTTP Request will be used in the key of persistence entry. The variable can be a built-in variable such as \"_cookie_JSESSIONID\", a customized variable defined in LBVariableAssignmentAction or a captured variable in regular expression such as \"article\". For the full list of built-in variables, please reference the NSX-T Administrator's Guide.
	VariableName *string
    // Possible values are: 
    //
    // * LBRuleAction#LBRuleAction_TYPE_LBSELECTPOOLACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTURIREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREJECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREDIRECTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERREWRITEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPREQUESTHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBHTTPRESPONSEHEADERDELETEACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEASSIGNMENTACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCEONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBVARIABLEPERSISTENCELEARNACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBJWTAUTHACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBSSLMODESELECTIONACTION
    // * LBRuleAction#LBRuleAction_TYPE_LBCONNECTIONDROPACTION
    //
    //  The property identifies the load balancer rule action type.
	Type_ string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LBVariablePersistenceOnAction__TYPE_IDENTIFIER = "LBVariablePersistenceOnAction"

// All the types of LBVirtualServer extend from this abstract class. This is present for extensibility.
type LBVirtualServer struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Specifies the access list control to define how to filter the connections from clients.
	AccessListControl *LBAccessListControl
    // If access log is enabled, all HTTP requests sent to L7 virtual server are logged to the access log file. Both successful returns information responses(1xx), successful responses(2xx), redirection messages(3xx) and unsuccessful requests, backend server returns 4xx or 5xx, are logged to access log, if enabled. All L4 virtual server connections are also logged to the access log if enabled. The non-significant events such as successful requests are not logged if log_significant_event_only is set to true.
	AccessLogEnabled *bool
    // The application profile defines the application protocol characteristics. It is used to influence how load balancing is performed. Currently, LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile, etc are supported.
	ApplicationProfilePath *string
    // The setting is used when load balancer acts as an SSL server and terminating the client SSL connection
	ClientSslProfileBinding *LBClientSslProfileBinding
    // Default pool member ports when member port is not defined. format: port-or-range
	DefaultPoolMemberPorts []string
    // Flag to enable the load balancer virtual server.
	Enabled *bool
    // Configures the IP address of the LBVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfilePath *string
    // virtual servers can be associated to LBService(which is similar to physical/virtual load balancer), LB virtual servers, pools and other entities could be defined independently, the LBService identifier list here would be used to maintain the relationship of LBService and other LB entities.
	LbServicePath *string
    // The property log_significant_event_only can take effect only when access_log_enabled is true. If log_significant_event_only is true, significant events are logged in access log. For L4 virtual server, significant event means unsuccessful(error or dropped) TCP/UDP connections. For L7 virtual server, significant event means unsuccessful connections or HTTP/HTTPS requests which have error response code(e.g. 4xx, 5xx).
	LogSignificantEventOnly *bool
    // To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited. format: int64
	MaxConcurrentConnections *int64
    // To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited. format: int64
	MaxNewConnectionRate *int64
    // The server pool(LBPool) contains backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.
	PoolPath *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Load balancer rules allow customization of load balancing behavior using match/action rules. Currently, load balancer rules are supported for only layer 7 virtual servers with LBHttpProfile.
	Rules []LBRule
    // The setting is used when load balancer acts as an SSL client and establishing a connection to the backend server.
	ServerSslProfileBinding *LBServerSslProfileBinding
    // When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.
	SorryPoolPath *string
}

// Label that will be displayed for a UI element.
type Label struct {
    // If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.
	Condition *string
    // If true, displays the label only on hover
	Hover *bool
    // Icons to be applied at dashboard for the label
	Icons []Icon
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // Text to be displayed at the label.
	Text *string
}

// Represents a Label-Value widget configuration
type LabelValueConfiguration struct {
    // Layout of properties can be vertical or grid. If layout is not specified a default vertical layout is applied.
	Layout *Layout
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // An array of label-value properties.
	Properties []PropertyItem
    // Possible values are: 
    //
    // * LabelValueConfiguration#LabelValueConfiguration_SUB_TYPE_ALIGNED
    //
    //  A sub-type of LabelValueConfiguration. If sub-type is not specified the parent type is rendered. For VERTICALLY_ALIGNED sub_type, the value is placed below the label.
	SubType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LabelValueConfiguration__TYPE_IDENTIFIER = "LabelValueConfiguration"
const LabelValueConfiguration_SUB_TYPE_ALIGNED = "VERTICALLY_ALIGNED"

type LacpGroupConfigInfo struct {
    // The key represents the identifier for the group that is unique across VC.
	Key *string
    // Load balance algorithm used in LACP group. The possible values are dictated by the values available in VC. Please refer VMwareDvsLacpLoadBalanceAlgorithm documentation for a full list of values. A few examples are srcDestIp where source and destination IP are considered, srcIp where only source IP is considered.
	LoadBalanceAlgorithm *string
    // Possible values are: 
    //
    // * LacpGroupConfigInfo#LacpGroupConfigInfo_MODE_ACTIVE
    // * LacpGroupConfigInfo#LacpGroupConfigInfo_MODE_PASSIVE
    //
    //  The mode of LACP can be ACTIVE or PASSIVE. If the mode is ACTIVE, LACP is enabled unconditionally. If the mode is PASSIVE, LACP is enabled only if LACP device is detected.
	Mode *string
    // The display name of the LACP group.
	Name *string
    // Names for the uplink ports in the group.
	UplinkNames []string
    // The number of uplink ports format: int64
	UplinkNum *int64
    // Keys for the uplink ports in the group. Each uplink port is assigned a key that is unique across VC.
	UplinkPortKeys []string
}
const LacpGroupConfigInfo_MODE_ACTIVE = "ACTIVE"
const LacpGroupConfigInfo_MODE_PASSIVE = "PASSIVE"

// Represents layout of a container or widget
type Layout struct {
	Properties *LayoutProperties
    // Possible values are: 
    //
    // * Layout#Layout_TYPE_HORIZONTAL
    // * Layout#Layout_TYPE_VERTICAL
    // * Layout#Layout_TYPE_GRID
    //
    //  Describes layout of a container or widget. Layout describes how individual widgets are placed inside the container. For example, if HORIZONTAL is chosen widgets are placed side by side inside the container. If VERTICAL is chosen then widgets are placed one below the other. If GRID is chosen then the container or widget display area is divided into a grid of m rows and n columns, as specified in the properties, and the widgets are placed inside the grid.
	Type_ *string
}
const Layout_TYPE_HORIZONTAL = "HORIZONTAL"
const Layout_TYPE_VERTICAL = "VERTICAL"
const Layout_TYPE_GRID = "GRID"

// Properties of the layout of a container or widget
type LayoutProperties struct {
    // Describes the number of columns of grid layout of a container or widget. This property is applicable for grid layout only. format: int32
	NumColumns *int64
    // Describes the number of rows of grid layout of a container or widget. This property is applicable for grid layout only. format: int32
	NumRows *int64
}

type LbHttpRequestHeader struct {
    // Name of HTTP request header
	HeaderName *string
    // Value of HTTP request header
	HeaderValue *string
}

// This is the base type for all identity sources that use LDAP for authentication and group membership.
type LdapIdentitySource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LdapIdentitySource#LdapIdentitySource_RESOURCE_TYPE_ACTIVEDIRECTORYIDENTITYSOURCE
    // * LdapIdentitySource#LdapIdentitySource_RESOURCE_TYPE_OPENLDAPIDENTITYSOURCE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The subtree of the LDAP identity source to search when locating users and groups.
	BaseDn *string
    // The name of the authentication domain. When users log into NSX using an identity of the form \"user\\\\@domain\", NSX uses the domain portion to determine which LDAP identity source to use. For Active Directory, this domain name must match the domain of the Active Directory.
	DomainName *string
    // The list of LDAP servers that provide LDAP service for this identity source. Currently, only one LDAP server is supported.
	LdapServers []IdentitySourceLdapServer
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const LdapIdentitySource__TYPE_IDENTIFIER = "LdapIdentitySource"
const LdapIdentitySource_RESOURCE_TYPE_ACTIVEDIRECTORYIDENTITYSOURCE = "ActiveDirectoryIdentitySource"
const LdapIdentitySource_RESOURCE_TYPE_OPENLDAPIDENTITYSOURCE = "OpenLdapIdentitySource"

// The results of listing LDAP identity sources.
type LdapIdentitySourceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
	Results []*data.StructValue
}

// Results from probing all LDAP servers in an LDAP identity source configuration.
type LdapIdentitySourceProbeResults struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Probe results for all probed LDAP servers.
	Results []IdentitySourceLdapServerProbeResult
}

type LdapIdentitySourceSearchResultItem struct {
    // The Common Name (CN) of the entry, if available.
	CommonName *string
    // Distinguished name (DN) of the entry.
	Dn *string
    // For Active Directory (AD) users, this will be the user principal name (UPN), in the format user\\\\@domain. For non-AD users, this will be the user's uid property, followed by \"\\\\@\" and the domain of the directory. For groups, this will be the group's common name, followed by \"\\\\@\" and the domain of the directory.
	PrincipalName *string
    // Possible values are: 
    //
    // * LdapIdentitySourceSearchResultItem#LdapIdentitySourceSearchResultItem_TYPE_USER
    // * LdapIdentitySourceSearchResultItem#LdapIdentitySourceSearchResultItem_TYPE_GROUP
    //
    //  Describes the type of the entry
	Type_ *string
}
const LdapIdentitySourceSearchResultItem_TYPE_USER = "USER"
const LdapIdentitySourceSearchResultItem_TYPE_GROUP = "GROUP"

// A list of LDA entries returned from a search of an LDAP identity source.
type LdapIdentitySourceSearchResultList struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
	Results []LdapIdentitySourceSearchResultItem
}

// Detail about one error encountered during a probe.
type LdapProbeError struct {
    // Possible values are: 
    //
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_CONNECTION_TIMEOUT
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_CONNECTION_REFUSED
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_STARTTLS_FAILED
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_INVALID_CREDENTIALS
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_BASE_DN_NOT_FOUND
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_SSL_HANDSHAKE_ERROR
    // * LdapProbeError#LdapProbeError_ERROR_TYPE_GENERAL_ERROR
    //
    //  The cause of the error. CONNECTION_TIMEOUT: The connection timed out when contating the LDAP server. Check the hostname/ip. CONNECTION_REFUSED: The connection was refused when contacting the LDAP server. Ensure that the LDAP server is up and that you have the correct ip/hostname. STARTTLS_FAILED: Unable to use StartTLS to upgrade the connection to use TLS. Ensure the LDAP server supports TLS and if not, use LDAP or LDAPS as the protocol. INVALID_CREDENTIALS: The username and/or password are incorrect. THUMBPRINT_MISMATCH: A certificate thumbprint was provided in the LDAP server configuration, but did not match the certificate presented by the LDAP server. BASE_DN_NOT_FOUND: The configured base_dn does not exist on the LDAP server or is not readable. SSL_HANDSHAKE_ERROR: An error occurred while establishing a secure connection with the LDAP server. GENERAL_ERROR: An undetermined error occurred.
	ErrorType *string
}
const LdapProbeError_ERROR_TYPE_CONNECTION_TIMEOUT = "CONNECTION_TIMEOUT"
const LdapProbeError_ERROR_TYPE_CONNECTION_REFUSED = "CONNECTION_REFUSED"
const LdapProbeError_ERROR_TYPE_STARTTLS_FAILED = "STARTTLS_FAILED"
const LdapProbeError_ERROR_TYPE_INVALID_CREDENTIALS = "INVALID_CREDENTIALS"
const LdapProbeError_ERROR_TYPE_BASE_DN_NOT_FOUND = "BASE_DN_NOT_FOUND"
const LdapProbeError_ERROR_TYPE_SSL_HANDSHAKE_ERROR = "SSL_HANDSHAKE_ERROR"
const LdapProbeError_ERROR_TYPE_GENERAL_ERROR = "GENERAL_ERROR"

// Represents legend that describes the entities of the widget.
type Legend struct {
    // Possible values are: 
    //
    // * Legend#Legend_ALIGNMENT_HORIZONTAL
    // * Legend#Legend_ALIGNMENT_VERTICAL
    //
    //  Describes the alignment of legend. Alignment of a legend denotes how individual items of the legend are aligned in a container. For example, if VERTICAL is chosen then the items of the legend will appear one below the other and if HORIZONTAL is chosen then the items will appear side by side.
	Alignment *string
    // If set to true, it will display the counts in legend. If set to false, counts of entities are not displayed in the legend.
	DisplayCount *bool
    // Possible values are: 
    //
    // * Legend#Legend_POSITION_TOP
    // * Legend#Legend_POSITION_BOTTOM
    // * Legend#Legend_POSITION_LEFT
    // * Legend#Legend_POSITION_RIGHT
    // * Legend#Legend_POSITION_TOP_RIGHT
    //
    //  Describes the relative placement of legend. The legend of a widget can be placed either to the TOP or BOTTOM or LEFT or RIGHT relative to the widget. For example, if RIGHT is chosen then legend is placed to the right of the widget.
	Position *string
    // Possible values are: 
    //
    // * Legend#Legend_TYPE_CIRCLE
    //
    //  Describes the render type for the legend. The legend for an entity describes the entity in the widget. The supported legend type is a circle against which the entity's details such as display_name are shown. The color of the circle denotes the color of the entity shown inside the widget.
	Type_ *string
    // Show unit of entities in the legend.
	Unit *string
}
const Legend_ALIGNMENT_HORIZONTAL = "HORIZONTAL"
const Legend_ALIGNMENT_VERTICAL = "VERTICAL"
const Legend_POSITION_TOP = "TOP"
const Legend_POSITION_BOTTOM = "BOTTOM"
const Legend_POSITION_LEFT = "LEFT"
const Legend_POSITION_RIGHT = "RIGHT"
const Legend_POSITION_TOP_RIGHT = "TOP_RIGHT"
const Legend_TYPE_CIRCLE = "CIRCLE"

// Base class for list results from collections
type ListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
}

// Local Egress is used on both server and client sites so that the gateway is used for N-S traffic and overhead on L2VPN tunnel is reduced.
type LocalEgress struct {
    // Gateway IP for Local Egress. Local egress is enabled only when this list is not empty. format: ip
	OptimizedIps []string
}

// Local egress rounting policy
type LocalEgressRoutingEntry struct {
    // Next hop address for proximity routing.
	NexthopAddress *string
    // The destination address of traffic matching a prefix-list is forwarded to the nexthop_address. Traffic matching a prefix list with Action DENY will be dropped. Individual prefix-lists specified could have different actions.
	PrefixListPaths []string
}

// Site specific configuration of Tier0 in multi-site scenario
type LocaleServices struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Policy path to edge cluster. Auto-assigned on Tier0 if associated enforcement-point has only one edge cluster.
	EdgeClusterPath *string
    // This configuration can be defined only for Active-Standby Tier0 gateway to provide redundancy. For mulitple external interfaces, multiple HA VIP configs must be defined and each config will pair exactly two external interfaces. The VIP will move and will always be owned by the Active node. When this property is configured, configuration of dynamic-routing is not allowed.
	HaVipConfigs []Tier0HaVipConfig
    // Policy paths to edge nodes. Specified edge is used as preferred edge cluster member when failover mode is set to PREEMPTIVE, not applicable otherwise.
	PreferredEdgePaths []string
    // Configure all route redistribution properties like enable/disable redistributon, redistribution rule and so on.
	RouteRedistributionConfig *Tier0RouteRedistributionConfig
    // Possible values are: 
    //
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_STATIC
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_CONNECTED
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_EXTERNAL_INTERFACE
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_SEGMENT
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_ROUTER_LINK
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_SERVICE_INTERFACE
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_LOOPBACK_INTERFACE
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_DNS_FORWARDER_IP
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_IPSEC_LOCAL_IP
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_NAT
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_EVPN_TEP_IP
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_NAT
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_STATIC
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_VIP
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_SNAT
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_DNS_FORWARDER_IP
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_CONNECTED
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_SERVICE_INTERFACE
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_SEGMENT
    // * LocaleServices#LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_IPSEC_LOCAL_ENDPOINT
    //
    //  Enable redistribution of different types of routes on Tier-0. This property is only valid for locale-service under Tier-0. This property is deprecated, please use \"route_redistribution_config\" property to configure redistribution rules.
	RouteRedistributionTypes []string
}
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_STATIC = "TIER0_STATIC"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_CONNECTED = "TIER0_CONNECTED"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_EXTERNAL_INTERFACE = "TIER0_EXTERNAL_INTERFACE"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_SEGMENT = "TIER0_SEGMENT"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_ROUTER_LINK = "TIER0_ROUTER_LINK"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_SERVICE_INTERFACE = "TIER0_SERVICE_INTERFACE"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_LOOPBACK_INTERFACE = "TIER0_LOOPBACK_INTERFACE"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_DNS_FORWARDER_IP = "TIER0_DNS_FORWARDER_IP"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_IPSEC_LOCAL_IP = "TIER0_IPSEC_LOCAL_IP"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_NAT = "TIER0_NAT"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER0_EVPN_TEP_IP = "TIER0_EVPN_TEP_IP"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_NAT = "TIER1_NAT"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_STATIC = "TIER1_STATIC"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_VIP = "TIER1_LB_VIP"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_SNAT = "TIER1_LB_SNAT"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_DNS_FORWARDER_IP = "TIER1_DNS_FORWARDER_IP"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_CONNECTED = "TIER1_CONNECTED"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_SERVICE_INTERFACE = "TIER1_SERVICE_INTERFACE"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_SEGMENT = "TIER1_SEGMENT"
const LocaleServices_ROUTE_REDISTRIBUTION_TYPES_TIER1_IPSEC_LOCAL_ENDPOINT = "TIER1_IPSEC_LOCAL_ENDPOINT"

// Paged collection of LocaleServices
type LocaleServicesListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // LocaleServices results
	Results []LocaleServices
}

type LogicalPortStatistics struct {
	RxBytes *DataCounter
	RxPackets *DataCounter
	TxBytes *DataCounter
	TxPackets *DataCounter
	DroppedBySecurityPackets *PacketsDroppedBySecurity
	MacLearning *MacLearningCounters
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
    // The id of the logical port
	LogicalPortId *string
}

type LogicalRouterPortCounters struct {
    // The number of dropped packets format: int64
	DroppedPackets *int64
    // The total number of bytes format: int64
	TotalBytes *int64
    // The total number of packets format: int64
	TotalPackets *int64
}

type LogicalRouterPortStatistics struct {
    // The ID of the logical router port
	LogicalRouterPortId *string
    // Per Node Statistics
	PerNodeStatistics []LogicalRouterPortStatisticsPerNode
}

type LogicalRouterPortStatisticsPerNode struct {
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Rx *LogicalRouterPortCounters
	Tx *LogicalRouterPortCounters
    // The ID of the TransportNode
	TransportNodeId *string
}

type LogicalRouterPortStatisticsSummary struct {
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Rx *LogicalRouterPortCounters
	Tx *LogicalRouterPortCounters
    // The ID of the logical router port
	LogicalRouterPortId *string
}

// This holds the state of Logical Router. If there are errors in realizing LR outside of MP, it gives details of the components and specific errors.
type LogicalRouterState struct {
    // Array of configuration state of various sub systems
	Details []ConfigurationStateElement
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * LogicalRouterState#LogicalRouterState_STATE_PENDING
    // * LogicalRouterState#LogicalRouterState_STATE_IN_PROGRESS
    // * LogicalRouterState#LogicalRouterState_STATE_SUCCESS
    // * LogicalRouterState#LogicalRouterState_STATE_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_PARTIAL_SUCCESS
    // * LogicalRouterState#LogicalRouterState_STATE_ORPHANED
    // * LogicalRouterState#LogicalRouterState_STATE_UNKNOWN
    // * LogicalRouterState#LogicalRouterState_STATE_ERROR
    // * LogicalRouterState#LogicalRouterState_STATE_IN_SYNC
    // * LogicalRouterState#LogicalRouterState_STATE_NOT_AVAILABLE
    // * LogicalRouterState#LogicalRouterState_STATE_VM_DEPLOYMENT_QUEUED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_DEPLOYMENT_IN_PROGRESS
    // * LogicalRouterState#LogicalRouterState_STATE_VM_DEPLOYMENT_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_POWER_ON_IN_PROGRESS
    // * LogicalRouterState#LogicalRouterState_STATE_VM_POWER_ON_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_REGISTRATION_PENDING
    // * LogicalRouterState#LogicalRouterState_STATE_NODE_NOT_READY
    // * LogicalRouterState#LogicalRouterState_STATE_NODE_READY
    // * LogicalRouterState#LogicalRouterState_STATE_VM_POWER_OFF_IN_PROGRESS
    // * LogicalRouterState#LogicalRouterState_STATE_VM_POWER_OFF_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_UNDEPLOY_IN_PROGRESS
    // * LogicalRouterState#LogicalRouterState_STATE_VM_UNDEPLOY_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_UNDEPLOY_SUCCESSFUL
    // * LogicalRouterState#LogicalRouterState_STATE_EDGE_CONFIG_ERROR
    // * LogicalRouterState#LogicalRouterState_STATE_VM_DEPLOYMENT_RESTARTED
    // * LogicalRouterState#LogicalRouterState_STATE_REGISTRATION_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_TRANSPORT_NODE_SYNC_PENDING
    // * LogicalRouterState#LogicalRouterState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * LogicalRouterState#LogicalRouterState_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * LogicalRouterState#LogicalRouterState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * LogicalRouterState#LogicalRouterState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * LogicalRouterState#LogicalRouterState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * LogicalRouterState#LogicalRouterState_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * LogicalRouterState#LogicalRouterState_STATE_APPLIANCE_INTERNAL_ERROR
    // * LogicalRouterState#LogicalRouterState_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * LogicalRouterState#LogicalRouterState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * LogicalRouterState#LogicalRouterState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * LogicalRouterState#LogicalRouterState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * LogicalRouterState#LogicalRouterState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * LogicalRouterState#LogicalRouterState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * LogicalRouterState#LogicalRouterState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * LogicalRouterState#LogicalRouterState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * LogicalRouterState#LogicalRouterState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * LogicalRouterState#LogicalRouterState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * LogicalRouterState#LogicalRouterState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * LogicalRouterState#LogicalRouterState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * LogicalRouterState#LogicalRouterState_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * LogicalRouterState#LogicalRouterState_STATE_INVALID_PNIC_DEVICE_NAME
    // * LogicalRouterState#LogicalRouterState_STATE_TRANSPORT_NODE_READY
    // * LogicalRouterState#LogicalRouterState_STATE_VM_NETWORK_EDIT_PENDING
    // * LogicalRouterState#LogicalRouterState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * LogicalRouterState#LogicalRouterState_STATE_MPA_DISCONNECTED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_RENAME_PENDING
    // * LogicalRouterState#LogicalRouterState_STATE_VM_CONFIG_EDIT_PENDING
    // * LogicalRouterState#LogicalRouterState_STATE_VM_NETWORK_EDIT_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_RENAME_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_CONFIG_EDIT_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_CONFIG_DISCREPANCY
    // * LogicalRouterState#LogicalRouterState_STATE_VM_NODE_REFRESH_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * LogicalRouterState#LogicalRouterState_STATE_REGISTRATION_TIMEDOUT
    //
    //  Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State *string
    // Request identifier of the API which modified the entity.
	PendingChangeList []string
}
const LogicalRouterState_STATE_PENDING = "pending"
const LogicalRouterState_STATE_IN_PROGRESS = "in_progress"
const LogicalRouterState_STATE_SUCCESS = "success"
const LogicalRouterState_STATE_FAILED = "failed"
const LogicalRouterState_STATE_PARTIAL_SUCCESS = "partial_success"
const LogicalRouterState_STATE_ORPHANED = "orphaned"
const LogicalRouterState_STATE_UNKNOWN = "unknown"
const LogicalRouterState_STATE_ERROR = "error"
const LogicalRouterState_STATE_IN_SYNC = "in_sync"
const LogicalRouterState_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const LogicalRouterState_STATE_VM_DEPLOYMENT_QUEUED = "VM_DEPLOYMENT_QUEUED"
const LogicalRouterState_STATE_VM_DEPLOYMENT_IN_PROGRESS = "VM_DEPLOYMENT_IN_PROGRESS"
const LogicalRouterState_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const LogicalRouterState_STATE_VM_POWER_ON_IN_PROGRESS = "VM_POWER_ON_IN_PROGRESS"
const LogicalRouterState_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const LogicalRouterState_STATE_REGISTRATION_PENDING = "REGISTRATION_PENDING"
const LogicalRouterState_STATE_NODE_NOT_READY = "NODE_NOT_READY"
const LogicalRouterState_STATE_NODE_READY = "NODE_READY"
const LogicalRouterState_STATE_VM_POWER_OFF_IN_PROGRESS = "VM_POWER_OFF_IN_PROGRESS"
const LogicalRouterState_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const LogicalRouterState_STATE_VM_UNDEPLOY_IN_PROGRESS = "VM_UNDEPLOY_IN_PROGRESS"
const LogicalRouterState_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const LogicalRouterState_STATE_VM_UNDEPLOY_SUCCESSFUL = "VM_UNDEPLOY_SUCCESSFUL"
const LogicalRouterState_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const LogicalRouterState_STATE_VM_DEPLOYMENT_RESTARTED = "VM_DEPLOYMENT_RESTARTED"
const LogicalRouterState_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const LogicalRouterState_STATE_TRANSPORT_NODE_SYNC_PENDING = "TRANSPORT_NODE_SYNC_PENDING"
const LogicalRouterState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const LogicalRouterState_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const LogicalRouterState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const LogicalRouterState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const LogicalRouterState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const LogicalRouterState_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const LogicalRouterState_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const LogicalRouterState_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const LogicalRouterState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const LogicalRouterState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const LogicalRouterState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const LogicalRouterState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const LogicalRouterState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const LogicalRouterState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const LogicalRouterState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const LogicalRouterState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const LogicalRouterState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const LogicalRouterState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const LogicalRouterState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const LogicalRouterState_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const LogicalRouterState_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const LogicalRouterState_STATE_TRANSPORT_NODE_READY = "TRANSPORT_NODE_READY"
const LogicalRouterState_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const LogicalRouterState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const LogicalRouterState_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const LogicalRouterState_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const LogicalRouterState_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const LogicalRouterState_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const LogicalRouterState_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const LogicalRouterState_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const LogicalRouterState_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const LogicalRouterState_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const LogicalRouterState_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const LogicalRouterState_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"

type LogicalRouterStatus struct {
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
    // Possible values are: 
    //
    // * LogicalRouterStatus#LogicalRouterStatus_LOCALE_OPERATION_MODE_PRIMARY_LOCATION
    // * LogicalRouterStatus#LogicalRouterStatus_LOCALE_OPERATION_MODE_SECONDARY_LOCATION
    //
    //  Egress mode for the logical router at given mode
	LocaleOperationMode *string
    // The id of the logical router
	LogicalRouterId *string
    // Per Node Status
	PerNodeStatus []LogicalRouterStatusPerNode
}
const LogicalRouterStatus_LOCALE_OPERATION_MODE_PRIMARY_LOCATION = "PRIMARY_LOCATION"
const LogicalRouterStatus_LOCALE_OPERATION_MODE_SECONDARY_LOCATION = "SECONDARY_LOCATION"

type LogicalRouterStatusPerNode struct {
    // Possible values are: 
    //
    // * LogicalRouterStatusPerNode#LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_ACTIVE
    // * LogicalRouterStatusPerNode#LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_STANDBY
    // * LogicalRouterStatusPerNode#LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_DOWN
    // * LogicalRouterStatusPerNode#LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_SYNC
    // * LogicalRouterStatusPerNode#LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_UNKNOWN
    // * LogicalRouterStatusPerNode#LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_ADMIN_DOWN
    //
    //  A service router's HA status on an edge node
	HighAvailabilityStatus *string
    // id of the service router where the router status is retrieved.
	ServiceRouterId *string
    // id of the transport node where the router status is retrieved.
	TransportNodeId *string
}
const LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_ACTIVE = "ACTIVE"
const LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_STANDBY = "STANDBY"
const LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_DOWN = "DOWN"
const LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_SYNC = "SYNC"
const LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_UNKNOWN = "UNKNOWN"
const LogicalRouterStatusPerNode_HIGH_AVAILABILITY_STATUS_ADMIN_DOWN = "ADMIN_DOWN"

type LogicalSwitchStatistics struct {
	RxBytes *DataCounter
	RxPackets *DataCounter
	TxBytes *DataCounter
	TxPackets *DataCounter
	DroppedBySecurityPackets *PacketsDroppedBySecurity
	MacLearning *MacLearningCounters
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
    // The id of the logical Switch
	LogicalSwitchId *string
}

// Represents MAC address expressions in the form of an array, to support addition of MAC addresses in a group. Avoid creating groups with multiple MACAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression. To group MAC addresses, use nested groups instead of multiple MACAddressExpression.
type MACAddressExpression struct {
    // This array can consist of one or more MAC addresses. format: mac-address
	MacAddresses []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const MACAddressExpression__TYPE_IDENTIFIER = "MACAddressExpression"

// List of MAC Addresses.
type MACAddressList struct {
    // The array contains MAC addresses. format: mac-address
	MacAddresses []string
}

// Mac Discovery Profile
type MacDiscoveryProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Allowing source MAC address change
	MacChangeEnabled *bool
    // Indicates how long learned MAC address remain. format: int32
	MacLearningAgingTime *int64
    // Allowing source MAC address learning
	MacLearningEnabled *bool
    // The maximum number of MAC addresses that can be learned on this port format: int32
	MacLimit *int64
    // Possible values are: 
    //
    // * MacDiscoveryProfile#MacDiscoveryProfile_MAC_LIMIT_POLICY_ALLOW
    // * MacDiscoveryProfile#MacDiscoveryProfile_MAC_LIMIT_POLICY_DROP
    //
    //  The policy after MAC Limit is exceeded
	MacLimitPolicy *string
    // This property specifies the limit on the maximum number of MACs learned for a remote virtual machine's MAC to VTEP binding per overlay logical switch. format: int32
	RemoteOverlayMacLimit *int64
    // Allowing flooding for unlearned MAC for ingress traffic
	UnknownUnicastFloodingEnabled *bool
}
const MacDiscoveryProfile_MAC_LIMIT_POLICY_ALLOW = "ALLOW"
const MacDiscoveryProfile_MAC_LIMIT_POLICY_DROP = "DROP"

// Paged collection of Mac Discovery Profiles
type MacDiscoveryProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Mac Discovery profile list results
	Results []MacDiscoveryProfile
}

type MacLearningCounters struct {
    // The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW. format: int64
	MacNotLearnedPacketsAllowed *int64
    // The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP. format: int64
	MacNotLearnedPacketsDropped *int64
    // Number of MACs learned format: int64
	MacsLearned *int64
}

// Base type for resources that are managed by API clients
type ManagedResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}

type ManagementConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // True if Management nodes publish their fqdns(instead of default IP addresses) across NSX for its reachability.
	PublishFqdns *bool
}

// Metadata Proxy Configuration
type MetadataProxyConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * MetadataProxyConfig#MetadataProxyConfig_CRYPTO_PROTOCOLS_V1
    // * MetadataProxyConfig#MetadataProxyConfig_CRYPTO_PROTOCOLS_V1_1
    // * MetadataProxyConfig#MetadataProxyConfig_CRYPTO_PROTOCOLS_V1_2
    //
    //  The cryptographic protocols listed here are supported by the metadata proxy. TLSv1.1 and TLSv1.2 are supported by default
	CryptoProtocols []string
    // Edge clusters configured on MP are auto-discovered by Policy and create corresponding read-only intent objects.
	EdgeClusterPath *string
    // Only auto-placed metadata proxies are considered for relocation. Must be FALSE, when the preferred_edge_paths property is configured.
	EnableStandbyRelocation *bool
    // Edge nodes should be members of edge cluster configured in edge_cluster_path.
	PreferredEdgePaths []string
    // Secret word or phrase to access metadata server.
	Secret *string
    // This field is a URL. Example formats - http://1.2.3.4:3888/path, http://text-md-proxy:5001/. Port number should be between 3000-9000.
	ServerAddress *string
    // Valid certificates should be configured. The validity of certificates is not checked. Certificates are managed through /infra/certificates API on Policy.
	ServerCertificates []string
}
const MetadataProxyConfig_CRYPTO_PROTOCOLS_V1 = "TLS_V1"
const MetadataProxyConfig_CRYPTO_PROTOCOLS_V1_1 = "TLS_V1_1"
const MetadataProxyConfig_CRYPTO_PROTOCOLS_V1_2 = "TLS_V1_2"

// Base Monitoring Profile Binding Map
type MonitoringProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// Combines two or more widgetconfigurations into a multi-widget
type MultiWidgetConfiguration struct {
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // Array of widgets that are part of the multi-widget.
	Widgets []WidgetItem
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const MultiWidgetConfiguration__TYPE_IDENTIFIER = "MultiWidgetConfiguration"

// Credential info to connect to an NSX-T type of enforcement point.
type NSXTConnectionInfo struct {
    // Edge Cluster UUIDs on enforcement point. Edge cluster information is required for creating logical L2, L3 constructs on enforcement point. Max 1 edge cluster ID. This is a deprecated property. The edge cluster id is now auto populated from enforcement point and its value can be read using APIs GET /infra/sites/site-id/enforcement-points/enforcementpoint-id/edge-clusters and GET /infra/sites/site-id/enforcement-points/enforcementpoint-1/edge-clusters/edge-cluster-id. The value passed through this property will be ignored.
	EdgeClusterIds []string
    // Password.
	Password *string
    // Thumbprint of EnforcementPoint in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint *string
    // Transport Zone UUIDs on enforcement point. Transport zone information is required for creating logical L2, L3 constructs on enforcement point. Max 1 transport zone ID. This is a deprecated property. The transport zone id is now auto populated from enforcement point and its value can be read using APIs GET /infra/sites/site-id/enforcement-points/enforcementpoint-id/transport-zones and GET /infra/sites/site-id/enforcement-points/enforcementpoint-id/transport-zones/transport-zone-id. The value passed through this property will be ignored.
	TransportZoneIds []string
    // Username.
	Username *string
    // Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress *string
    // Possible values are: 
    //
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXTCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXVCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_CVXCONNECTIONINFO
    //
    //  Resource Type of Enforcement Point Connection Info.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NSXTConnectionInfo__TYPE_IDENTIFIER = "NSXTConnectionInfo"

// Credential info to connect to an NSX-V type of enforcement point.
type NSXVConnectionInfo struct {
    // Password.
	Password *string
    // Thumbprint of EnforcementPoint in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint *string
    // Username.
	Username *string
    // Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress *string
    // Possible values are: 
    //
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXTCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_NSXVCONNECTIONINFO
    // * EnforcementPointConnectionInfo#EnforcementPointConnectionInfo_RESOURCE_TYPE_CVXCONNECTIONINFO
    //
    //  Resource Type of Enforcement Point Connection Info.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NSXVConnectionInfo__TYPE_IDENTIFIER = "NSXVConnectionInfo"

// Contains Neighbor Discovery Protocol (ND) snooping related configuration.
type NdSnoopingConfig struct {
    // Enable this method will snoop the NS (Neighbor Solicitation) and NA (Neighbor Advertisement) messages in the ND (Neighbor Discovery Protocol) family of messages which are transmitted by a VM. From the NS messages, we will learn about the source which sent this NS message. From the NA message, we will learn the resolved address in the message which the VM is a recipient of. Addresses snooped by this method are subject to TOFU (Trust on First Use) policies as enforced by the system.
	NdSnoopingEnabled *bool
    // Maximum number of ND (Neighbor Discovery Protocol) snooped IPv6 addresses format: int32
	NdSnoopingLimit *int64
}

// Neighbor discovery protocol header
type NdpHeader struct {
    // The IP address of the destination of the solicitation. It MUST NOT be a multicast address. format: ipv6
	DstIp *string
    // Possible values are: 
    //
    // * NdpHeader#NdpHeader_MSG_TYPE_SOLICITATION
    // * NdpHeader#NdpHeader_MSG_TYPE_ADVERTISEMENT
    //
    //  This field specifies the type of the Neighbor discover message being sent. NEIGHBOR_SOLICITATION - Neighbor Solicitation message to discover the link-layer address of an on-link IPv6 node or to confirm a previously determined link-layer address. NEIGHBOR_ADVERTISEMENT - Neighbor Advertisement message in response to a Neighbor Solicitation message.
	MsgType *string
}
const NdpHeader_MSG_TYPE_SOLICITATION = "NEIGHBOR_SOLICITATION"
const NdpHeader_MSG_TYPE_ADVERTISEMENT = "NEIGHBOR_ADVERTISEMENT"

// Nested expressions is a list of condition expressions that must follow the below criteria: 0. Only allowed expressions in a NestedExpression are Condition and ConjunctionOperator. 1. A non-empty expression list, must be of odd size. In a list, with indices starting from 0, all condition expressions must be at even indices, separated by the conjunction expressions AND at odd indices. 2. There may be at most 5 condition expressions inside a list. 3. NestedExpressions are homogeneous in nature, i.e, all expressions inside a nested expression must have the same member type.
type NestedExpression struct {
    // Expression.
	Expressions []*data.StructValue
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NestedExpression__TYPE_IDENTIFIER = "NestedExpression"

// A ServiceEntry that represents nesting service
type NestedServiceServiceEntry struct {
    // path of nested service
	NestedServicePath *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NestedServiceServiceEntry__TYPE_IDENTIFIER = "NestedServiceServiceEntry"

// Network error related to container objects.
type NetworkError struct {
    // Error code of network related error.
	ErrorCode *string
    // Detailed message of network related error.
	ErrorMessage *string
    // Additional error information in json format.
	Spec *string
}

// Role
type NsxRole struct {
    // Possible values are: 
    //
    // * NsxRole#NsxRole_PERMISSIONS_READ_API
    // * NsxRole#NsxRole_PERMISSIONS_READ_WRITE_API
    // * NsxRole#NsxRole_PERMISSIONS_CRUD
    // * NsxRole#NsxRole_PERMISSIONS_READ
    // * NsxRole#NsxRole_PERMISSIONS_EXECUTE
    // * NsxRole#NsxRole_PERMISSIONS_NONE
    //
    //  Please use the /user-info/permissions api to get the permission that the user has on each feature.
	Permissions []string
    // This field represents the identifier of the role. With the introduction of custom roles, this field is no longer an enum.
	Role *string
}
const NsxRole_PERMISSIONS_READ_API = "read-api"
const NsxRole_PERMISSIONS_READ_WRITE_API = "read-write-api"
const NsxRole_PERMISSIONS_CRUD = "crud"
const NsxRole_PERMISSIONS_READ = "read"
const NsxRole_PERMISSIONS_EXECUTE = "execute"
const NsxRole_PERMISSIONS_NONE = "none"

// The current statistics counters of the DNS forwarder including cache usages and query numbers per forwarders, on an NSX-T type of enforcement point.
type NsxTDNSForwarderStatistics struct {
    // The total number of cached entries format: int64
	CachedEntries *int64
    // The statistics of conditional forwarder zones
	ConditionalForwarderStatistics []NsxTDNSForwarderZoneStatistics
    // The configured cache size, in kb format: int64
	ConfiguredCacheSize *int64
    // The statistics of default forwarder zone
	DefaultForwarderStatistics *NsxTDNSForwarderZoneStatistics
    // The total number of queries answered from local cache format: int64
	QueriesAnsweredLocally *int64
    // The total number of forwarded DNS queries format: int64
	QueriesForwarded *int64
    // Time stamp of the current statistics, in ms format: int64
	Timestamp *int64
    // The total number of received DNS queries format: int64
	TotalQueries *int64
    // The statistics of used cache
	UsedCacheStatistics []NsxtPerNodeUsedCacheStatistics
    // Policy path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath *string
    // Possible values are: 
    //
    // * DNSForwarderStatisticsPerEnforcementPoint#DNSForwarderStatisticsPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSFORWARDERSTATISTICS
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NsxTDNSForwarderStatistics__TYPE_IDENTIFIER = "NsxTDNSForwarderStatistics"

// The current runtime status of the DNS forwarder.
type NsxTDNSForwarderStatus struct {
    // Extra message, if available
	ExtraMessage *string
    // Possible values are: 
    //
    // * NsxTDNSForwarderStatus#NsxTDNSForwarderStatus_STATUS_UP
    // * NsxTDNSForwarderStatus#NsxTDNSForwarderStatus_STATUS_DOWN
    // * NsxTDNSForwarderStatus#NsxTDNSForwarderStatus_STATUS_ERROR
    // * NsxTDNSForwarderStatus#NsxTDNSForwarderStatus_STATUS_NO_BACKUP
    // * NsxTDNSForwarderStatus#NsxTDNSForwarderStatus_STATUS_UNKNOWN
    //
    //  UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The DNS forwarder may be working (or not working). NO_BACKUP means DNS forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down.
	Status *string
    // Time stamp of the current status, in ms format: int64
	Timestamp *int64
    // Policy path referencing the enforcement point from where the status is fetched.
	EnforcementPointPath *string
    // Possible values are: 
    //
    // * DNSForwarderStatusPerEnforcementPoint#DNSForwarderStatusPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSFORWARDERSTATUS
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NsxTDNSForwarderStatus__TYPE_IDENTIFIER = "NsxTDNSForwarderStatus"
const NsxTDNSForwarderStatus_STATUS_UP = "UP"
const NsxTDNSForwarderStatus_STATUS_DOWN = "DOWN"
const NsxTDNSForwarderStatus_STATUS_ERROR = "ERROR"
const NsxTDNSForwarderStatus_STATUS_NO_BACKUP = "NO_BACKUP"
const NsxTDNSForwarderStatus_STATUS_UNKNOWN = "UNKNOWN"

// Statistics counters of the DNS forwarder zone.
type NsxTDNSForwarderZoneStatistics struct {
    // Domain names configured for the forwarder. Empty if this is the default forwarder.
	DomainNames []string
    // Statistics per upstream server.
	UpstreamStatistics []NsxtUpstreamServerStatistics
}

// Answer of dns nslookup
type NsxtDnsAnswer struct {
    // Authoritative answers
	AuthoritativeAnswers []NsxtDnsQueryAnswer
    // Dns server ip address and port, format is \"ip address#port\".
	DnsServer *string
    // ID of the edge node that performed the query.
	EdgeNodeId *string
    // Non authoritative answers
	NonAuthoritativeAnswers []NsxtDnsQueryAnswer
    // It can be NXDOMAIN or error message which is not consisted of authoritative_answer or non_authoritative_answer.
	RawAnswer *string
    // Policy path referencing the enforcement point from where the DNS forwarder nslookup answer is fetched.
	EnforcementPointPath *string
    // Possible values are: 
    //
    // * PolicyDnsAnswerPerEnforcementPoint#PolicyDnsAnswerPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSANSWER
    //
    //  Resource type of the DNS forwarder nslookup answer.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const NsxtDnsAnswer__TYPE_IDENTIFIER = "NsxTDnsAnswer"

// Answer of nslookup
type NsxtDnsQueryAnswer struct {
    // Resolved IP address matched with the nslookup address provided as a request parameter.
	Address *string
    // Matched name of the given address.
	Name *string
}

// Query statistics counters of used cache from node
type NsxtPerNodeUsedCacheStatistics struct {
    // The total number of cached entries format: int64
	CachedEntries *int64
    // UUID of active/standby transport node
	NodeId *string
    // The memory size used in cache, in kb format: int64
	UsedCacheSize *int64
}

// Query statistics counters to an upstream server including successfully forwarded queries and failed queries.
type NsxtUpstreamServerStatistics struct {
    // Queries failed to forward. format: int64
	QueriesFailed *int64
    // Queries forwarded successfully format: int64
	QueriesSucceeded *int64
    // Upstream server ip format: ip
	UpstreamServer *string
}

// RBAC Objects qualifier
type ObjectRolePermissionGroup struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Does children of this object inherit this rule
	InheritanceDisabled *bool
    // Possible values are: 
    //
    // * ObjectRolePermissionGroup#ObjectRolePermissionGroup_OPERATION_CRUD
    // * ObjectRolePermissionGroup#ObjectRolePermissionGroup_OPERATION_READ
    // * ObjectRolePermissionGroup#ObjectRolePermissionGroup_OPERATION_EXECUTE
    // * ObjectRolePermissionGroup#ObjectRolePermissionGroup_OPERATION_NONE
    //
    //  Allowed operation
	Operation *string
    // Path prefix
	PathPrefix *string
    // Role name
	RoleName *string
    // Is rule disabled or not
	RuleDisabled *bool
}
const ObjectRolePermissionGroup_OPERATION_CRUD = "crud"
const ObjectRolePermissionGroup_OPERATION_READ = "read"
const ObjectRolePermissionGroup_OPERATION_EXECUTE = "execute"
const ObjectRolePermissionGroup_OPERATION_NONE = "none"

// Paged collection of RBAC Objects
type ObjectRolePermissionGroupListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // ObjectRolePermissionGroup list results
	Results []ObjectRolePermissionGroup
}

// An identity source service that runs OpenLDAP. The service allows selected user accounts defined in OpenLDAP to log into and access NSX-T.
type OpenLdapIdentitySource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * LdapIdentitySource#LdapIdentitySource_RESOURCE_TYPE_ACTIVEDIRECTORYIDENTITYSOURCE
    // * LdapIdentitySource#LdapIdentitySource_RESOURCE_TYPE_OPENLDAPIDENTITYSOURCE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The subtree of the LDAP identity source to search when locating users and groups.
	BaseDn *string
    // The name of the authentication domain. When users log into NSX using an identity of the form \"user\\\\@domain\", NSX uses the domain portion to determine which LDAP identity source to use. For Active Directory, this domain name must match the domain of the Active Directory.
	DomainName *string
    // The list of LDAP servers that provide LDAP service for this identity source. Currently, only one LDAP server is supported.
	LdapServers []IdentitySourceLdapServer
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const OpenLdapIdentitySource__TYPE_IDENTIFIER = "OpenLdapIdentitySource"

// Represents which federated global resources have been overrriden on a specific Site.
type OverriddenResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Policy resource path of the overridden resource.
	IntentPath *string
    // Site path to the specific site that has overridden the global resource.
	SitePath *string
}

// Paged Collection of OverriddenResource.
type OverriddenResourceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // OverriddenResource list results.
	Results []OverriddenResource
}

type PacketData struct {
    // If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message. The frame will be zero padded to the requested size. format: int64
	FrameSize *int64
    // Possible values are: 
    //
    // * PacketData#PacketData_RESOURCE_TYPE_BINARYPACKETDATA
    // * PacketData#PacketData_RESOURCE_TYPE_FIELDSPACKETDATA
    //
    //  Packet configuration
	ResourceType string
    // A flag, when set true, indicates that the traceflow packet is of L3 routing.
	Routed *bool
    // Possible values are: 
    //
    // * PacketData#PacketData_TRANSPORT_TYPE_BROADCAST
    // * PacketData#PacketData_TRANSPORT_TYPE_UNICAST
    // * PacketData#PacketData_TRANSPORT_TYPE_MULTICAST
    // * PacketData#PacketData_TRANSPORT_TYPE_UNKNOWN
    //
    //  transport type of the traceflow packet
	TransportType *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PacketData__TYPE_IDENTIFIER = "PacketData"
const PacketData_RESOURCE_TYPE_BINARYPACKETDATA = "BinaryPacketData"
const PacketData_RESOURCE_TYPE_FIELDSPACKETDATA = "FieldsPacketData"
const PacketData_TRANSPORT_TYPE_BROADCAST = "BROADCAST"
const PacketData_TRANSPORT_TYPE_UNICAST = "UNICAST"
const PacketData_TRANSPORT_TYPE_MULTICAST = "MULTICAST"
const PacketData_TRANSPORT_TYPE_UNKNOWN = "UNKNOWN"

type PacketTypeAndCounter struct {
    // The number of packets. format: int64
	Counter *int64
    // The type of the packets
	PacketType *string
}

type PacketsDroppedBySecurity struct {
    // The number of packets dropped by \"BPDU filter\". format: int64
	BpduFilterDropped *int64
    // The number of IPv4 packets dropped by \"DHCP client block\". format: int64
	DhcpClientDroppedIpv4 *int64
    // The number of IPv6 packets dropped by \"DHCP client block\". format: int64
	DhcpClientDroppedIpv6 *int64
    // The number of IPv4 packets dropped by \"DHCP server block\". format: int64
	DhcpServerDroppedIpv4 *int64
    // The number of IPv6 packets dropped by \"DHCP server block\". format: int64
	DhcpServerDroppedIpv6 *int64
    // The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.
	SpoofGuardDropped []PacketTypeAndCounter
}

// This object allows enabling or disabling of partial patch functionality. Enabling partial patch allows patching of a subset of the fields of any object. After enabling partial patching, any object payload provided will be merged with the existing object payload. Note that while all mandatory fields are expected to be provided during the creation of any object, enabling partial patch will allow patching of existing objects with a subset of mandatory fields.
type PartialPatchConfig struct {
    // boolean value used to enable/disable partial patch
	EnablePartialPatch *bool
}

// Patch Resources is an action to create/patch resources in response to an event.
type PatchResources struct {
    // Patch body representing a Hierarchical Patch payload. The resources included in the body are patched replacing the injections' keys with their actual values.
	Body *data.StructValue
    // Injections holding keys (variables) and their corresponding values.
	Injections []Injection
    // Possible values are: 
    //
    // * Action#Action_RESOURCE_TYPE_PATCHRESOURCES
    // * Action#Action_RESOURCE_TYPE_SETFIELDS
    //
    //  Reaction Action resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PatchResources__TYPE_IDENTIFIER = "PatchResources"

// Represents policy path expressions in the form of an array, to support addition of objects like groups, segments and policy logical ports in a group.
type PathExpression struct {
    // This array can consist of one or more policy paths. Only policy paths of groups, segments and policy logical ports are allowed.
	Paths []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * Expression#Expression_RESOURCE_TYPE_CONDITION
    // * Expression#Expression_RESOURCE_TYPE_CONJUNCTIONOPERATOR
    // * Expression#Expression_RESOURCE_TYPE_NESTEDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IPADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_MACADDRESSEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_EXTERNALIDEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_PATHEXPRESSION
    // * Expression#Expression_RESOURCE_TYPE_IDENTITYGROUPEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PathExpression__TYPE_IDENTIFIER = "PathExpression"

// RBAC Objects qualifier
type PathPermissionGroup struct {
    // Full Object Path
	ObjectPath *string
    // Possible values are: 
    //
    // * PathPermissionGroup#PathPermissionGroup_OPERATION_CRUD
    // * PathPermissionGroup#PathPermissionGroup_OPERATION_READ
    // * PathPermissionGroup#PathPermissionGroup_OPERATION_EXECUTE
    // * PathPermissionGroup#PathPermissionGroup_OPERATION_NONE
    //
    //  Allowed operation
	Operation *string
}
const PathPermissionGroup_OPERATION_CRUD = "crud"
const PathPermissionGroup_OPERATION_READ = "read"
const PathPermissionGroup_OPERATION_EXECUTE = "execute"
const PathPermissionGroup_OPERATION_NONE = "none"

// The certificate chain presented by a remote TLS service.
type PeerCertificateChain struct {
    // List of X509Certificates.
	Details []X509Certificate
    // PEM encoded certificate data.
	PemEncoded *string
}

// Information about recent changes, if any, that are not reflected in the Enforced Realized Status.
type PendingChangesInfoNsxt struct {
    // Flag describing whether there are any pending changes that are not reflected in the status.
	PendingChangesFlag *bool
}

// Restore step status
type PerStepRestoreStatus struct {
    // A description of the restore status
	Description *string
    // Possible values are: 
    //
    // * PerStepRestoreStatus#PerStepRestoreStatus_VALUE_INITIAL
    // * PerStepRestoreStatus#PerStepRestoreStatus_VALUE_RUNNING
    // * PerStepRestoreStatus#PerStepRestoreStatus_VALUE_SUSPENDED_BY_USER
    // * PerStepRestoreStatus#PerStepRestoreStatus_VALUE_SUSPENDED_FOR_USER_ACTION
    // * PerStepRestoreStatus#PerStepRestoreStatus_VALUE_FAILED
    // * PerStepRestoreStatus#PerStepRestoreStatus_VALUE_SUCCESS
    //
    //  Per step restore status value
	Value *string
}
const PerStepRestoreStatus_VALUE_INITIAL = "INITIAL"
const PerStepRestoreStatus_VALUE_RUNNING = "RUNNING"
const PerStepRestoreStatus_VALUE_SUSPENDED_BY_USER = "SUSPENDED_BY_USER"
const PerStepRestoreStatus_VALUE_SUSPENDED_FOR_USER_ACTION = "SUSPENDED_FOR_USER_ACTION"
const PerStepRestoreStatus_VALUE_FAILED = "FAILED"
const PerStepRestoreStatus_VALUE_SUCCESS = "SUCCESS"

// Defines the point of a graph.
type PointDefinition struct {
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // An expression that represents the points of the graph
	Field *string
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // Multi-line text to be shown on tooltip while hovering over the point of a graph.
	Tooltip []Tooltip
    // Represents the variable for the X value of points that are plotted on the graph.
	XValue *string
    // Represents the variable for the Y value of points that are plotted on the graph.
	YValue *string
}

// Ordered list of Rules. This object is created by default along with the Domain.
type Policy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category *string
    // Comments for security policy lock/unlock.
	Comments *string
    // This field is to indicate the internal sequence number of a policy with respect to the policies across categories. format: int32
	InternalSequenceNumber *int64
    // A flag to indicate whether policy is a default policy.
	IsDefault *bool
    // ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy *string
    // SecurityPolicy locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked *bool
    // The count of rules in the policy. format: int32
	RuleCount *int64
    // Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath *string
    // The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string
    // This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful *bool
    // Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict *bool
}

// Alarm base class of realized policy object
type PolicyAlarmResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // Detailed information about errors from an API call made to the enforcement point, if any.
	ErrorDetails *PolicyApiError
    // error message to describe the issue
	Message *string
    // path of the object on which alarm is created
	SourceReference *string
    // This field will refer to the source site on which the alarm is generated. This field is populated by GM, when it receives corresponding notification from LM.
	SourceSiteId *string
}

// PolicyAlarmResource list result
type PolicyAlarmResourceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List of alarm resources
	Results []PolicyAlarmResource
}

// Detailed information about an API Error
type PolicyApiError struct {
    // Further details about the error
	Details *string
    // A numeric error code format: int64
	ErrorCode *int64
    // Additional data about the error
	ErrorData *data.StructValue
    // A description of the error
	ErrorMessage *string
    // The module name where the error occurred
	ModuleName *string
    // Other errors related to this error
	RelatedErrors []PolicyRelatedApiError
}

// Policy Attributes data holder
type PolicyAttributes struct {
    // Possible values are: 
    //
    // * PolicyAttributes#PolicyAttributes_DATATYPE_STRING
    //
    //  Datatype for attribute
	Datatype *string
    // Description for attribute value
	Description *string
    // Describes whether the APP_ID value is ALG type or not.
	IsALGType *bool
    // Possible values are: 
    //
    // * PolicyAttributes#PolicyAttributes_KEY_APP_ID
    // * PolicyAttributes#PolicyAttributes_KEY_DOMAIN_NAME
    // * PolicyAttributes#PolicyAttributes_KEY_URL_CATEGORY
    //
    //  Key for attribute
	Key *string
    // Reference to sub attributes for the attribute
	SubAttributes []PolicySubAttributes
    // Multiple attribute values can be specified as elements of array.
	Value []string
}
const PolicyAttributes_DATATYPE_STRING = "STRING"
const PolicyAttributes_KEY_APP_ID = "APP_ID"
const PolicyAttributes_KEY_DOMAIN_NAME = "DOMAIN_NAME"
const PolicyAttributes_KEY_URL_CATEGORY = "URL_CATEGORY"

// A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is negotiated for each pair of local and peer subnet.
type PolicyBasedIPSecVpnSession struct {
    // Rules
	Rules []IPSecVpnRule
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_RESOURCE_TYPE_POLICYBASEDIPSECVPNSESSION
    // * IPSecVpnSession#IPSecVpnSession_RESOURCE_TYPE_ROUTEBASEDIPSECVPNSESSION
    //
    //  A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to remote site.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_AUTHENTICATION_MODE_PSK
    // * IPSecVpnSession#IPSecVpnSession_AUTHENTICATION_MODE_CERTIFICATE
    //
    //  Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a certificate defined at the global level is to be used for authentication.
	AuthenticationMode *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_CNSA
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_128
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_256
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_PRIME
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_FOUNDATION
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_FIPS
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_NONE
    //
    //  Compliance suite.
	ComplianceSuite *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_INITIATOR
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_RESPOND_ONLY
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_ON_DEMAND
    //
    //  Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.
	ConnectionInitiationMode *string
    // Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
	DpdProfilePath *string
    // Enable/Disable IPSec VPN session.
	Enabled *bool
    // Policy path referencing IKE profile to be used. Default is set according to system default profile.
	IkeProfilePath *string
    // Policy path referencing Local endpoint.
	LocalEndpointPath *string
    // Public IPV4 address of the remote device terminating the VPN connection.
	PeerAddress *string
    // Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
	PeerId *string
    // IPSec Pre-shared key. Maximum length of this field is 128 characters.
	Psk *string
    // TCP Maximum Segment Size Clamping Direction and Value.
	TcpMssClamping *TcpMaximumSegmentSizeClamping
    // Policy path referencing Tunnel profile to be used. Default is set to system default profile.
	TunnelProfilePath *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PolicyBasedIPSecVpnSession__TYPE_IDENTIFIER = "PolicyBasedIPSecVpnSession"

// A Policy-based L3Vpn session is a configuration in which a specific vpn tunnel is referenced in a policy whose action is set as tunnel.
type PolicyBasedL3VpnSession struct {
    // L3Vpn rules that are specific to the L3Vpn. Only L3Vpn rules with PROTECT action are supported.
	Rules []L3VpnRule
    // Possible values are: 
    //
    // * L3VpnSession#L3VpnSession_RESOURCE_TYPE_POLICYBASEDL3VPNSESSION
    // * L3VpnSession#L3VpnSession_RESOURCE_TYPE_ROUTEBASEDL3VPNSESSION
    //
    //  - A Policy Based L3Vpn is a configuration in which protect rules to match local and remote subnet needs to be defined. Tunnel is established for each pair of local and remote subnet defined in protect rules. - A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet (commonly known as VTI) is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PolicyBasedL3VpnSession__TYPE_IDENTIFIER = "PolicyBasedL3VpnSession"

type PolicyBgpNeighborStatus struct {
    // Address families of BGP neighbor
	AddressFamilies []BgpAddressFamily
    // BGP capabilities sent to BGP neighbor.
	AnnouncedCapabilities []string
    // Count of connection drop format: int64
	ConnectionDropCount *int64
    // Possible values are: 
    //
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_INVALID
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_IDLE
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_CONNECT
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_ACTIVE
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_OPEN_SENT
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_OPEN_CONFIRM
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_ESTABLISHED
    // * PolicyBgpNeighborStatus#PolicyBgpNeighborStatus_CONNECTION_STATE_UNKNOWN
    //
    //  Current state of the BGP session.
	ConnectionState *string
    // Transport node
	EdgePath *string
    // Count of connections established format: int64
	EstablishedConnectionCount *int64
    // Current state of graceful restart of BGP neighbor. Possible values are - 1. GR_AND_HELPER - Graceful restart with Helper 2. HELPER_ONLY - Helper only 3. DISABLE - Disabled
	GracefulRestartMode *string
    // If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down. format: int64
	HoldTime *int64
    // Time in ms to wait for HELLO packet from BGP peer format: int64
	KeepAliveInterval *int64
    // Timestamp when the data was last updated, unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
    // TCP port number of Local BGP connection format: int64
	LocalPort *int64
    // Count of messages received from the neighbor format: int64
	MessagesReceived *int64
    // Count of messages sent to the neighbor format: int64
	MessagesSent *int64
    // BGP capabilities negotiated with BGP neighbor.
	NegotiatedCapability []string
    // The IP of the BGP neighbor format: ip
	NeighborAddress *string
    // Router ID of the BGP neighbor.
	NeighborRouterId *string
    // AS number of the BGP neighbor
	RemoteAsNumber *string
    // TCP port number of remote BGP Connection format: int64
	RemotePort *int64
    // Remote site details.
	RemoteSite *ResourceReference
    // The Ip address of logical port format: ip
	SourceAddress *string
    // Policy path to Tier0
	Tier0Path *string
    // Time(in milliseconds) since connection was established. format: int64
	TimeSinceEstablished *int64
    // Sum of in prefixes counts across all address families. format: int64
	TotalInPrefixCount *int64
    // Sum of out prefixes counts across all address families. format: int64
	TotalOutPrefixCount *int64
}
const PolicyBgpNeighborStatus_CONNECTION_STATE_INVALID = "INVALID"
const PolicyBgpNeighborStatus_CONNECTION_STATE_IDLE = "IDLE"
const PolicyBgpNeighborStatus_CONNECTION_STATE_CONNECT = "CONNECT"
const PolicyBgpNeighborStatus_CONNECTION_STATE_ACTIVE = "ACTIVE"
const PolicyBgpNeighborStatus_CONNECTION_STATE_OPEN_SENT = "OPEN_SENT"
const PolicyBgpNeighborStatus_CONNECTION_STATE_OPEN_CONFIRM = "OPEN_CONFIRM"
const PolicyBgpNeighborStatus_CONNECTION_STATE_ESTABLISHED = "ESTABLISHED"
const PolicyBgpNeighborStatus_CONNECTION_STATE_UNKNOWN = "UNKNOWN"

type PolicyBgpNeighborsStatusListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Status of BGP neighbors of the Tier0
	Results []PolicyBgpNeighborStatus
}

type PolicyComplianceStatus struct {
    // Timestamp of last update format: int64
	LastUpdatedTime *int64
    // List of non compliant configuration and impacted services
	NonCompliantConfigs []PolicyNonCompliantConfig
}

// Represents an object on the desired state.
type PolicyConfigResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// An entity that encapsulates attributes and sub-attributes of various network services (eg. L7 services, domain name, encryption algorithm) The entity will be consumed in firewall rules and can be added in new tuple called profile in firewall rules. To get a list of supported attributes and sub-attributes fire the following REST API GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes
type PolicyContextProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Property containing attributes/sub-attributes for Policy Context Profile.
	Attributes []PolicyAttributes
}

// List result of PolicyContextProfiles
type PolicyContextProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged collection of PolicyContextProfiles
	Results []PolicyContextProfile
}

// DNS forwarder nslookup answer per enforcement point.
type PolicyDnsAnswerPerEnforcementPoint struct {
    // Policy path referencing the enforcement point from where the DNS forwarder nslookup answer is fetched.
	EnforcementPointPath *string
    // Possible values are: 
    //
    // * PolicyDnsAnswerPerEnforcementPoint#PolicyDnsAnswerPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSANSWER
    //
    //  Resource type of the DNS forwarder nslookup answer.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PolicyDnsAnswerPerEnforcementPoint__TYPE_IDENTIFIER = "PolicyDnsAnswerPerEnforcementPoint"
const PolicyDnsAnswerPerEnforcementPoint_RESOURCE_TYPE_NSXTDNSANSWER = "NsxTDnsAnswer"

// Used to configure DNS Forwarder
type PolicyDnsForwarder struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Max of 5 DNS servers can be configured
	ConditionalForwarderZonePaths []string
    // This is the zone to which DNS requests are forwarded by default
	DefaultForwarderZonePath *string
    // The flag, which suggests whether the DNS forwarder is enabled or disabled. The default is True.
	Enabled *bool
    // This is the IP on which the DNS Forwarder listens. format: ipv4
	ListenerIp *string
    // Possible values are: 
    //
    // * PolicyDnsForwarder#PolicyDnsForwarder_LOG_LEVEL_DEBUG
    // * PolicyDnsForwarder#PolicyDnsForwarder_LOG_LEVEL_INFO
    // * PolicyDnsForwarder#PolicyDnsForwarder_LOG_LEVEL_WARNING
    // * PolicyDnsForwarder#PolicyDnsForwarder_LOG_LEVEL_ERROR
    // * PolicyDnsForwarder#PolicyDnsForwarder_LOG_LEVEL_FATAL
    //
    //  Set log_level to DISABLED will stop dumping fowarder log.
	LogLevel *string
}
const PolicyDnsForwarder_LOG_LEVEL_DEBUG = "DEBUG"
const PolicyDnsForwarder_LOG_LEVEL_INFO = "INFO"
const PolicyDnsForwarder_LOG_LEVEL_WARNING = "WARNING"
const PolicyDnsForwarder_LOG_LEVEL_ERROR = "ERROR"
const PolicyDnsForwarder_LOG_LEVEL_FATAL = "FATAL"

// Used to configure zones on DNS Forwarder
type PolicyDnsForwarderZone struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of domain names on which conditional forwarding is based. This field is required if the DNS Zone is being used for a conditional forwarder. This field will also be used for conditional reverse lookup. Example 1, if for one of the zones, one of the entries in the fqdn is example.com, all the DNS requests under the domain example.com will be served by the corresponding upstream DNS server. Example 2, if for one of the zones, one of the entries in the fqdn list is \"13.12.30.in-addr.arpa\", reverse lookup for 30.12.13.0/24 will go to the corresponding DNS server.
	DnsDomainNames []string
    // The source IP used by the DNS Forwarder zone. format: ipv4
	SourceIp *string
    // Max of 3 DNS servers can be configured format: ipv4
	UpstreamServers []string
}

// Paged Collection of DNS Forwarder Zones
type PolicyDnsForwarderZoneListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Dns Forwarder Zone list results
	Results []PolicyDnsForwarderZone
}

// A draft which stores the system generated as well as user intended changes in a hierarchical body format.
type PolicyDraft struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Flag to indicate whether draft is auto created. True indicates that the draft is an auto draft. False indicates that the draft is a manual draft.
	IsAutoDraft *bool
    // Comments for a policy draft lock/unlock.
	LockComments *string
    // ID of the user who last modified the lock for a policy draft.
	LockModifiedBy *string
    // Policy draft locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a draft should be locked. If the draft is locked by an user, then no other user would be able to modify or publish this draft. Once the user releases the lock, other users can then modify or publish this draft.
	Locked *bool
    // When specified, a manual draft will be created w.r.t. the specified draft. If not specified, manual draft will be created w.r.t. the current published configuration. For an auto draft, this will always be null.
	RefDraftPath *string
    // Configuration changes against the current configuration, tracked by the system. The value is stored in a hierarchical body format.
	SystemArea *Infra
    // These are user defined configuration changes, which are applicable only in case of manual drafts. During the publish of a draft, system_area changes gets applied first, and then these changes. The value must be in a hierarchical body format.
	UserArea *Infra
}

// This holds the list of policy drafts.
type PolicyDraftListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paginated list of policy drafts.
	Results []PolicyDraft
}

// Edge Cluster.
type PolicyEdgeCluster struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Flag to indicate status of inter site l2 and l3 forwarding in federation.
	InterSiteForwardingEnabled *bool
    // UUID of Edge Cluster on NSX-T enforcement point.
	NsxId *string
    // List of remote tunnel endpoint ipaddress configured on edge cluster. format: ip
	RtepIps []string
}

// Paged Collection of Edge Cluster
type PolicyEdgeClusterListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Edge Cluster list result.
	Results []PolicyEdgeCluster
}

// Edge Node.
type PolicyEdgeNode struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Member index of edge node in edge cluster. format: int64
	MemberIndex *int64
    // UUID of edge node on NSX-T enforcement point.
	NsxId *string
}

// Paged Collection of Edge Node
type PolicyEdgeNodeListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Edge Node list result.
	Results []PolicyEdgeNode
}

type PolicyExcludeList struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of the members in the exclude list
	Members []string
}

// It represent the resource with details of name and fields it owns.
type PolicyFineTuningResourceInfo struct {
    // List of all field of any resource
	Fields []PolicyFineTuningResourceInfoDetail
    // It will represent resource with name and fields.
	ResourceName *string
}

// Contains the details of resource field
type PolicyFineTuningResourceInfoDetail struct {
    // It will represent resource with name and fields.
	FieldName *string
    // List of all field of any resource
	SubType *PolicyFineTuningResourceInfo
}

// This entity will be used to establish association between CPU Memory Thresholds Profile and Transport Node. Using this entity, user can specify intent for applying Firewall CPU Memory Thresholds Profile to particular Transport Node.
type PolicyFirewallCPUMemThresholdsProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
    // Sequence number is used to resolve conflicts when two profiles get applied to a single node. Lower value gets higher precedence. Two binding maps having the same profile path should have the same sequence number. format: int64
	SequenceNumber *int64
    // References of transport nodes on which the profile intended to be applied.
	TransportNodes []PolicyResourceReference
}

// Paged collection of Firewall CPU Memory Thresholds Profile Binding Maps
type PolicyFirewallCPUMemThresholdsProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Firewall CPU Memory Thresholds Profile Binding Map list results
	Results []PolicyFirewallCPUMemThresholdsProfileBindingMap
}

// A profile holding CPU and memory thresholds configuration.
type PolicyFirewallCpuMemThresholdsProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // CPU utilization thresholds percentage to monitor and report for distributed firewall. format: int64
	CpuThresholdPercentage *int64
    // Heap memory thresholds percentage to monitor and report for distributed firewall. format: int64
	MemThresholdPercentage *int64
}

// Paged Collection of PolicyFirewallCpuMemThresholdsProfile
type PolicyFirewallCpuMemThresholdsProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // PolicyFirewallCpuMemThresholdsProfile list results
	Results []PolicyFirewallCpuMemThresholdsProfile
}

// This entity will be used to establish association between Firewall Flood Protection profile and Group. Using this entity, user can specify intent for applying Firewall Flood Protection profile to particular Group.
type PolicyFirewallFloodProtectionProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
    // Sequence number is used to resolve conflicts when two profiles get applied to a single port. Lower value gets higher precedence. Two binding maps having the same profile path should have the same sequence number. format: int64
	SequenceNumber *int64
}

// Paged collection of Firewall Flood Protection Profile Binding Maps
type PolicyFirewallFloodProtectionProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Firewall Flood Protection Profile Binding Map list results
	Results []PolicyFirewallFloodProtectionProfileBindingMap
}

// An entity that encapsulates attributes to schedule firewall rules to be active to allow or block traffic for a specific period of time. Note that at least one property out of \"days\", \"start_time\", \"end_time\", \"start_date\", \"end_date\" is required.
type PolicyFirewallScheduler struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_SUNDAY
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_MONDAY
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_TUESDAY
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_WEDNESDAY
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_THURSDAY
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_FRIDAY
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_DAYS_SATURDAY
    //
    //  Days of week on which rules will be enforced. If property is omitted, then days of the week will not considered while calculating the firewall schedule. It should not be present when the recurring flag is false.
	Days []string
    // End date on which schedule to end. Example, 12/22/2019.
	EndDate *string
    // If recurring field is set false, then this field must be present. The schedule will be enforced till the end time of the specified end date. If recurring field is set true, then this field should not be present.
	EndTime *string
    // Flag to indicate whether firewall schedule recurs or not. The default value is true and it should be set to false when the firewall schedule does not recur and is a one time time interval.
	Recurring *bool
    // Start date on which schedule to start. Example, 02/22/2019.
	StartDate *string
    // Time in 24 hour and minutes in multiple of 30. Example, 9:00. If recurring field is set false, then this field must be present. The schedule will start getting enforced from the start time of the specified start date. If recurring field is set true, then this field should not be present.
	StartTime *string
    // The recurring time interval in a day during which the schedule will be applicable. It should not be present when the recurring flag is false.
	TimeInterval []PolicyTimeIntervalValue
    // Possible values are: 
    //
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_TIMEZONE_UTC
    // * PolicyFirewallScheduler#PolicyFirewallScheduler_TIMEZONE_LOCAL
    //
    //  Host Timezone to be used to enforce firewall rules.
	Timezone *string
}
const PolicyFirewallScheduler_DAYS_SUNDAY = "SUNDAY"
const PolicyFirewallScheduler_DAYS_MONDAY = "MONDAY"
const PolicyFirewallScheduler_DAYS_TUESDAY = "TUESDAY"
const PolicyFirewallScheduler_DAYS_WEDNESDAY = "WEDNESDAY"
const PolicyFirewallScheduler_DAYS_THURSDAY = "THURSDAY"
const PolicyFirewallScheduler_DAYS_FRIDAY = "FRIDAY"
const PolicyFirewallScheduler_DAYS_SATURDAY = "SATURDAY"
const PolicyFirewallScheduler_TIMEZONE_UTC = "UTC"
const PolicyFirewallScheduler_TIMEZONE_LOCAL = "LOCAL"

// List result of PolicyFirewallSchedulers
type PolicyFirewallSchedulerListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged collection of PolicyFirewallSchedulers
	Results []PolicyFirewallScheduler
}

// A profile holding TCP, UDP and ICMP session timeout configuration.
type PolicyFirewallSessionTimerProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The timeout value for the connection after an ICMP error came back in response to an ICMP packet. format: int64
	IcmpErrorReply *int64
    // The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new ICMP flow. format: int64
	IcmpFirstPacket *int64
    // The timeout value of connection in seconds after one endpoint sends an RST. format: int64
	TcpClosed *int64
    // The timeout value of connection in seconds after the first FIN has been sent. format: int64
	TcpClosing *int64
    // The timeout value of connection in seconds once the connection has become fully established. format: int64
	TcpEstablished *int64
    // The timeout value of connection in seconds after both FINs have been exchanged and connection is closed. format: int64
	TcpFinwait *int64
    // The timeout value of connection in seconds after the first packet has been sent. format: int64
	TcpFirstPacket *int64
    // The timeout value of connection in seconds after a second packet has been transferred. format: int64
	TcpOpening *int64
    // The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new UDP flow. format: int64
	UdpFirstPacket *int64
    // The timeout value of connection in seconds if both hosts have sent packets. format: int64
	UdpMultiple *int64
    // The timeout value of connection in seconds if the source host sends more than one packet but the destination host has never sent one back. format: int64
	UdpSingle *int64
}

// This entity will be used to establish association between Firewall Timer session profile and Group. Using this entity, user can specify intent for applying Firewall Timer session profile to particular Group.
type PolicyFirewallSessionTimerProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Firewall Timer Session Profile
	FirewallSessionTimerProfilePath *string
    // Sequence number is used to resolve conflicts when two profiles get applied to a single port. Lower value gets higher precedence. Two binding maps having the same profile path should have the same sequence number. format: int64
	SequenceNumber *int64
}

// Paged collection of Firewall Session Timer Profile Binding Maps
type PolicyFirewallSessionTimerProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Firewall Session Timer Profile Binding Map list results
	Results []PolicyFirewallSessionTimerProfileBindingMap
}

// Paged Collection of Policy Firewall Session timeout profiles
type PolicyFirewallSessionTimerProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Policy Firewall Session timeout profile list results
	Results []PolicyFirewallSessionTimerProfile
}

// Paginated collection of IP members belonging to a Group.
type PolicyGroupIPMembersListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged Collection of IP addresses that belong to the given Group format: address-or-block-or-range
	Results []string
}

// Details of the member belonging to a Group
type PolicyGroupMemberDetails struct {
    // The display name of the member on the enforcement point
	DisplayName *string
    // The ID of the member on the enforcement point
	Id *string
    // The path of the member, if relevant
	Path *string
}

// Paginated collection of members belonging to a Group.
type PolicyGroupMembersListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged Collection of members that belong to the given Group
	Results []PolicyGroupMemberDetails
}

// Used to specify the display name and value of the IPv4Address.
type PolicyIPAddressInfo struct {
    // Value of the IPv4Address. format: ipv4
	AddressValue *string
    // Display name used to help identify the IPv4Address.
	DisplayName *string
    // Next hop used in auto-plumbing of static route. If a value is not provided, static route will not be auto-plumbed. format: ipv4
	NextHop *string
}

// IGMP profile.
type PolicyIgmpProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages. This value may be tuned to modify the \"leave latency\" of the network. A reduced value results in reduced time to detect the loss of the last member of a group. format: int32
	LastMemberQueryInterval *int64
    // Interval(seconds) between general IGMP host-query messages. format: int32
	QueryInterval *int64
    // The query response interval(seconds) is the maximum amount of time that can elapse between when the querier router sends a host-query message and when it receives a response from a host. Configuring this interval allows admins to adjust the burstiness of IGMP messages on the subnet; larger values make the traffic less bursty, as host responses are spread out over a larger interval. The number of seconds represented by the query_max_response_time must be less than the query_interval. format: int32
	QueryMaxResponseTime *int64
    // The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses. The Robustness Variable must not be zero, and SHOULD NOT be one. format: int32
	RobustnessVariable *int64
}

// Parameters to let the admin specify a relative position of a security policy or rule w.r.t to another one.
type PolicyInsertParameters struct {
    // The security policy/rule path if operation is 'insert_after' or 'insert_before'
	AnchorPath *string
    // Possible values are: 
    //
    // * PolicyInsertParameters#PolicyInsertParameters_OPERATION_TOP
    // * PolicyInsertParameters#PolicyInsertParameters_OPERATION_BOTTOM
    // * PolicyInsertParameters#PolicyInsertParameters_OPERATION_AFTER
    // * PolicyInsertParameters#PolicyInsertParameters_OPERATION_BEFORE
    //
    //  Operation
	Operation *string
}
const PolicyInsertParameters_OPERATION_TOP = "insert_top"
const PolicyInsertParameters_OPERATION_BOTTOM = "insert_bottom"
const PolicyInsertParameters_OPERATION_AFTER = "insert_after"
const PolicyInsertParameters_OPERATION_BEFORE = "insert_before"

// Tier0 or Tier1 interface statistics on specific Enforcement Point.
type PolicyInterfaceStatistics struct {
    // The ID of the logical router port
	LogicalRouterPortId *string
    // Per Node Statistics
	PerNodeStatistics []LogicalRouterPortStatisticsPerNode
}

// Tier0 or Tier1 interface statistics on specific Enforcement Point.
type PolicyInterfaceStatisticsSummary struct {
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
	Rx *LogicalRouterPortCounters
	Tx *LogicalRouterPortCounters
    // The ID of the logical router port
	LogicalRouterPortId *string
    // Policy path for the interface
	InterfacePolicyPath *string
}

// Label to reference group of policy entities of same type.
type PolicyLabel struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Policy entity paths referred by the label instance
	Refs []string
    // Policy intent entity type from PolicyResourceType
	Type_ *string
}

// Paged Collection of Domains
type PolicyLabelListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Policy label list results
	Results []PolicyLabel
}

// All the types of PolicyLbMonitorProfile extend from this abstract class. This is present for extensibility.
type PolicyLbMonitorProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PolicyLbMonitorProfile__TYPE_IDENTIFIER = "PolicyLbMonitorProfile"
const PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE = "TcpPolicyLbMonitorProfile"
const PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE = "UdpPolicyLbMonitorProfile"
const PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE = "IcmpPolicyLbMonitorProfile"
const PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE = "HttpPolicyLbMonitorProfile"
const PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE = "HttpsPolicyLbMonitorProfile"

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type PolicyLbPersistenceProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L4POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_L7POLICYLBPERSISTENCEPROFILE
    // * PolicyLbPersistenceProfile#PolicyLbPersistenceProfile_RESOURCE_TYPE_CUSTOMPOLICYLBPERSISTENCEPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PolicyLbPersistenceProfile__TYPE_IDENTIFIER = "PolicyLbPersistenceProfile"
const PolicyLbPersistenceProfile_RESOURCE_TYPE_L4POLICYLBPERSISTENCEPROFILE = "L4PolicyLbPersistenceProfile"
const PolicyLbPersistenceProfile_RESOURCE_TYPE_L7POLICYLBPERSISTENCEPROFILE = "L7PolicyLbPersistenceProfile"
const PolicyLbPersistenceProfile_RESOURCE_TYPE_CUSTOMPOLICYLBPERSISTENCEPROFILE = "CustomPolicyLbPersistenceProfile"

// Defining access of a Group from a PolicyLbVirtualServer and binding to PolicyLbMonitorProfile.
type PolicyLbPoolAccess struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * PolicyLbPoolAccess#PolicyLbPoolAccess_ALGORITHM_ROUND_ROBIN
    // * PolicyLbPoolAccess#PolicyLbPoolAccess_ALGORITHM_LEAST_CONNECTION
    //
    //  Load balanding algorithm controls how the incoming connections are distributed among the members. - ROUND_ROBIN - requests to the application servers are distributed in a round-robin fashion, - LEAST_CONNECTION - next request is assigned to the server with the least number of active connections
	Algorithm *string
    // IP Port list for applications within the Group to allow for non-uniform port usage by applications
	IpPortList []IPAddressPortPair
    // Path of the PolicyLbMonitorProfile to actively monitor the PolicyLbPoolAccess's Group
	LbMonitorProfile *string
    // Port for LoadBalancer to send connections to the PolicyLbPoolAccess's Group. Pool_port could be optional, if it is not specified, LB will use PolicyLbVirtualServer port to connect to backend servers. If the PolicyLbMonitorProfile is configured in PolicyLbPoolAccess and active monitor IP protocol is TCP/UDP(which requires TCP or UDP port number), monitor_port should be specified if pool_port is unset. format: int32
	PoolPort *int64
    // Possible values are: 
    //
    // * PolicyLbPoolAccess#PolicyLbPoolAccess_SOURCE_NAT_ENABLED
    // * PolicyLbPoolAccess#PolicyLbPoolAccess_SOURCE_NAT_DISABLED
    //
    //  Depending on the topology, Source NAT (SNAT) may be required to ensure traffic from the server destined to the client is received by the load balancer. SNAT can be enabled per pool. If SNAT is not enabled for a pool, then load balancer uses the client IP and port (spoofing) while establishing connections to the servers. This is referred to as no-SNAT or TRANSPARENT mode. SNAT is enabled by default and will use the load balancer interface IP and an ephemeral port as the source IP and port of the server side connection.
	SourceNat *string
}
const PolicyLbPoolAccess_ALGORITHM_ROUND_ROBIN = "ROUND_ROBIN"
const PolicyLbPoolAccess_ALGORITHM_LEAST_CONNECTION = "LEAST_CONNECTION"
const PolicyLbPoolAccess_SOURCE_NAT_ENABLED = "ENABLED"
const PolicyLbPoolAccess_SOURCE_NAT_DISABLED = "DISABLED"

// Binding of a LbPoolAccess and Group to a PolicyLbVirtualServer used to route application traffic passing through load balancers. PolicyLbRule uses match conditions to match application traffic passing through a PolicyLbVirtualServer using HTTP or HTTPS. Can bind multiple PolicyLbVirtualServers to a Group. Each PolicyLbRule consists of two optional match conditions, each match contidion defines a criterion for application traffic. If no match conditions are specified, then the PolicyLbRule will always match and it is used typically to define default rules. If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the PolicyLbRule to be considered a match. A match indicates that the PolicyLbVirtualServer should route the request to the Group (parent of PolicyLbRule).
type PolicyLbRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // This condition is used to match HTTP request messages by the specific HTTP header field, Host. The Host request header specifies the domain name of the server. The supplied Host HTTP header match condition will be matched as a regular expression. The regular expressions in load balancer rules use the features common to both Java regular expressions and Perl Compatible Regular Expressions (PCREs) with some restrictions. Reference http://www.pcre .org for PCRE and the NSX-T Administrator's Guide for the restrictions. Please note, when regular expressions are used in JSON (JavaScript Object Notation) string, every backslash character (\\) needs to be escaped by one additional backslash character.
	HostMatch *string
    // The path of PolicyLbVirtualServer to bind to this PolicyLbRule and its Group
	LbVirtualServer *string
    // Possible values are: 
    //
    // * PolicyLbRule#PolicyLbRule_MATCH_STRATEGY_ALL
    // * PolicyLbRule#PolicyLbRule_MATCH_STRATEGY_ANY
    //
    //  If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the LB Rule to be considered a match. - ALL indicates that both host_match and path_match must match for this PolicyLbRule to be considered a match - ANY indicates that either host_match or patch match may match for this PolicyLbRule to be considered a match
	MatchStrategy *string
    // This condition is used to match URIs(Uniform Resource Identifier) of HTTP request messages. The URI field can be specified as a regluar expression. If an HTTP request message is requesting an URI which matches specified regular expression, it matches the condition. The syntax of whole URI looks like this: scheme:[//[user[:password]\\\\@]host[:port]][/path][?query][#fragment] This condition matches only the path part of entire URI. The path_match field is used as a regular expression to match URI path of HTTP requests. For example, to match any URI that has \"/image/\" or \"/images/\", uri field can be specified as: \"/image[s]?/\". The regular expressions in load balancer rules use the features common to both Java regular expressions and Perl Compatible Regular Expressions (PCREs) with some restrictions. Reference http://www.pcre .org for PCRE and the NSX-T Administrator's Guide for the restrictions. Please note, when regular expressions are used in JSON (JavaScript Object Notation) string, every backslash character (\\) needs to be escaped by one additional backslash character.
	PathMatch *string
    // This field is used to resolve conflicts between multiple PolicyLbRules associated with a single PolicyLbVirtualServer and will be applied numerically or low to high format: int32
	SequenceNumber *int64
}
const PolicyLbRule_MATCH_STRATEGY_ALL = "ALL"
const PolicyLbRule_MATCH_STRATEGY_ANY = "ANY"

// All the types of PolicyLbVirtualServer extend from this abstract class. This is present for extensibility.
type PolicyLbVirtualServer struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled *bool
    // Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath *string
	TrafficSource *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const PolicyLbVirtualServer__TYPE_IDENTIFIER = "PolicyLbVirtualServer"
const PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER = "TcpPolicyLbVirtualServer"
const PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER = "UdpPolicyLbVirtualServer"
const PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER = "HttpPolicyLbVirtualServer"
const PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER = "HttpsPolicyLbVirtualServer"
const PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER = "CustomPolicyLbVirtualServer"

// Paged Collection of security policies
type PolicyListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
}

// Multicast routing configuration.
type PolicyMulticastConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Enable/disable Multicast Configuration.
	Enabled *bool
    // Updates to IGMP profile applied on all Tier0 gateways consuming the configuration.
	IgmpProfilePath *string
    // Updates to PIM profile applied on all Tier0 gateways consuming the configuration.
	PimProfilePath *string
    // Replication multicast range. Required when enabled. format: ipv4-cidr-block
	ReplicationMulticastRange *string
}

// Gives the statistics count of a NAT rule.
type PolicyNATRuleCounters struct {
    // Gives the total number of active sessions. format: int64
	ActiveSessions *int64
    // Gives the total number of bytes. format: int64
	TotalBytes *int64
    // Gives the total number of packets. format: int64
	TotalPackets *int64
}

// Represents NAT section. This object is created by default when corresponding tier-0/tier-1 is created. Under tier-0/tier-1 there will be 4 different NATs(sections). (INTERNAL, USER, DEFAULT and NAT64).
type PolicyNat struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * PolicyNat#PolicyNat_NAT_TYPE_INTERNAL
    // * PolicyNat#PolicyNat_NAT_TYPE_USER
    // * PolicyNat#PolicyNat_NAT_TYPE_DEFAULT
    // * PolicyNat#PolicyNat_NAT_TYPE_NAT64
    //
    //  Represents a NAT section under tier-0/tier-1.
	NatType *string
}
const PolicyNat_NAT_TYPE_INTERNAL = "INTERNAL"
const PolicyNat_NAT_TYPE_USER = "USER"
const PolicyNat_NAT_TYPE_DEFAULT = "DEFAULT"
const PolicyNat_NAT_TYPE_NAT64 = "NAT64"

// Represents a NAT rule between source and destination at T0/T1 router.
type PolicyNatRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * PolicyNatRule#PolicyNatRule_ACTION_SNAT
    // * PolicyNatRule#PolicyNatRule_ACTION_DNAT
    // * PolicyNatRule#PolicyNatRule_ACTION_REFLEXIVE
    // * PolicyNatRule#PolicyNatRule_ACTION_NO_SNAT
    // * PolicyNatRule#PolicyNatRule_ACTION_NO_DNAT
    // * PolicyNatRule#PolicyNatRule_ACTION_NAT64
    //
    //  Source NAT(SNAT) - translates a source IP address in an outbound packet so that the packet appears to originate from a different network. SNAT is only supported when the logical router is running in active-standby mode. Destination NAT(DNAT) - translates the destination IP address of inbound packets so that packets are delivered to a target address into another network. DNAT is only supported when the logical router is running in active-standby mode. Reflexive NAT(REFLEXIVE) - IP-Range and CIDR are supported to define the \"n\". The number of original networks should be exactly the same as that of translated networks. The address translation is deterministic. Reflexive is supported on both Active/Standby and Active/Active LR. NO_SNAT and NO_DNAT - These do not have support for translated_fields, only source_network and destination_network fields are supported. NAT64 - translates an external IPv6 address to a internal IPv4 address.
	Action *string
    // This supports single IP address or comma separated list of single IP addresses or CIDR. This does not support IP range or IP sets. For DNAT and NO_DNAT rules, this is a mandatory field, and represents the destination network for the incoming packets. For other type of rules, optionally it can contain destination network of outgoing packets. NULL value for this field represents ANY network. format: list-of-address-or-block-or-range
	DestinationNetwork *string
    // The flag, which suggests whether the NAT rule is enabled or disabled. The default is True.
	Enabled *bool
    // Possible values are: 
    //
    // * PolicyNatRule#PolicyNatRule_FIREWALL_MATCH_MATCH_EXTERNAL_ADDRESS
    // * PolicyNatRule#PolicyNatRule_FIREWALL_MATCH_MATCH_INTERNAL_ADDRESS
    // * PolicyNatRule#PolicyNatRule_FIREWALL_MATCH_BYPASS
    //
    //  It indicates how the firewall matches the address after NATing if firewall stage is not skipped. MATCH_EXTERNAL_ADDRESS indicates the firewall will be applied to external address of a NAT rule. For SNAT, the external address is the translated source address after NAT is done. For DNAT, the external address is the original destination address before NAT is done. For REFLEXIVE, to egress traffic, the firewall will be applied to the translated source address after NAT is done; To ingress traffic, the firewall will be applied to the original destination address before NAT is done. MATCH_INTERNAL_ADDRESS indicates the firewall will be applied to internal address of a NAT rule. For SNAT, the internal address is the original source address before NAT is done. For DNAT, the internal address is the translated destination address after NAT is done. For REFLEXIVE, to egress traffic, the firewall will be applied to the original source address before NAT is done; To ingress traffic, the firewall will be applied to the translated destination address after NAT is done. BYPASS indicates the firewall stage will be skipped. For NO_SNAT or NO_DNAT, it must be BYPASS or leave it unassigned
	FirewallMatch *string
    // The flag, which suggests whether the logging of NAT rule is enabled or disabled. The default is False.
	Logging *bool
    // Represents the array of policy paths of ProviderInterface or NetworkInterface or labels of type ProviderInterface or NetworkInterface on which the NAT rule should get enforced. The interfaces must belong to the same router for which the NAT Rule is created.
	Scope []string
    // The sequence_number decides the rule_priority of a NAT rule. Sequence_number and rule_priority have 1:1 mapping.For each NAT section, there will be reserved rule_priority numbers.The valid range of rule_priority number is from 0 to 2147483647(MAX_INT). 1. INTERNAL section rule_priority reserved from 0 - 1023 (1024 rules) valid sequence_number range 0 - 1023 2. USER section rule_priority reserved from 1024 - 2147482623 (2147481600 rules) valid sequence_number range 0 - 2147481599 3. DEFAULT section rule_priority reserved from 2147482624 - 2147483647 (1024 rules) valid sequence_number range 0 - 1023 format: int32
	SequenceNumber *int64
    // It represents the path of Service on which the NAT rule will be applied. If not provided or if it is blank then Policy manager will consider it as ANY.
	Service *string
    // This supports single IP address or comma separated list of single IP addresses or CIDR. This does not support IP range or IP sets. For SNAT, NO_SNAT, NAT64 and REFLEXIVE rules, this is a mandatory field and represents the source network of the packets leaving the network. For DNAT and NO_DNAT rules, optionally it can contain source network of incoming packets. NULL value for this field represents ANY network. format: list-of-address-or-block-or-range
	SourceNetwork *string
    // This supports single IP address or comma separated list of single IP addresses or CIDR. This does not support IP range or IP sets. For SNAT, DNAT, NAT64 and REFLEXIVE rules, this ia a mandatory field, which represents the translated network address. For NO_SNAT and NO_DNAT this should be empty. format: list-of-address-or-block-or-range
	TranslatedNetwork *string
    // Port number or port range format: port-or-range
	TranslatedPorts *string
}
const PolicyNatRule_ACTION_SNAT = "SNAT"
const PolicyNatRule_ACTION_DNAT = "DNAT"
const PolicyNatRule_ACTION_REFLEXIVE = "REFLEXIVE"
const PolicyNatRule_ACTION_NO_SNAT = "NO_SNAT"
const PolicyNatRule_ACTION_NO_DNAT = "NO_DNAT"
const PolicyNatRule_ACTION_NAT64 = "NAT64"
const PolicyNatRule_FIREWALL_MATCH_MATCH_EXTERNAL_ADDRESS = "MATCH_EXTERNAL_ADDRESS"
const PolicyNatRule_FIREWALL_MATCH_MATCH_INTERNAL_ADDRESS = "MATCH_INTERNAL_ADDRESS"
const PolicyNatRule_FIREWALL_MATCH_BYPASS = "BYPASS"

// Paged Collection of NAT Rules
type PolicyNatRuleListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // NAT Rules list results
	Results []PolicyNatRule
}

// Gives the Statistics of a NAT rule.
type PolicyNatRuleStatistics struct {
    // Gives the total number of active sessions. format: int64
	ActiveSessions *int64
    // Gives the total number of bytes. format: int64
	TotalBytes *int64
    // Gives the total number of packets. format: int64
	TotalPackets *int64
    // Timestamp when the data was last updated. format: int64
	LastUpdateTimestamp *int64
    // The warning message about the NAT Rule Statistics.
	WarningMessage *string
}

// Gives the collection of NAT rule statistics per enforcement point.
type PolicyNatRuleStatisticsListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // NAT rules statistics per enforcement point
	Results []PolicyNatRuleStatisticsPerEnforcementPoint
}

// Gives the statistics of a NAT rule per enforcement point.
type PolicyNatRuleStatisticsPerEnforcementPoint struct {
    // Policy Path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath *string
    // Path of NAT Rule.
	RulePath *string
    // Gives NAT rule stats on an enforcement point.
	RuleStatistics []PolicyNatRuleStatistics
}

// Gives the statistics of a NAT rule per logical router on specified enforcement point.
type PolicyNatRuleStatisticsPerLogicalRouter struct {
    // Policy Path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath *string
    // Timestamp when the data was last updated. format: int64
	LastUpdateTimestamp *int64
    // Detailed Rule statistics per logical router.
	PerNodeStatistics []PolicyNatRuleStatisticsPerTransportNode
    // Path of the router.
	RouterPath *string
    // Rolled up statistics for all rules on the logical router.
	Statistics *PolicyNATRuleCounters
}

// Gives the collection of NAT rule statistics per logical router on specified enforcement point.
type PolicyNatRuleStatisticsPerLogicalRouterListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // NAT rules statistics per logical router
	Results []PolicyNatRuleStatisticsPerLogicalRouter
}

// Gives the Statistics of a NAT rule.
type PolicyNatRuleStatisticsPerTransportNode struct {
    // Gives the total number of active sessions. format: int64
	ActiveSessions *int64
    // Gives the total number of bytes. format: int64
	TotalBytes *int64
    // Gives the total number of packets. format: int64
	TotalPackets *int64
    // Timestamp when the data was last updated. format: int64
	LastUpdateTimestamp *int64
    // Policy path of the Edge Node.
	TransportNodePath *string
}

type PolicyNonCompliantConfig struct {
    // Resources/Services impacted by non compliant configuration
	AffectedResources []PolicyResourceReference
    // Detail description of non compliant configuration with suggestive action
	Description *string
    // Code for non compliant configuration format: int64
	NonComplianceCode *int64
    // Id and name of non compliant resource/service
	ReportedBy *PolicyResourceReference
}

// PIM profile.
type PolicyPimProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Static IPv4 multicast address configuration. format: ip
	RpAddress *string
}

// Abstract base class for all the realized policy objects
type PolicyRealizedResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // Alarm info detail
	Alarms []PolicyAlarmResource
    // Desire state paths of this object
	IntentReference []string
    // Realization API of this object on enforcement point
	RealizationApi *string
    // Realization id of this object
	RealizationSpecificIdentifier *string
    // It define the root cause for runtime error.
	RuntimeError *string
    // Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus *string
    // Possible values are: 
    //
    // * PolicyRealizedResource#PolicyRealizedResource_STATE_UNAVAILABLE
    // * PolicyRealizedResource#PolicyRealizedResource_STATE_UNREALIZED
    // * PolicyRealizedResource#PolicyRealizedResource_STATE_REALIZED
    // * PolicyRealizedResource#PolicyRealizedResource_STATE_ERROR
    //
    //  Realization state of this object
	State *string
}
const PolicyRealizedResource_STATE_UNAVAILABLE = "UNAVAILABLE"
const PolicyRealizedResource_STATE_UNREALIZED = "UNREALIZED"
const PolicyRealizedResource_STATE_REALIZED = "REALIZED"
const PolicyRealizedResource_STATE_ERROR = "ERROR"

// Detailed information about errors from API call to an enforcement point
type PolicyRelatedApiError struct {
    // Further details about the error
	Details *string
    // A numeric error code format: int64
	ErrorCode *int64
    // Additional data about the error
	ErrorData *data.StructValue
    // A description of the error
	ErrorMessage *string
    // The module name where the error occurred
	ModuleName *string
}

// Abstract base class for all the policy objects.
type PolicyResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
}

// Policy resource reference.
type PolicyResourceReference struct {
    // Will be set to false if the referenced NSX resource has been deleted.
	IsValid *bool
    // Display name of the NSX resource.
	TargetDisplayName *string
    // Identifier of the NSX resource.
	TargetId *string
    // Type of the NSX resource.
	TargetType *string
    // Absolute path of this object.
	Path *string
}

// Policy resource reference for enforcement point
type PolicyResourceReferenceForEP struct {
    // Will be set to false if the referenced NSX resource has been deleted.
	IsValid *bool
    // Display name of the NSX resource.
	TargetDisplayName *string
    // Identifier of the NSX resource.
	TargetId *string
    // Type of the NSX resource.
	TargetType *string
    // Absolute path of this object.
	Path *string
}

// Paginated collection of policy resource references for enforcement point
type PolicyResourceReferenceForEPListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged Collection of policy resource references for enforcement point
	Results []PolicyResourceReferenceForEP
}

// Paged Collection of PolicyResourceReference
type PolicyResourceReferenceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Policy resource references list results
	Results []PolicyResourceReference
}

// Alarm associated with the PolicyRuntimeInfoPerEP that exposes potential errors when retrieving runtime information from the enforcement point.
type PolicyRuntimeAlarm struct {
    // Detailed information about errors from an API call made to the enforcement point, if any.
	ErrorDetails *PolicyApiError
    // Alarm error id.
	ErrorId *string
    // Error message describing the issue.
	Message *string
}

// Runtime Info Per Enforcement Point.
type PolicyRuntimeInfoPerEP struct {
    // Alarm information details.
	Alarm *PolicyRuntimeAlarm
    // Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath *string
}

// Service chain is a set of network Services. A Service chain is made up of ordered list of service profiles belonging to any same or different services.
type PolicyServiceChain struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * PolicyServiceChain#PolicyServiceChain_FAILURE_POLICY_ALLOW
    // * PolicyServiceChain#PolicyServiceChain_FAILURE_POLICY_BLOCK
    //
    //  Failure policy for the service defines the action to be taken i.e to allow or to block the traffic during failure scenarios.
	FailurePolicy *string
    // Forward path service profiles are applied to ingress traffic.
	ForwardPathServiceProfiles []string
    // Possible values are: 
    //
    // * PolicyServiceChain#PolicyServiceChain_PATH_SELECTION_POLICY_ANY
    // * PolicyServiceChain#PolicyServiceChain_PATH_SELECTION_POLICY_LOCAL
    // * PolicyServiceChain#PolicyServiceChain_PATH_SELECTION_POLICY_REMOTE
    // * PolicyServiceChain#PolicyServiceChain_PATH_SELECTION_POLICY_ROUND_ROBIN
    //
    //  Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - Preference to be given to local service insances. REMOTE - Preference to be given to the SVM co-located on the same host. ROUND_ROBIN - All active service paths are hit with equal probability.
	PathSelectionPolicy *string
    // Reverse path service profiles are applied to egress traffic and is optional. 2 different set of profiles can be defined for forward and reverse path. If not defined, the reverse of the forward path service profile is applied.
	ReversePathServiceProfiles []string
    // Path to service segment using which the traffic needs to be redirected.
	ServiceSegmentPath []string
}
const PolicyServiceChain_FAILURE_POLICY_ALLOW = "ALLOW"
const PolicyServiceChain_FAILURE_POLICY_BLOCK = "BLOCK"
const PolicyServiceChain_PATH_SELECTION_POLICY_ANY = "ANY"
const PolicyServiceChain_PATH_SELECTION_POLICY_LOCAL = "LOCAL"
const PolicyServiceChain_PATH_SELECTION_POLICY_REMOTE = "REMOTE"
const PolicyServiceChain_PATH_SELECTION_POLICY_ROUND_ROBIN = "ROUND_ROBIN"

// Represents an instance of partner Service and its configuration.
type PolicyServiceInstance struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * PolicyServiceInstance#PolicyServiceInstance_DEPLOYMENT_MODE_STAND_ALONE
    // * PolicyServiceInstance#PolicyServiceInstance_DEPLOYMENT_MODE_ACTIVE_STANDBY
    //
    //  Deployment mode specifies how the partner appliance will be deployed i.e. in HA or standalone mode.
	DeploymentMode *string
    // Unique name of Partner Service in the Marketplace
	PartnerServiceName *string
    // Possible values are: 
    //
    // * PolicyServiceInstance#PolicyServiceInstance_TRANSPORT_TYPE_L2_BRIDGE
    // * PolicyServiceInstance#PolicyServiceInstance_TRANSPORT_TYPE_L3_ROUTED
    //
    //  Transport to be used while deploying Service-VM.
	TransportType *string
    // List of attributes specific to a partner for which the service is created. There attributes are passed on to the partner appliance.
	Attributes []Attribute
    // Id of the compute(ResourcePool) to which this service needs to be deployed.
	ComputeId *string
    // UUID of VCenter/Compute Manager as seen on NSX Manager, to which this service needs to be deployed.
	ContextId *string
    // Form factor for the deployment of partner service.
	DeploymentSpecName *string
    // Template for the deployment of partnet service.
	DeploymentTemplateName *string
    // Possible values are: 
    //
    // * PolicyServiceInstance#PolicyServiceInstance_FAILURE_POLICY_ALLOW
    // * PolicyServiceInstance#PolicyServiceInstance_FAILURE_POLICY_BLOCK
    //
    //  Failure policy for the Service VM. If this values is not provided, it will be defaulted to FAIL_CLOSE.
	FailurePolicy *string
    // Gateway address for primary management console. If the provided segment already has gateway, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have gateway, this field must be provided. format: address-or-block-or-range
	PrimaryGatewayAddress *string
    // Management IP Address of primary interface of the Service format: address-or-block-or-range
	PrimaryInterfaceMgmtIp *string
    // Path of the segment to which primary interface of the Service VM needs to be connected
	PrimaryInterfaceNetwork *string
    // Id of the standard or ditsributed port group for primary management console. Please note that only 1 of the 2 values from 1. primary_interface_network 2. primary_portgroup_id are allowed to be passed. Both can't be passed in the same request.
	PrimaryPortgroupId *string
    // Subnet for primary management console IP. If the provided segment already has subnet, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have subnet, this field must be provided. format: address-or-block-or-range
	PrimarySubnetMask *string
    // Gateway address for secondary management console. If the provided segment already has gateway, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have gateway, this field must be provided. format: address-or-block-or-range
	SecondaryGatewayAddress *string
    // Management IP Address of secondary interface of the Service format: address-or-block-or-range
	SecondaryInterfaceMgmtIp *string
    // Path of segment to which secondary interface of the Service VM needs to be connected
	SecondaryInterfaceNetwork *string
    // Id of the standard or ditsributed port group for secondary management console. Please note that only 1 of the 2 values from 1. secondary_interface_network 2. secondary_portgroup_id are allowed to be passed. Both can't be passed in the same request.
	SecondaryPortgroupId *string
    // Subnet for secondary management console IP. If the provided segment already has subnet, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have subnet, this field must be provided. format: address-or-block-or-range
	SecondarySubnetMask *string
    // Id of the storage(Datastore). VC moref of Datastore to which this service needs to be deployed.
	StorageId *string
}
const PolicyServiceInstance_DEPLOYMENT_MODE_STAND_ALONE = "STAND_ALONE"
const PolicyServiceInstance_DEPLOYMENT_MODE_ACTIVE_STANDBY = "ACTIVE_STANDBY"
const PolicyServiceInstance_TRANSPORT_TYPE_L2_BRIDGE = "L2_BRIDGE"
const PolicyServiceInstance_TRANSPORT_TYPE_L3_ROUTED = "L3_ROUTED"
const PolicyServiceInstance_FAILURE_POLICY_ALLOW = "ALLOW"
const PolicyServiceInstance_FAILURE_POLICY_BLOCK = "BLOCK"

// Service profile represents specialization of a vendor template. User may provide any of the vendor_template_name or vendor_template_key properties. But in case of multiple vendor templates with the same name, it is recommended to use the vendor_template_key. When both attributes are provided, name is ignored and only key is used to identify the template. If there are multiple templates with same name, and vendor_template_name is provided, realization will fail.
type PolicyServiceProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of attributes specific to a partner for which the service is created. These attributes are passed on to the partner appliance and are opaque to NSX. If a vendor template exposes configurable parameters, then their values are specified here.
	Attributes []Attribute
    // Possible values are: 
    //
    // * PolicyServiceProfile#PolicyServiceProfile_REDIRECTION_ACTION_PUNT
    // * PolicyServiceProfile#PolicyServiceProfile_REDIRECTION_ACTION_COPY
    //
    //  The redirection action represents if the packet is exclusively redirected to the service, or if a copy is forwarded to the service. Redirection action is not applicable to guest introspection service.
	RedirectionAction *string
    // The vendor template key property of actual vendor template. This should be used when multiple templates with same name exist.
	VendorTemplateKey *string
    // Name of the vendor template for which this Service Profile is being created.
	VendorTemplateName *string
}
const PolicyServiceProfile_REDIRECTION_ACTION_PUNT = "PUNT"
const PolicyServiceProfile_REDIRECTION_ACTION_COPY = "COPY"

// Policy Sub Attributes data holder
type PolicySubAttributes struct {
    // Possible values are: 
    //
    // * PolicySubAttributes#PolicySubAttributes_DATATYPE_STRING
    //
    //  Datatype for sub attribute
	Datatype *string
    // Possible values are: 
    //
    // * PolicySubAttributes#PolicySubAttributes_KEY_TLS_CIPHER_SUITE
    // * PolicySubAttributes#PolicySubAttributes_KEY_TLS_VERSION
    // * PolicySubAttributes#PolicySubAttributes_KEY_CIFS_SMB_VERSION
    //
    //  Key for sub attribute
	Key *string
    // Multiple sub attribute values can be specified as elements of array.
	Value []string
}
const PolicySubAttributes_DATATYPE_STRING = "STRING"
const PolicySubAttributes_KEY_TLS_CIPHER_SUITE = "TLS_CIPHER_SUITE"
const PolicySubAttributes_KEY_TLS_VERSION = "TLS_VERSION"
const PolicySubAttributes_KEY_CIFS_SMB_VERSION = "CIFS_SMB_VERSION"

// Time interval on which firewall schedule will be applicable
type PolicyTimeIntervalValue struct {
    // Time in 24 hour and minutes in multiple of 30. Example, 17:30.
	EndInterval *string
    // Time in 24 hour and minutes in multiple of 30. Example, 9:00.
	StartInterval *string
}

// Transport Zone.
type PolicyTransportZone struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Flag to indicate if the transport zone is the default one. Only one transport zone can be the default one for a given transport zone type.
	IsDefault *bool
    // UUID of transport zone on NSX-T enforcement point.
	NsxId *string
    // Possible values are: 
    //
    // * PolicyTransportZone#PolicyTransportZone_TZ_TYPE_OVERLAY_STANDARD
    // * PolicyTransportZone#PolicyTransportZone_TZ_TYPE_OVERLAY_ENS
    // * PolicyTransportZone#PolicyTransportZone_TZ_TYPE_VLAN_BACKED
    // * PolicyTransportZone#PolicyTransportZone_TZ_TYPE_UNKNOWN
    //
    //  Transport Zone Type.
	TzType *string
    // The names of switching uplink teaming policies that all transport nodes in this transport zone support. Uplinkin teaming policies are only valid for VLAN backed transport zones.
	UplinkTeamingPolicyNames []string
}
const PolicyTransportZone_TZ_TYPE_OVERLAY_STANDARD = "OVERLAY_STANDARD"
const PolicyTransportZone_TZ_TYPE_OVERLAY_ENS = "OVERLAY_ENS"
const PolicyTransportZone_TZ_TYPE_VLAN_BACKED = "VLAN_BACKED"
const PolicyTransportZone_TZ_TYPE_UNKNOWN = "UNKNOWN"

// Paged Collection of Transport Zone
type PolicyTransportZoneListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Transport Zone list result.
	Results []PolicyTransportZone
}

// The type contains information about the configuration of the feature for a specific node. It contains information like the whether the feature is enabled/disabled, the context profiles defining the category list to detect.
type PolicyUrlCategorizationConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The ids of the context profiles that provides the list of categories to be detected.
	ContextProfiles []string
    // Property which specifies the enabling/disabling of the feature.
	Enabled *bool
    // The frequency in minutes at which the updates are downloaded from the URL categorization cloud service. The minimum allowed value is 5 minutes. format: int32
	UpdateFrequency *int64
}

// The setting is used to add, update or remove pool members from pool. For static pool members, admin_state, display_name and weight can be updated. For dynamic pool members, only admin_state can be updated.
type PoolMemberSetting struct {
    // Possible values are: 
    //
    // * PoolMemberSetting#PoolMemberSetting_ADMIN_STATE_ENABLED
    // * PoolMemberSetting#PoolMemberSetting_ADMIN_STATE_DISABLED
    // * PoolMemberSetting#PoolMemberSetting_ADMIN_STATE_GRACEFUL_DISABLED
    //
    //  Member admin state
	AdminState *string
    // Only applicable to static pool members. If supplied for a pool defined by a grouping object, update API would fail.
	DisplayName *string
    // Pool member IP address format: ip
	IpAddress *string
    // Pool member port number format: port-or-range
	Port *string
    // Only applicable to static pool members. If supplied for a pool defined by a grouping object, update API would fail. format: int64
	Weight *int64
}
const PoolMemberSetting_ADMIN_STATE_ENABLED = "ENABLED"
const PoolMemberSetting_ADMIN_STATE_DISABLED = "DISABLED"
const PoolMemberSetting_ADMIN_STATE_GRACEFUL_DISABLED = "GRACEFUL_DISABLED"

// Detailed information about static address for the port.
type PortAddressBindingEntry struct {
    // IP Address for port binding
	IpAddress *string
    // Mac address for port binding format: mac-address
	MacAddress *string
    // VLAN ID for port binding format: int64
	VlanId *int64
}

// Detail information about port attachment
type PortAttachment struct {
    // Possible values are: 
    //
    // * PortAttachment#PortAttachment_ALLOCATE_ADDRESSES_IP_POOL
    // * PortAttachment#PortAttachment_ALLOCATE_ADDRESSES_MAC_POOL
    // * PortAttachment#PortAttachment_ALLOCATE_ADDRESSES_BOTH
    // * PortAttachment#PortAttachment_ALLOCATE_ADDRESSES_NONE
    //
    //  Indicate how IP will be allocated for the port
	AllocateAddresses *string
    // ID used to identify/look up a child attachment behind a parent attachment
	AppId *string
    // If type is CHILD and the parent port is on the same segment as the child port, then this field should be VIF ID of the parent port. If type is CHILD and the parent port is on a different segment, then this field should be policy path of the parent port. If type is INDEPENDENT/STATIC, then this field should be transport node ID.
	ContextId *string
    // Possible values are: 
    //
    // * PortAttachment#PortAttachment_CONTEXT_TYPE_PARENT
    //
    //  Set to PARENT when type field is CHILD. Read only field.
	ContextType *string
    // Possible values are: 
    //
    // * PortAttachment#PortAttachment_HYPERBUS_MODE_ENABLE
    // * PortAttachment#PortAttachment_HYPERBUS_MODE_DISABLE
    //
    //  Flag to indicate if hyperbus configuration is required.
	HyperbusMode *string
    // VIF UUID on NSX Manager. If the attachement type is PARENT, this property is required.
	Id *string
    // Not valid when type field is INDEPENDENT, mainly used to identify traffic from different ports in container use case. format: int64
	TrafficTag *int64
    // Possible values are: 
    //
    // * PortAttachment#PortAttachment_TYPE_PARENT
    // * PortAttachment#PortAttachment_TYPE_CHILD
    // * PortAttachment#PortAttachment_TYPE_INDEPENDENT
    // * PortAttachment#PortAttachment_TYPE_STATIC
    //
    //  Type of port attachment. STATIC is added to replace INDEPENDENT. INDEPENDENT type and PARENT type are deprecated.
	Type_ *string
}
const PortAttachment_ALLOCATE_ADDRESSES_IP_POOL = "IP_POOL"
const PortAttachment_ALLOCATE_ADDRESSES_MAC_POOL = "MAC_POOL"
const PortAttachment_ALLOCATE_ADDRESSES_BOTH = "BOTH"
const PortAttachment_ALLOCATE_ADDRESSES_NONE = "NONE"
const PortAttachment_CONTEXT_TYPE_PARENT = "PARENT"
const PortAttachment_HYPERBUS_MODE_ENABLE = "ENABLE"
const PortAttachment_HYPERBUS_MODE_DISABLE = "DISABLE"
const PortAttachment_TYPE_PARENT = "PARENT"
const PortAttachment_TYPE_CHILD = "CHILD"
const PortAttachment_TYPE_INDEPENDENT = "INDEPENDENT"
const PortAttachment_TYPE_STATIC = "STATIC"

// This entity will be used to establish association between discovery profile and Port. Using this entity, user can specify intent for applying discovery profile to particular Port. Port here is Logical Port.
type PortDiscoveryProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated IP Discovery Profile
	IpDiscoveryProfilePath *string
    // PolicyPath of associated Mac Discovery Profile
	MacDiscoveryProfilePath *string
}

// Paged collection of Port Discovery Profile Binding Maps
type PortDiscoveryProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Port Discovery Profile Binding Map list results
	Results []PortDiscoveryProfileBindingMap
}

// Mirrors Data from source to destination
type PortMirroringProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Data from source group will be copied to members of destination group. Only IPSET group and group with membership criteria VM is supported. IPSET group allows only three ip's.
	DestinationGroup *string
    // Possible values are: 
    //
    // * PortMirroringProfile#PortMirroringProfile_DIRECTION_INGRESS
    // * PortMirroringProfile#PortMirroringProfile_DIRECTION_EGRESS
    // * PortMirroringProfile#PortMirroringProfile_DIRECTION_BIDIRECTIONAL
    //
    //  Port mirroring profile direction
	Direction *string
    // Possible values are: 
    //
    // * PortMirroringProfile#PortMirroringProfile_ENCAPSULATION_TYPE_GRE
    // * PortMirroringProfile#PortMirroringProfile_ENCAPSULATION_TYPE_ERSPAN_TWO
    // * PortMirroringProfile#PortMirroringProfile_ENCAPSULATION_TYPE_ERSPAN_THREE
    //
    //  User can provide Mirror Destination type e.g GRE, ERSPAN_TWO or ERSPAN_THREE.If profile type is REMOTE_L3_SPAN, encapsulation type is used else ignored.
	EncapsulationType *string
    // Used by physical switch for the mirror traffic forwarding. Must be provided and only effective when encapsulation type is ERSPAN type II or type III. format: int32
	ErspanId *int64
    // User-configurable 32-bit key only for GRE format: int32
	GreKey *int64
    // Possible values are: 
    //
    // * PortMirroringProfile#PortMirroringProfile_PROFILE_TYPE_REMOTE_L3_SPAN
    // * PortMirroringProfile#PortMirroringProfile_PROFILE_TYPE_LOGICAL_SPAN
    //
    //  Allows user to select type of port mirroring session.
	ProfileType *string
    // If this property is set, the packet will be truncated to the provided length. If this property is unset, entire packet will be mirrored. format: int32
	SnapLength *int64
}
const PortMirroringProfile_DIRECTION_INGRESS = "INGRESS"
const PortMirroringProfile_DIRECTION_EGRESS = "EGRESS"
const PortMirroringProfile_DIRECTION_BIDIRECTIONAL = "BIDIRECTIONAL"
const PortMirroringProfile_ENCAPSULATION_TYPE_GRE = "GRE"
const PortMirroringProfile_ENCAPSULATION_TYPE_ERSPAN_TWO = "ERSPAN_TWO"
const PortMirroringProfile_ENCAPSULATION_TYPE_ERSPAN_THREE = "ERSPAN_THREE"
const PortMirroringProfile_PROFILE_TYPE_REMOTE_L3_SPAN = "REMOTE_L3_SPAN"
const PortMirroringProfile_PROFILE_TYPE_LOGICAL_SPAN = "LOGICAL_SPAN"

// Paged collection of port mirroring profiles
type PortMirroringProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Port Mirroring Profiles list results
	Results []PortMirroringProfile
}

// This entity will be used to establish association between monitoring profile and Port. Using this entity, user can specify intent for applying monitoring profile to particular Port. Port here is Segment Port.
type PortMonitoringProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated IPFIX L2 Profile
	IpfixL2ProfilePath *string
    // PolicyPath of associated Port Mirroring Profile
	PortMirroringProfilePath *string
}

// Paged collection of Port Monitoring Profile Binding Maps
type PortMonitoringProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Port Monitoring Profile Binding Map list results
	Results []PortMonitoringProfileBindingMap
}

// This entity will be used to establish association between qos profile and Port. Using this entity, you can specify intent for applying qos profile to particular Port. Port here is Segment Port.
type PortQosProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated QoS Profile
	QosProfilePath *string
}

// Paged collection of Port QoS Profile Binding Maps
type PortQosProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Port QoS Profile Binding Map list results
	Results []PortQosProfileBindingMap
}

// Contains the binding relationship between port and security profile.
type PortSecurityProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The policy path of the asscociated Segment Security profile
	SegmentSecurityProfilePath *string
    // The policy path of the asscociated SpoofGuard profile
	SpoofguardProfilePath *string
}

// Paged collection of port security profile binding maps
type PortSecurityProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Port security profile binding map list results
	Results []PortSecurityProfileBindingMap
}

// Network prefix entry
type PrefixEntry struct {
    // Possible values are: 
    //
    // * PrefixEntry#PrefixEntry_ACTION_PERMIT
    // * PrefixEntry#PrefixEntry_ACTION_DENY
    //
    //  Action for the prefix list.
	Action *string
    // Prefix length greater than or equal to. format: int32
	Ge *int64
    // Prefix length less than or equal to. format: int32
	Le *int64
    // Network prefix in CIDR format. \"ANY\" matches all networks.
	Network *string
}
const PrefixEntry_ACTION_PERMIT = "PERMIT"
const PrefixEntry_ACTION_DENY = "DENY"

// A named list of prefixes for routing purposes.
type PrefixList struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Specify ordered list of network prefixes.
	Prefixes []PrefixEntry
}

// Paged collection of PrefixLists
type PrefixListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // PrefixList results
	Results []PrefixList
}

// This entity will be used to establish association between profile and policy entities.
type ProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
}

// Represents a label-value pair.
type PropertyItem struct {
    // If the condition is met then the property will be displayed. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition *string
    // Represents field value of the property.
	Field *string
    // Set to true if the field is a heading. Default is false.
	Heading *bool
    // If a field represents a heading, then label is not needed
	Label *Label
    // Hyperlink of the specified UI page that provides details. This will be linked with value of the property.
	Navigation *string
    // Render configuration to be applied, if any.
	RenderConfiguration []RenderConfiguration
    // If true, separates this property in a widget.
	Separator *bool
    // Possible values are: 
    //
    // * PropertyItem#PropertyItem_TYPE_STRING
    // * PropertyItem#PropertyItem_TYPE_NUMBER
    // * PropertyItem#PropertyItem_TYPE_DATE
    // * PropertyItem#PropertyItem_TYPE_URL
    //
    //  Data type of the field.
	Type_ *string
}
const PropertyItem_TYPE_STRING = "String"
const PropertyItem_TYPE_NUMBER = "Number"
const PropertyItem_TYPE_DATE = "Date"
const PropertyItem_TYPE_URL = "Url"

// A Limiter configuration entry that specifies type and metrics
type QosBaseRateLimiter struct {
	Enabled *bool
    // Possible values are: 
    //
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_INGRESSBROADCASTRATELIMITER
    // * QosBaseRateLimiter#QosBaseRateLimiter_RESOURCE_TYPE_EGRESSRATELIMITER
    //
    //  Type rate limiter
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const QosBaseRateLimiter__TYPE_IDENTIFIER = "QoSBaseRateLimiter"
const QosBaseRateLimiter_RESOURCE_TYPE_INGRESSRATELIMITER = "IngressRateLimiter"
const QosBaseRateLimiter_RESOURCE_TYPE_INGRESSBROADCASTRATELIMITER = "IngressBroadcastRateLimiter"
const QosBaseRateLimiter_RESOURCE_TYPE_EGRESSRATELIMITER = "EgressRateLimiter"

// Dscp value is ignored in case of 'TRUSTED' DscpTrustMode.
type QosDscp struct {
    // Possible values are: 
    //
    // * QosDscp#QosDscp_MODE_TRUSTED
    // * QosDscp#QosDscp_MODE_UNTRUSTED
    //
    //  When you select the Trusted mode the inner header DSCP value is applied to the outer IP header for IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.Untrusted mode is supported on overlay-based and VLAN-based logical port.
	Mode *string
    // Internal Forwarding Priority format: int32
	Priority *int64
}
const QosDscp_MODE_TRUSTED = "TRUSTED"
const QosDscp_MODE_UNTRUSTED = "UNTRUSTED"

type QosProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Class of service groups similar types of traffic in the network and each type of traffic is treated as a class with its own level of service priority. The lower priority traffic is slowed down or in some cases dropped to provide better throughput for higher priority traffic. format: int32
	ClassOfService *int64
	Dscp *QosDscp
    // Array of Rate limiter configurations to applied on Segment or Port.
	ShaperConfigurations []*data.StructValue
}

// Base QoS Profile Binding Map
type QosProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// Paged collection of QoS profiles
type QosProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // QoS profiles list results
	Results []QosProfile
}

type RAConfig struct {
    // The maximum number of hops through which packets can pass before being discarded. format: int64
	HopLimit *int64
    // The time interval in seconds, in which the prefix is advertised as valid. format: int64
	PrefixLifetime *int64
    // The time interval in seconds, in which the prefix is advertised as preferred. format: int64
	PrefixPreferredTime *int64
    // Interval between 2 Router advertisement in seconds. format: int64
	RaInterval *int64
    // Router lifetime value in seconds. A value of 0 indicates the router is not a default router for the receiving end. Any other value in this field specifies the lifetime, in seconds, associated with this router as a default router. format: int64
	RouterLifetime *int64
}

type RaDNSConfig struct {
    // DNS server. format: ipv6
	DnsServer []string
    // Lifetime of DNS server in milliseconds format: int64
	DnsServerLifetime *int64
    // Domain name in RA message.
	DomainName []string
    // Lifetime of Domain names in milliseconds format: int64
	DomainNameLifetime *int64
}

// Reaction represents a programmable entity which encapsulates the events and the actions in response to the events, or simply \"If This Then That\".
type Reaction struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Actions that need to be taken when the events occur. These actions must appear in the order that they need to be taken in. This field can be interpreted as the HOW of the Reaction, or simply as \"Then That\".
	Actions []*data.StructValue
    // Events that provide contextual variables about what the reaction should react to. This field can be interpreted as the WHAT of the Reaction, or simply as \"If This\" Clause.
	Events []Event
}

// Realized Virtual Machine
type RealizedVirtualMachine struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // Alarm info detail
	Alarms []PolicyAlarmResource
    // Desire state paths of this object
	IntentReference []string
    // Realization API of this object on enforcement point
	RealizationApi *string
    // Realization id of this object
	RealizationSpecificIdentifier *string
    // It define the root cause for runtime error.
	RuntimeError *string
    // Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus *string
    // Possible values are: 
    //
    // * RealizedVirtualMachine#RealizedVirtualMachine_STATE_UNAVAILABLE
    // * RealizedVirtualMachine#RealizedVirtualMachine_STATE_UNREALIZED
    // * RealizedVirtualMachine#RealizedVirtualMachine_STATE_REALIZED
    // * RealizedVirtualMachine#RealizedVirtualMachine_STATE_ERROR
    //
    //  Realization state of this object
	State *string
    // List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']
	ComputeIds []string
    // Id of the host on which the vm exists.
	HostId *string
    // Id of the vm unique within the host.
	LocalIdOnHost *string
    // Possible values are: 
    //
    // * RealizedVirtualMachine#RealizedVirtualMachine_POWER_STATE_VM_RUNNING
    // * RealizedVirtualMachine#RealizedVirtualMachine_POWER_STATE_VM_STOPPED
    // * RealizedVirtualMachine#RealizedVirtualMachine_POWER_STATE_VM_SUSPENDED
    // * RealizedVirtualMachine#RealizedVirtualMachine_POWER_STATE_UNKNOWN
    //
    //  Current power state of this virtual machine in the system.
	PowerState *string
}
const RealizedVirtualMachine_STATE_UNAVAILABLE = "UNAVAILABLE"
const RealizedVirtualMachine_STATE_UNREALIZED = "UNREALIZED"
const RealizedVirtualMachine_STATE_REALIZED = "REALIZED"
const RealizedVirtualMachine_STATE_ERROR = "ERROR"
const RealizedVirtualMachine_POWER_STATE_VM_RUNNING = "VM_RUNNING"
const RealizedVirtualMachine_POWER_STATE_VM_STOPPED = "VM_STOPPED"
const RealizedVirtualMachine_POWER_STATE_VM_SUSPENDED = "VM_SUSPENDED"
const RealizedVirtualMachine_POWER_STATE_UNKNOWN = "UNKNOWN"

type RealizedVirtualMachineListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged Collection of VMs
	Results []RealizedVirtualMachine
}

// Ordered list of rules long with the path of PolicyServiceInstance to which the traffic needs to be redirected. | Please note that the scope property must be provided for NS redirection | policy if redirect to is a service chain. For NS, when redirect to is not | to the service chain, and scope is specified on RedirectionPolicy, it | will be ignored. The scope will be determined from redirect to path | instead. For EW policy, scope must not be supplied in the request. | Path to either Tier0 or Tier1 is allowed as the scope. Only 1 path | can be specified as a scope. | Also, note that, if stateful flag is not sent, it will be treated as true. If statelessness is intended, false must be sent explicitly as the value | for stateful field.
type RedirectionPolicy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category *string
    // Comments for security policy lock/unlock.
	Comments *string
    // This field is to indicate the internal sequence number of a policy with respect to the policies across categories. format: int32
	InternalSequenceNumber *int64
    // A flag to indicate whether policy is a default policy.
	IsDefault *bool
    // ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy *string
    // SecurityPolicy locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked *bool
    // The count of rules in the policy. format: int32
	RuleCount *int64
    // Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath *string
    // The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string
    // This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful *bool
    // Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict *bool
    // This is the read only flag which will state the direction of this | redirection policy. True denotes that it is NORTH-SOUTH and false | value means it is an EAST-WEST redirection policy.
	NorthSouth *bool
    // Paths to which traffic will be redirected to. As of now, only 1 is | supported. Paths allowed are | 1. Policy Service Instance | 2. Service Instance Endpoint | 3. Virtual Endpoint | 4. Policy Service Chain
	RedirectTo []string
    // Redirection rules that are a part of this RedirectionPolicy. At max, there can be 1000 rules in a given RedirectPolicy.
	Rules []RedirectionRule
}

// It define redirection rule for service insertion
type RedirectionRule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded *bool
    // Possible values are: 
    //
    // * RedirectionRule#RedirectionRule_DIRECTION_IN
    // * RedirectionRule#RedirectionRule_DIRECTION_OUT
    // * RedirectionRule#RedirectionRule_DIRECTION_IN_OUT
    //
    //  Define direction of traffic.
	Direction *string
    // Flag to disable the rule. Default is enabled.
	Disabled *bool
    // Possible values are: 
    //
    // * RedirectionRule#RedirectionRule_IP_PROTOCOL_IPV4
    // * RedirectionRule#RedirectionRule_IP_PROTOCOL_IPV6
    // * RedirectionRule#RedirectionRule_IP_PROTOCOL_IPV4_IPV6
    //
    //  Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol *string
    // A flag to indicate whether rule is a default rule.
	IsDefault *bool
    // Flag to enable packet logging. Default is disabled.
	Logged *bool
    // Text for additional notes on changes.
	Notes *string
    // Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string
    // This is a unique 4 byte positive number that is assigned by the system. This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on. format: int64
	RuleId *int64
    // The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string
    // This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []*data.StructValue
    // In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded *bool
    // User level field which will be printed in CLI and packet logs.
	Tag *string
    // Possible values are: 
    //
    // * RedirectionRule#RedirectionRule_ACTION_REDIRECT
    // * RedirectionRule#RedirectionRule_ACTION_DO_NOT_REDIRECT
    //
    //  The action to be applied to all the services
	Action *string
}
const RedirectionRule_DIRECTION_IN = "IN"
const RedirectionRule_DIRECTION_OUT = "OUT"
const RedirectionRule_DIRECTION_IN_OUT = "IN_OUT"
const RedirectionRule_IP_PROTOCOL_IPV4 = "IPV4"
const RedirectionRule_IP_PROTOCOL_IPV6 = "IPV6"
const RedirectionRule_IP_PROTOCOL_IPV4_IPV6 = "IPV4_IPV6"
const RedirectionRule_ACTION_REDIRECT = "REDIRECT"
const RedirectionRule_ACTION_DO_NOT_REDIRECT = "DO_NOT_REDIRECT"

// Appliance registration access token
type RegistrationToken struct {
    // List results
	Roles []string
    // Access token
	Token *string
    // User delegated by token
	User *string
}

// Detailed information about a related API error
type RelatedApiError struct {
    // Further details about the error
	Details *string
    // A numeric error code format: int64
	ErrorCode *int64
    // Additional data about the error
	ErrorData *data.StructValue
    // A description of the error
	ErrorMessage *string
    // The module name where the error occurred
	ModuleName *string
}

// Related attribute on the target resource for conditional constraints based on related attribute value. Example - destinationGroups/service/action is related attribute of sourceGroups in communcation entry.
type RelatedAttribute struct {
    // Related attribute name on the target entity.
	Attribute *string
}

// Represents the leaf level type expression to express constraint as value of realted attribute to the target. Example - Constraint traget attribute 'X' (example in Constraint), if destinationGroups contains 'vCeneter' then allow only values \"HTTPS\", \"HTTP\" for attribute X. { \"target\":{ \"target_resource_type\":\"CommunicationEntry\", \"attribute\":\"services\", \"path_prefix\": \"/infra/domains/{{DOMAIN}}/edge-communication-maps/default/communication-entries/\" }, \"constraint_expression\": { \"resource_type\": \"RelatedAttributeConditionalExpression\", \"related_attribute\":{ \"attribute\":\"destinationGroups\" }, \"condition\" : { \"operator\":\"INCLUDES\", \"rhs_value\": [\"/infra/domains/mgw/groups/VCENTER\"], \"value_constraint\": { \"resource_type\": \"ValueConstraintExpression\", \"operator\":\"INCLUDES\", \"values\":[\"/infra/services/HTTP\", \"/infra/services/HTTPS\"] } } } }
type RelatedAttributeConditionalExpression struct {
    // Conditional value expression for target based on realted attribute value.
	Condition *ConditionalValueConstraintExpression
    // Related attribute.
	RelatedAttribute *RelatedAttribute
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_VALUECONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_RELATEDATTRIBUTECONDITIONALEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_ENTITYINSTANCECOUNTCONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_FIELDSANITYCONSTRAINTEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const RelatedAttributeConditionalExpression__TYPE_IDENTIFIER = "RelatedAttributeConditionalExpression"

// Remote file server
type RemoteFileServer struct {
    // Remote server directory to copy bundle files to
	DirectoryPath *string
    // Server port format: int64
	Port *int64
    // Protocol to use to copy file
	Protocol *FileTransferProtocol
    // Remote server hostname or IP address format: hostname-or-ip
	Server *string
}

// Remote server
type RemoteServerFingerprint struct {
    // Server port format: int64
	Port *int64
    // Remote server hostname or IP address format: hostname-or-ip
	Server *string
    // SSH fingerprint of server
	SshFingerprint *string
}

// Remote server
type RemoteServerFingerprintRequest struct {
    // Server port format: int64
	Port *int64
    // Remote server hostname or IP address format: hostname-or-ip
	Server *string
}

// Render configuration to be applied to the widget.
type RenderConfiguration struct {
    // Possible values are: 
    //
    // * RenderConfiguration#RenderConfiguration_COLOR_GREY
    // * RenderConfiguration#RenderConfiguration_COLOR_DARK_GREY
    // * RenderConfiguration#RenderConfiguration_COLOR_LIGHT_GREY
    // * RenderConfiguration#RenderConfiguration_COLOR_SKY_BLUE
    // * RenderConfiguration#RenderConfiguration_COLOR_BLUE
    // * RenderConfiguration#RenderConfiguration_COLOR_GREEN
    // * RenderConfiguration#RenderConfiguration_COLOR_YELLOW
    // * RenderConfiguration#RenderConfiguration_COLOR_RED
    // * RenderConfiguration#RenderConfiguration_COLOR_DARK_RED
    //
    //  The color to use when rendering an entity. For example, set color as 'RED' to render a portion of donut in red.
	Color *string
    // If the condition is met then the rendering specified for the condition will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition *string
    // If specified, overrides the field value. This can be used to display a meaningful value in situations where field value is not available or not configured.
	DisplayValue *string
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Multi-line text to be shown on tooltip while hovering over the UI element if the condition is met.
	Tooltip []Tooltip
}
const RenderConfiguration_COLOR_GREY = "GREY"
const RenderConfiguration_COLOR_DARK_GREY = "DARK_GREY"
const RenderConfiguration_COLOR_LIGHT_GREY = "LIGHT_GREY"
const RenderConfiguration_COLOR_SKY_BLUE = "SKY_BLUE"
const RenderConfiguration_COLOR_BLUE = "BLUE"
const RenderConfiguration_COLOR_GREEN = "GREEN"
const RenderConfiguration_COLOR_YELLOW = "YELLOW"
const RenderConfiguration_COLOR_RED = "RED"
const RenderConfiguration_COLOR_DARK_RED = "DARK_RED"

// Base class for resources
type Resource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
}

// Resource Field Pointer representing the exact value within a policy object.
type ResourceFieldPointer struct {
    // Field Pointer referencing the exact field within the policy object.
	FieldPointer *string
    // Policy Path referencing a policy object. If not supplied, the field pointer will be applied to the event source.
	Path *string
}

// It represents the resource information which could identify resource.
type ResourceInfo struct {
    // It will represent resource identifiers. For example, policy objects will be represented with paths and virtual machine will be represented with external ids.
	ResourceIds []string
    // It will represent resource type on which tag bulk operation to be performed. Supported resource type is VirtualMachine.
	ResourceType *string
}

// Collection of resource info objects
type ResourceInfoListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Resource info list results
	Results []PolicyFineTuningResourceInfo
}

// A link to a related resource
type ResourceLink struct {
    // Optional action
	Action *string
    // Link to resource
	Href *string
    // Custom relation type (follows RFC 5988 where appropriate definitions exist)
	Rel *string
}

// Resource Operation is an Event Source that represents a resource that is being changed at very specific points of time, with regard to its interaction with dao layer.
type ResourceOperation struct {
    // Possible values are: 
    //
    // * ResourceOperation#ResourceOperation_OPERATION_TYPES_POST_CREATE
    // * ResourceOperation#ResourceOperation_OPERATION_TYPES_POST_UPDATE
    // * ResourceOperation#ResourceOperation_OPERATION_TYPES_PRE_DELETE
    //
    //  Operation types.
	OperationTypes []string
    // Regex path representing a regex expression on resources. This regex is used to identify the object(s) that is/are the source of the Event. For instance: specifying \"Lb\* | /infra/tier-0s/vmc/ipsec-vpn-services/default\" as a source means that ANY resource starting with Lb or ANY resource with \"/infra/tier-0s/vmc/ipsec-vpn-services/default\" as path would be the source of the event in question.
	ResourcePointer *string
    // Possible values are: 
    //
    // * Source#Source_RESOURCE_TYPE_RESOURCEOPERATION
    // * Source#Source_RESOURCE_TYPE_APIREQUESTBODY
    //
    //  Event Source resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ResourceOperation__TYPE_IDENTIFIER = "ResourceOperation"
const ResourceOperation_OPERATION_TYPES_POST_CREATE = "POST_CREATE"
const ResourceOperation_OPERATION_TYPES_POST_UPDATE = "POST_UPDATE"
const ResourceOperation_OPERATION_TYPES_PRE_DELETE = "PRE_DELETE"

// A weak reference to an NSX resource.
type ResourceReference struct {
    // Will be set to false if the referenced NSX resource has been deleted.
	IsValid *bool
    // Display name of the NSX resource.
	TargetDisplayName *string
    // Identifier of the NSX resource.
	TargetId *string
    // Type of the NSX resource.
	TargetType *string
}

// It represents tag operation status for a resource and details of the failure if any.
type ResourceTagStatus struct {
    // Details about the error if any
	Details *string
    // Resource display name
	ResourceDisplayName *string
    // Resource id
	ResourceId *string
    // Possible values are: 
    //
    // * ResourceTagStatus#ResourceTagStatus_TAG_STATUS_SUCCESS
    // * ResourceTagStatus#ResourceTagStatus_TAG_STATUS_ERROR
    //
    //  Status of tag apply or remove operation
	TagStatus *string
}
const ResourceTagStatus_TAG_STATUS_SUCCESS = "Success"
const ResourceTagStatus_TAG_STATUS_ERROR = "Error"

// Tag operation status for particular resource type and resource ids.
type ResourceTypeTagStatus struct {
    // List of resources on which tag needs to be applied
	ResourceTagStatus []ResourceTagStatus
    // Resource type
	ResourceType *string
}

// Configuration where backup files are stored for restore
type RestoreConfiguration struct {
    // Passphrase used to encrypt backup files.
	Passphrase *string
    // The server from which backup files will be retrieved for restore.
	RemoteFileServer *RemoteFileServer
}

// Restore step info
type RestoreStep struct {
    // Restore step description
	Description *string
	Status *PerStepRestoreStatus
    // Restore step number format: int64
	StepNumber *int64
    // Restore step value
	Value *string
}

// A base class for types that track revisions
type RevisionedResource struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
}

// Role
type Role struct {
    // Short identifier for the role. Must be all lower case with no spaces.
	Role *string
    // A short, human-friendly display name of the role.
	RoleDisplayName *string
}

// User/Group's role binding
type RoleBinding struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The ID of the external identity source that holds the referenced external entity. Currently, only external LDAP servers are allowed.
	IdentitySourceId *string
    // Possible values are: 
    //
    // * RoleBinding#RoleBinding_IDENTITY_SOURCE_TYPE_VIDM
    // * RoleBinding#RoleBinding_IDENTITY_SOURCE_TYPE_LDAP
    //
    //  Identity source type
	IdentitySourceType *string
    // User/Group's name
	Name *string
    // Roles
	Roles []Role
    // Possible values are: 
    //
    // * RoleBinding#RoleBinding_STALE_TRUE
    // * RoleBinding#RoleBinding_STALE_FALSE
    // * RoleBinding#RoleBinding_STALE_UNKNOWN
    //
    //  Property 'stale' can be considered to have these values - absent - This type of rolebinding does not support stale property TRUE - Rolebinding is stale in vIDM meaning the user is no longer present in vIDM FALSE - Rolebinding is available in vIDM UNKNOWN - Rolebinding's state of staleness in unknown Once rolebindings become stale, they can be deleted using the API POST /aaa/role-bindings?action=delete_stale_bindings
	Stale *string
    // Possible values are: 
    //
    // * RoleBinding#RoleBinding_TYPE_REMOTE_USER
    // * RoleBinding#RoleBinding_TYPE_REMOTE_GROUP
    // * RoleBinding#RoleBinding_TYPE_LOCAL_USER
    // * RoleBinding#RoleBinding_TYPE_PRINCIPAL_IDENTITY
    //
    //  Type
	Type_ *string
}
const RoleBinding_IDENTITY_SOURCE_TYPE_VIDM = "VIDM"
const RoleBinding_IDENTITY_SOURCE_TYPE_LDAP = "LDAP"
const RoleBinding_STALE_TRUE = "TRUE"
const RoleBinding_STALE_FALSE = "FALSE"
const RoleBinding_STALE_UNKNOWN = "UNKNOWN"
const RoleBinding_TYPE_REMOTE_USER = "remote_user"
const RoleBinding_TYPE_REMOTE_GROUP = "remote_group"
const RoleBinding_TYPE_LOCAL_USER = "local_user"
const RoleBinding_TYPE_PRINCIPAL_IDENTITY = "principal_identity"

type RoleBindingListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List results
	Results []RoleBinding
}

type RoleListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List results
	Results []Role
}

// Role
type RoleWithFeatures struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Features
	Features []FeaturePermission
    // Short identifier for the role. Must be all lower case with no spaces.
	Role *string
}

type RoleWithFeaturesListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List results
	Results []RoleWithFeatures
}

// Route advertisement rules and filtering
type RouteAdvertisementRule struct {
    // Possible values are: 
    //
    // * RouteAdvertisementRule#RouteAdvertisementRule_ACTION_PERMIT
    // * RouteAdvertisementRule#RouteAdvertisementRule_ACTION_DENY
    //
    //  Action to advertise filtered routes to the connected Tier0 gateway. PERMIT: Enables the advertisment DENY: Disables the advertisement
	Action *string
    // Display name should be unique.
	Name *string
    // Possible values are: 
    //
    // * RouteAdvertisementRule#RouteAdvertisementRule_PREFIX_OPERATOR_GE
    // * RouteAdvertisementRule#RouteAdvertisementRule_PREFIX_OPERATOR_EQ
    //
    //  Prefix operator to filter subnets. GE prefix operator filters all the routes with prefix length greater than or equal to the subnets configured. EQ prefix operator filter all the routes with prefix length equal to the subnets configured.
	PrefixOperator *string
    // Possible values are: 
    //
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_STATIC_ROUTES
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_CONNECTED
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_NAT
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_LB_VIP
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_LB_SNAT
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_DNS_FORWARDER_IP
    // * RouteAdvertisementRule#RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_IPSEC_LOCAL_ENDPOINT
    //
    //  Enable different types of route advertisements. When not specified, routes to IPSec VPN local-endpoint subnets (TIER1_IPSEC_LOCAL_ENDPOINT) are automatically advertised.
	RouteAdvertisementTypes []string
    // Network CIDRs to be routed. format: ip-cidr-block
	Subnets []string
}
const RouteAdvertisementRule_ACTION_PERMIT = "PERMIT"
const RouteAdvertisementRule_ACTION_DENY = "DENY"
const RouteAdvertisementRule_PREFIX_OPERATOR_GE = "GE"
const RouteAdvertisementRule_PREFIX_OPERATOR_EQ = "EQ"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_STATIC_ROUTES = "TIER1_STATIC_ROUTES"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_CONNECTED = "TIER1_CONNECTED"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_NAT = "TIER1_NAT"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_LB_VIP = "TIER1_LB_VIP"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_LB_SNAT = "TIER1_LB_SNAT"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_DNS_FORWARDER_IP = "TIER1_DNS_FORWARDER_IP"
const RouteAdvertisementRule_ROUTE_ADVERTISEMENT_TYPES_IPSEC_LOCAL_ENDPOINT = "TIER1_IPSEC_LOCAL_ENDPOINT"

// List of routes to be aggregated
type RouteAggregationEntry struct {
    // CIDR of aggregate address format: ip-cidr-block
	Prefix *string
    // Send only summarized route. Summarization reduces number of routes advertised by representing multiple related routes with prefix property.
	SummaryOnly *bool
}

// A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to remote site.
type RouteBasedIPSecVpnSession struct {
    // If true the default firewall rule Action is set to DROP, otherwise set to ALLOW. This filed is deprecated and recommended to change Rule action filed. Note that this filed is not synchornied with default rule field.
	ForceWhitelisting *bool
    // IP Tunnel interfaces.
	TunnelInterfaces []IPSecVpnTunnelInterface
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_RESOURCE_TYPE_POLICYBASEDIPSECVPNSESSION
    // * IPSecVpnSession#IPSecVpnSession_RESOURCE_TYPE_ROUTEBASEDIPSECVPNSESSION
    //
    //  A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to remote site.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_AUTHENTICATION_MODE_PSK
    // * IPSecVpnSession#IPSecVpnSession_AUTHENTICATION_MODE_CERTIFICATE
    //
    //  Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a certificate defined at the global level is to be used for authentication.
	AuthenticationMode *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_CNSA
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_128
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_SUITE_B_GCM_256
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_PRIME
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_FOUNDATION
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_FIPS
    // * IPSecVpnSession#IPSecVpnSession_COMPLIANCE_SUITE_NONE
    //
    //  Compliance suite.
	ComplianceSuite *string
    // Possible values are: 
    //
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_INITIATOR
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_RESPOND_ONLY
    // * IPSecVpnSession#IPSecVpnSession_CONNECTION_INITIATION_MODE_ON_DEMAND
    //
    //  Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.
	ConnectionInitiationMode *string
    // Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
	DpdProfilePath *string
    // Enable/Disable IPSec VPN session.
	Enabled *bool
    // Policy path referencing IKE profile to be used. Default is set according to system default profile.
	IkeProfilePath *string
    // Policy path referencing Local endpoint.
	LocalEndpointPath *string
    // Public IPV4 address of the remote device terminating the VPN connection.
	PeerAddress *string
    // Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
	PeerId *string
    // IPSec Pre-shared key. Maximum length of this field is 128 characters.
	Psk *string
    // TCP Maximum Segment Size Clamping Direction and Value.
	TcpMssClamping *TcpMaximumSegmentSizeClamping
    // Policy path referencing Tunnel profile to be used. Default is set to system default profile.
	TunnelProfilePath *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const RouteBasedIPSecVpnSession__TYPE_IDENTIFIER = "RouteBasedIPSecVpnSession"

// A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
type RouteBasedL3VpnSession struct {
    // Indicates if logging should be enabled for the default whitelisting rule for the VTI interface.
	DefaultRuleLogging *bool
    // The default firewall rule Action is set to DROP if true otherwise set to ALLOW.
	ForceWhitelisting *bool
    // This is a deprecated field. Any specified value is not saved and will be ignored.
	RoutingConfigPath *string
    // Virtual tunnel interface (VTI) port IP subnets to be used to configure route-based L3Vpn session. A max of one tunnel subnet is allowed.
	TunnelSubnets []TunnelSubnet
    // Possible values are: 
    //
    // * L3VpnSession#L3VpnSession_RESOURCE_TYPE_POLICYBASEDL3VPNSESSION
    // * L3VpnSession#L3VpnSession_RESOURCE_TYPE_ROUTEBASEDL3VPNSESSION
    //
    //  - A Policy Based L3Vpn is a configuration in which protect rules to match local and remote subnet needs to be defined. Tunnel is established for each pair of local and remote subnet defined in protect rules. - A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet (commonly known as VTI) is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const RouteBasedL3VpnSession__TYPE_IDENTIFIER = "RouteBasedL3VpnSession"

// BGP route details.
type RouteDetails struct {
    // BGP AS path attribute.
	AsPath *string
    // BGP Local Preference attribute. format: int64
	LocalPref *int64
    // BGP Multi Exit Discriminator attribute. format: int64
	Med *int64
    // CIDR network address. format: ip-cidr-block
	Network *string
    // Next hop IP address. format: ip
	NextHop *string
    // BGP Weight attribute. format: int64
	Weight *int64
}

// Route map entry
type RouteMapEntry struct {
    // Possible values are: 
    //
    // * RouteMapEntry#RouteMapEntry_ACTION_PERMIT
    // * RouteMapEntry#RouteMapEntry_ACTION_DENY
    //
    //  Action for the route map entry
	Action *string
    // Community list match criteria for route map. Properties community_list_matches and prefix_list_matches are mutually exclusive and cannot be used in the same route map entry.
	CommunityListMatches []CommunityMatchCriteria
    // Prefix list match criteria for route map. Properties community_list_matches and prefix_list_matches are mutually exclusive and cannot be used in the same route map entry.
	PrefixListMatches []string
    // Set criteria for route map entry
	Set *RouteMapEntrySet
}
const RouteMapEntry_ACTION_PERMIT = "PERMIT"
const RouteMapEntry_ACTION_DENY = "DENY"

// Set criteria for route map entry
type RouteMapEntrySet struct {
    // AS path prepend to influence route selection.
	AsPathPrepend *string
    // Set BGP regular or large community for matching routes. A maximum of one value for each community type separated by space. Well-known community name, community value in aa:nn (2byte:2byte) format for regular community and community value in aa:bb:nn (4byte:4byte:4byte) format for large community are supported.
	Community *string
    // Local preference indicates the degree of preference for one BGP route over other BGP routes. The path with highest local preference is preferred. format: int64
	LocalPreference *int64
    // Multi exit descriminator (MED) is a hint to BGP neighbors about the preferred path into an autonomous system (AS) that has multiple entry points. A lower MED value is preferred over a higher value. format: int32
	Med *int64
    // For incoming and import route_maps on receiving both v6 global and v6 link-local address for the route, prefer to use the global address as the next hop. By default, it prefers the link-local next hop.
	PreferGlobalV6NextHop *bool
    // Weight is used to select a route when multiple routes are available to the same network. Route with the highest weight is preferred. format: int32
	Weight *int64
}

// Next hop configuration for network
type RouterNexthop struct {
    // Cost associated with next hop route format: int32
	AdminDistance *int64
    // Next hop gateway IP address format: ip
	IpAddress *string
    // Interface path associated with current route. For example: specify a policy path referencing the IPSec VPN Session.
	Scope []string
}

// BGP routes per transport node.
type RoutesPerTransportNode struct {
    // Array of BGP neighbor route details for this transport node.
	Routes []RouteDetails
    // BGP neighbor source address. format: ip
	SourceAddress *string
    // Transport node id
	TransportNodeId *string
}

// Routing table entry.
type RoutingEntry struct {
    // Admin distance. format: int32
	AdminDistance *int64
    // The policy path of the interface which is used as the next hop
	_Interface *string
    // Logical router component(Service Router/Distributed Router) id
	LrComponentId *string
    // Logical router component(Service Router/Distributed Router) type
	LrComponentType *string
    // Network CIDR.
	Network *string
    // Next hop address. format: ip
	NextHop *string
    // Network address CIDR.
	RouteType *string
}

// Routing table.
type RoutingTable struct {
    // Entry count. format: int32
	Count *int64
    // Transport node ID.
	EdgeNode *string
    // Route entries.
	RouteEntries []RoutingEntry
}

type RoutingTableListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Paged Collection of Routes per transport node ID.
	Results []RoutingTable
}

// Root of the api result set for forming rows.
type RowListField struct {
    //
	Alias *string
    // JSON path to the root of the api result set for forming rows.
	Path *string
}

// A rule indicates the action to be performed for various types of traffic flowing between workload groups.
type Rule struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded *bool
    // Possible values are: 
    //
    // * Rule#Rule_DIRECTION_IN
    // * Rule#Rule_DIRECTION_OUT
    // * Rule#Rule_DIRECTION_IN_OUT
    //
    //  Define direction of traffic.
	Direction *string
    // Flag to disable the rule. Default is enabled.
	Disabled *bool
    // Possible values are: 
    //
    // * Rule#Rule_IP_PROTOCOL_IPV4
    // * Rule#Rule_IP_PROTOCOL_IPV6
    // * Rule#Rule_IP_PROTOCOL_IPV4_IPV6
    //
    //  Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol *string
    // A flag to indicate whether rule is a default rule.
	IsDefault *bool
    // Flag to enable packet logging. Default is disabled.
	Logged *bool
    // Text for additional notes on changes.
	Notes *string
    // Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string
    // This is a unique 4 byte positive number that is assigned by the system. This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on. format: int64
	RuleId *int64
    // The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string
    // This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []*data.StructValue
    // In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string
    // We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string
    // If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded *bool
    // User level field which will be printed in CLI and packet logs.
	Tag *string
    // Possible values are: 
    //
    // * Rule#Rule_ACTION_ALLOW
    // * Rule#Rule_ACTION_DROP
    // * Rule#Rule_ACTION_REJECT
    //
    //  The action to be applied to all the services
	Action *string
}
const Rule_DIRECTION_IN = "IN"
const Rule_DIRECTION_OUT = "OUT"
const Rule_DIRECTION_IN_OUT = "IN_OUT"
const Rule_IP_PROTOCOL_IPV4 = "IPV4"
const Rule_IP_PROTOCOL_IPV6 = "IPV6"
const Rule_IP_PROTOCOL_IPV4_IPV6 = "IPV4_IPV6"
const Rule_ACTION_ALLOW = "ALLOW"
const Rule_ACTION_DROP = "DROP"
const Rule_ACTION_REJECT = "REJECT"

// Paged Collection of Rules
type RuleListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Rule list results
	Results []Rule
}

type RuleStatistics struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Aggregated number of bytes processed by the rule. format: int64
	ByteCount *int64
    // Aggregated number of hits received by the rule. format: int64
	HitCount *int64
    // Realized id of the rule on NSX MP. Policy Manager can create more than one rule per policy rule, in which case this identifier helps to distinguish between the multple rules created.
	InternalRuleId *string
    // Path of the LR on which the section is applied in case of Edge FW.
	LrPath *string
    // Maximum value of popularity index of all rules of the type. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API. format: int64
	MaxPopularityIndex *int64
    // Maximum value of sessions count of all rules of the type. This is aggregated statistic which are computed with lower frequency compared to generic rule statistics. It may have a computation delay up to 15 minutes in response to this API. format: int64
	MaxSessionCount *int64
    // Aggregated number of packets processed by the rule. format: int64
	PacketCount *int64
    // This is calculated by sessions count divided by age of the rule. format: int64
	PopularityIndex *int64
    // Path of the rule.
	Rule *string
    // Aggregated number of sessions processed by the rule. format: int64
	SessionCount *int64
    // Aggregated number of sessions processed by all the rules This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API. format: int64
	TotalSessionCount *int64
}

// Rule statistics for a specfic enforcement point.
type RuleStatisticsForEnforcementPoint struct {
    // Rule statistics for a single enforcement point
	EnforcementPoint *string
    // Statistics for the specified enforcement point
	Statistics *RuleStatistics
}

// Paged Collection of rule statistics
type RuleStatisticsListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // RuleStatistics list results
	Results []RuleStatisticsForEnforcementPoint
}

// Search response
type SearchResponse struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List of records matching the search query.
	Results []*data.StructValue
}

// Ordered list of Rules.
type SecurityPolicy struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category *string
    // Comments for security policy lock/unlock.
	Comments *string
    // This field is to indicate the internal sequence number of a policy with respect to the policies across categories. format: int32
	InternalSequenceNumber *int64
    // A flag to indicate whether policy is a default policy.
	IsDefault *bool
    // ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy *string
    // SecurityPolicy locked/unlocked time in epoch milliseconds. format: int64
	LockModifiedTime *int64
    // Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked *bool
    // The count of rules in the policy. format: int32
	RuleCount *int64
    // Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath *string
    // The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string
    // This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number format: int32
	SequenceNumber *int64
    // Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful *bool
    // Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict *bool
    // Possible values are: 
    //
    // * SecurityPolicy#SecurityPolicy_CONNECTIVITY_STRATEGY_WHITELIST
    // * SecurityPolicy#SecurityPolicy_CONNECTIVITY_STRATEGY_BLACKLIST
    // * SecurityPolicy#SecurityPolicy_CONNECTIVITY_STRATEGY_WHITELIST_ENABLE_LOGGING
    // * SecurityPolicy#SecurityPolicy_CONNECTIVITY_STRATEGY_BLACKLIST_ENABLE_LOGGING
    // * SecurityPolicy#SecurityPolicy_CONNECTIVITY_STRATEGY_NONE
    //
    //  This field indicates the default connectivity policy for the security policy. Based on the connectivitiy strategy, a default rule for this security policy will be created. An appropriate action will be set on the rule based on the value of the connectivity strategy. If NONE is selected or no connectivity strategy is specified, then no default rule for the security policy gets created. The default rule that gets created will be a any-any rule and applied to entities specified in the scope of the security policy. Specifying the connectivity_strategy without specifying the scope is not allowed. The scope has to be a Group and one cannot specify IPAddress directly in the group that is used as scope. This default rule is only applicable for the Layer3 security policies. WHITELIST - Adds a default drop rule. Administrator can then use \"allow\" rules (aka whitelist) to allow traffic between groups BLACKLIST - Adds a default allow rule. Admin can then use \"drop\" rules (aka blacklist) to block traffic between groups WHITELIST_ENABLE_LOGGING - Whitelising with logging enabled BLACKLIST_ENABLE_LOGGING - Blacklisting with logging enabled NONE - No default rule is created.
	ConnectivityStrategy *string
    // Based on the value of the connectivity strategy, a default rule is created for the security policy. The rule id is internally assigned by the system for this default rule. format: int64
	DefaultRuleId *int64
    // Rules that are a part of this SecurityPolicy
	Rules []Rule
}
const SecurityPolicy_CONNECTIVITY_STRATEGY_WHITELIST = "WHITELIST"
const SecurityPolicy_CONNECTIVITY_STRATEGY_BLACKLIST = "BLACKLIST"
const SecurityPolicy_CONNECTIVITY_STRATEGY_WHITELIST_ENABLE_LOGGING = "WHITELIST_ENABLE_LOGGING"
const SecurityPolicy_CONNECTIVITY_STRATEGY_BLACKLIST_ENABLE_LOGGING = "BLACKLIST_ENABLE_LOGGING"
const SecurityPolicy_CONNECTIVITY_STRATEGY_NONE = "NONE"

// Paged Collection of security policies
type SecurityPolicyListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // SecurityPolicy list results
	Results []SecurityPolicy
}

// Aggregate statistics of all the rules in a security policy.
type SecurityPolicyStatistics struct {
    // Realized id of the section on NSX MP. Policy Manager can create more than one section per SecurityPolicy, in which case this identifier helps to distinguish between the multiple sections created.
	InternalSectionId *string
    // Path of the LR on which the section is applied in case of Gateway Firewall.
	LrPath *string
    // Total count for rule statistics format: int64
	ResultCount *int64
    // List of rule statistics.
	Results []RuleStatistics
}

// Aggregate statistics of all the rules in a security policy for a specific enforcement point.
type SecurityPolicyStatisticsForEnforcementPoint struct {
    // Enforcement point to fetch the statistics from.
	EnforcementPoint *string
    // Statistics for the specified enforcement point
	Statistics *SecurityPolicyStatistics
}

// Paged Collection of Security Policy statistics
type SecurityPolicyStatisticsListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Security Policy statistics list results
	Results []SecurityPolicyStatisticsForEnforcementPoint
}

// Base security profile binding map
type SecurityProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}

// Segment configuration to attach workloads.
type Segment struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Static address binding used for the Segment.
	AddressBindings []PortAddressBindingEntry
    // Possible values are: 
    //
    // * Segment#Segment_ADMIN_STATE_UP
    // * Segment#Segment_ADMIN_STATE_DOWN
    //
    //  Represents Desired state of the Segment
	AdminState *string
    // Advanced configuration for Segment.
	AdvancedConfig *SegmentAdvancedConfig
    // Multiple distinct L2 bridge profiles can be configured.
	BridgeProfiles []BridgeProfileConfig
    // Policy path to the connecting Tier-0 or Tier-1. Valid only for segments created under Infra.
	ConnectivityPath *string
    // Policy path to DHCP server or relay configuration to use for all IPv4 & IPv6 subnets configured on this segment.
	DhcpConfigPath *string
    // DNS domain name
	DomainName *string
    // This property could be used for vendor specific configuration in key value string pairs, the setting in extra_configs will be automatically inheritted by segment ports in the Segment.
	ExtraConfigs []SegmentExtraConfig
    // Additional config for federation.
	FederationConfig *FederationConnectivityConfig
    // Configuration for extending Segment through L2 VPN
	L2Extension *L2Extension
    // This property is deprecated. The property will continue to work as expected for existing segments. The segments that are newly created with ls_id will be ignored. Sepcify pre-creted logical switch id for Segment.
	LsId *string
    // Mac pool id that associated with a Segment.
	MacPoolId *string
    // Policy path to metadata proxy configuration. Multiple distinct MD proxies can be configured.
	MetadataProxyPaths []string
    // Used for overlay connectivity of segments. The overlay_id should be allocated from the pool as definied by enforcement-point. If not provided, it is auto-allocated from the default pool on the enforcement-point. format: int32
	OverlayId *int64
    // Possible values are: 
    //
    // * Segment#Segment_REPLICATION_MODE_MTEP
    // * Segment#Segment_REPLICATION_MODE_SOURCE
    //
    //  If this field is not set for overlay segment, then the default of MTEP will be used.
	ReplicationMode *string
    // Subnet configuration. Max 1 subnet
	Subnets []SegmentSubnet
    // Policy path to the transport zone. Supported for VLAN backed segments as well as Overlay Segments. This field is required for VLAN backed Segments. Auto assigned if only one transport zone exists in the enforcement point. Default transport zone is auto assigned for overlay segments if none specified.
	TransportZonePath *string
    // Possible values are: 
    //
    // * Segment#Segment_TYPE_ROUTED
    // * Segment#Segment_TYPE_EXTENDED
    // * Segment#Segment_TYPE_ROUTED_AND_EXTENDED
    // * Segment#Segment_TYPE_DISCONNECTED
    //
    //  Segment type based on configuration.
	Type_ *string
    // VLAN ids for a VLAN backed Segment. Can be a VLAN id or a range of VLAN ids specified with '-' in between.
	VlanIds []string
}
const Segment_ADMIN_STATE_UP = "UP"
const Segment_ADMIN_STATE_DOWN = "DOWN"
const Segment_REPLICATION_MODE_MTEP = "MTEP"
const Segment_REPLICATION_MODE_SOURCE = "SOURCE"
const Segment_TYPE_ROUTED = "ROUTED"
const Segment_TYPE_EXTENDED = "EXTENDED"
const Segment_TYPE_ROUTED_AND_EXTENDED = "ROUTED_AND_EXTENDED"
const Segment_TYPE_DISCONNECTED = "DISCONNECTED"

// Advanced configuration for Segment
type SegmentAdvancedConfig struct {
    // Possible values are: 
    //
    // * SegmentAdvancedConfig#SegmentAdvancedConfig_CONNECTIVITY_ON
    // * SegmentAdvancedConfig#SegmentAdvancedConfig_CONNECTIVITY_OFF
    //
    //  Connectivity configuration to manually connect (ON) or disconnect (OFF) a logical entity from network topology. Only valid for Tier1 Segment.
	Connectivity *string
    // Policy path to IP address pools.
	AddressPoolPaths []string
    // When set to true, all the ports created on this segment will behave in a hybrid fashion. The hybrid port indicates to NSX that the VM intends to operate in underlay mode, but retains the ability to forward egress traffic to the NSX overlay network. This property is only applicable for segment created with transport zone type OVERLAY_STANDARD. This property cannot be modified after segment is created.
	Hybrid *bool
    // This property is used to enable proximity routing with local egress. When set to true, logical router interface (downlink) connecting Segment to Tier0/Tier1 gateway is configured with prefix-length 32.
	LocalEgress *bool
    // An ordered list of routing policies to forward traffic to the next hop.
	LocalEgressRoutingPolicies []LocalEgressRoutingEntry
    // Enable multicast for a segment. Only applicable for segments connected to Tier0 gateway.
	Multicast *bool
    // The name of the switching uplink teaming policy for the Segment. This name corresponds to one of the switching uplink teaming policy names listed in TransportZone associated with the Segment. See transport_zone_path property above for more details. When this property is not specified, the segment will not have a teaming policy associated with it and the host switch's default teaming policy will be used by MP.
	UplinkTeamingPolicyName *string
}
const SegmentAdvancedConfig_CONNECTIVITY_ON = "ON"
const SegmentAdvancedConfig_CONNECTIVITY_OFF = "OFF"

// Segment state on specific Enforcement Point.
type SegmentConfigurationState struct {
    // Array of configuration state of various sub systems
	Details []ConfigurationStateElement
    // Error code format: int64
	FailureCode *int64
    // Error message in case of failure
	FailureMessage *string
    // Possible values are: 
    //
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_PENDING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_IN_PROGRESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_SUCCESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_PARTIAL_SUCCESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_ORPHANED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_UNKNOWN
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_ERROR
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_IN_SYNC
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_NOT_AVAILABLE
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_DEPLOYMENT_QUEUED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_DEPLOYMENT_IN_PROGRESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_DEPLOYMENT_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_POWER_ON_IN_PROGRESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_POWER_ON_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_REGISTRATION_PENDING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_NODE_NOT_READY
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_NODE_READY
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_POWER_OFF_IN_PROGRESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_POWER_OFF_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_UNDEPLOY_IN_PROGRESS
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_UNDEPLOY_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_UNDEPLOY_SUCCESSFUL
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_EDGE_CONFIG_ERROR
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_DEPLOYMENT_RESTARTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_REGISTRATION_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_TRANSPORT_NODE_SYNC_PENDING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_EDGE_HARDWARE_NOT_SUPPORTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_NO_PNIC_PREPARED_IN_EDGE
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_APPLIANCE_INTERNAL_ERROR
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VTEP_DHCP_NOT_SUPPORTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_NO_PNIC_SPECIFIED_IN_TN
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_INVALID_PNIC_DEVICE_NAME
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_TRANSPORT_NODE_READY
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_NETWORK_EDIT_PENDING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_MPA_DISCONNECTED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_RENAME_PENDING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_CONFIG_EDIT_PENDING
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_NETWORK_EDIT_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_RENAME_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_CONFIG_EDIT_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_CONFIG_DISCREPANCY
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_NODE_REFRESH_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_VM_PLACEMENT_REFRESH_FAILED
    // * SegmentConfigurationState#SegmentConfigurationState_STATE_REGISTRATION_TIMEDOUT
    //
    //  Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State *string
    // Segment path
	SegmentPath *string
}
const SegmentConfigurationState_STATE_PENDING = "pending"
const SegmentConfigurationState_STATE_IN_PROGRESS = "in_progress"
const SegmentConfigurationState_STATE_SUCCESS = "success"
const SegmentConfigurationState_STATE_FAILED = "failed"
const SegmentConfigurationState_STATE_PARTIAL_SUCCESS = "partial_success"
const SegmentConfigurationState_STATE_ORPHANED = "orphaned"
const SegmentConfigurationState_STATE_UNKNOWN = "unknown"
const SegmentConfigurationState_STATE_ERROR = "error"
const SegmentConfigurationState_STATE_IN_SYNC = "in_sync"
const SegmentConfigurationState_STATE_NOT_AVAILABLE = "NOT_AVAILABLE"
const SegmentConfigurationState_STATE_VM_DEPLOYMENT_QUEUED = "VM_DEPLOYMENT_QUEUED"
const SegmentConfigurationState_STATE_VM_DEPLOYMENT_IN_PROGRESS = "VM_DEPLOYMENT_IN_PROGRESS"
const SegmentConfigurationState_STATE_VM_DEPLOYMENT_FAILED = "VM_DEPLOYMENT_FAILED"
const SegmentConfigurationState_STATE_VM_POWER_ON_IN_PROGRESS = "VM_POWER_ON_IN_PROGRESS"
const SegmentConfigurationState_STATE_VM_POWER_ON_FAILED = "VM_POWER_ON_FAILED"
const SegmentConfigurationState_STATE_REGISTRATION_PENDING = "REGISTRATION_PENDING"
const SegmentConfigurationState_STATE_NODE_NOT_READY = "NODE_NOT_READY"
const SegmentConfigurationState_STATE_NODE_READY = "NODE_READY"
const SegmentConfigurationState_STATE_VM_POWER_OFF_IN_PROGRESS = "VM_POWER_OFF_IN_PROGRESS"
const SegmentConfigurationState_STATE_VM_POWER_OFF_FAILED = "VM_POWER_OFF_FAILED"
const SegmentConfigurationState_STATE_VM_UNDEPLOY_IN_PROGRESS = "VM_UNDEPLOY_IN_PROGRESS"
const SegmentConfigurationState_STATE_VM_UNDEPLOY_FAILED = "VM_UNDEPLOY_FAILED"
const SegmentConfigurationState_STATE_VM_UNDEPLOY_SUCCESSFUL = "VM_UNDEPLOY_SUCCESSFUL"
const SegmentConfigurationState_STATE_EDGE_CONFIG_ERROR = "EDGE_CONFIG_ERROR"
const SegmentConfigurationState_STATE_VM_DEPLOYMENT_RESTARTED = "VM_DEPLOYMENT_RESTARTED"
const SegmentConfigurationState_STATE_REGISTRATION_FAILED = "REGISTRATION_FAILED"
const SegmentConfigurationState_STATE_TRANSPORT_NODE_SYNC_PENDING = "TRANSPORT_NODE_SYNC_PENDING"
const SegmentConfigurationState_STATE_TRANSPORT_NODE_CONFIGURATION_MISSING = "TRANSPORT_NODE_CONFIGURATION_MISSING"
const SegmentConfigurationState_STATE_EDGE_HARDWARE_NOT_SUPPORTED = "EDGE_HARDWARE_NOT_SUPPORTED"
const SegmentConfigurationState_STATE_MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED = "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED"
const SegmentConfigurationState_STATE_TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER = "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER"
const SegmentConfigurationState_STATE_TZ_ENDPOINTS_NOT_SPECIFIED = "TZ_ENDPOINTS_NOT_SPECIFIED"
const SegmentConfigurationState_STATE_NO_PNIC_PREPARED_IN_EDGE = "NO_PNIC_PREPARED_IN_EDGE"
const SegmentConfigurationState_STATE_APPLIANCE_INTERNAL_ERROR = "APPLIANCE_INTERNAL_ERROR"
const SegmentConfigurationState_STATE_VTEP_DHCP_NOT_SUPPORTED = "VTEP_DHCP_NOT_SUPPORTED"
const SegmentConfigurationState_STATE_UNSUPPORTED_HOST_SWITCH_PROFILE = "UNSUPPORTED_HOST_SWITCH_PROFILE"
const SegmentConfigurationState_STATE_UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED = "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED"
const SegmentConfigurationState_STATE_HOSTSWITCH_PROFILE_NOT_FOUND = "HOSTSWITCH_PROFILE_NOT_FOUND"
const SegmentConfigurationState_STATE_LLDP_SEND_ENABLED_NOT_SUPPORTED = "LLDP_SEND_ENABLED_NOT_SUPPORTED"
const SegmentConfigurationState_STATE_UNSUPPORTED_NAMED_TEAMING_POLICY = "UNSUPPORTED_NAMED_TEAMING_POLICY"
const SegmentConfigurationState_STATE_LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM = "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM"
const SegmentConfigurationState_STATE_LACP_NOT_SUPPORTED_FOR_EDGE_VM = "LACP_NOT_SUPPORTED_FOR_EDGE_VM"
const SegmentConfigurationState_STATE_STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM = "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM"
const SegmentConfigurationState_STATE_MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE = "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE"
const SegmentConfigurationState_STATE_UNSUPPORTED_LACP_LB_ALGO_FOR_NODE = "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE"
const SegmentConfigurationState_STATE_EDGE_NODE_VERSION_NOT_SUPPORTED = "EDGE_NODE_VERSION_NOT_SUPPORTED"
const SegmentConfigurationState_STATE_NO_PNIC_SPECIFIED_IN_TN = "NO_PNIC_SPECIFIED_IN_TN"
const SegmentConfigurationState_STATE_INVALID_PNIC_DEVICE_NAME = "INVALID_PNIC_DEVICE_NAME"
const SegmentConfigurationState_STATE_TRANSPORT_NODE_READY = "TRANSPORT_NODE_READY"
const SegmentConfigurationState_STATE_VM_NETWORK_EDIT_PENDING = "VM_NETWORK_EDIT_PENDING"
const SegmentConfigurationState_STATE_UNSUPPORTED_DEFAULT_TEAMING_POLICY = "UNSUPPORTED_DEFAULT_TEAMING_POLICY"
const SegmentConfigurationState_STATE_MPA_DISCONNECTED = "MPA_DISCONNECTED"
const SegmentConfigurationState_STATE_VM_RENAME_PENDING = "VM_RENAME_PENDING"
const SegmentConfigurationState_STATE_VM_CONFIG_EDIT_PENDING = "VM_CONFIG_EDIT_PENDING"
const SegmentConfigurationState_STATE_VM_NETWORK_EDIT_FAILED = "VM_NETWORK_EDIT_FAILED"
const SegmentConfigurationState_STATE_VM_RENAME_FAILED = "VM_RENAME_FAILED"
const SegmentConfigurationState_STATE_VM_CONFIG_EDIT_FAILED = "VM_CONFIG_EDIT_FAILED"
const SegmentConfigurationState_STATE_VM_CONFIG_DISCREPANCY = "VM_CONFIG_DISCREPANCY"
const SegmentConfigurationState_STATE_VM_NODE_REFRESH_FAILED = "VM_NODE_REFRESH_FAILED"
const SegmentConfigurationState_STATE_VM_PLACEMENT_REFRESH_FAILED = "VM_PLACEMENT_REFRESH_FAILED"
const SegmentConfigurationState_STATE_REGISTRATION_TIMEDOUT = "REGISTRATION_TIMEDOUT"

// DHCP IPv4 and IPv6 configurations are extended from this abstract class.
type SegmentDhcpConfig struct {
    // IP address of DNS servers for subnet. DNS server IP address must belong to the same address family as segment gateway_address property. format: ip
	DnsServers []string
    // DHCP lease time in seconds. When specified, this property overwrites lease time configured DHCP server config. format: int64
	LeaseTime *int64
    // Possible values are: 
    //
    // * SegmentDhcpConfig#SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV4CONFIG
    // * SegmentDhcpConfig#SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV6CONFIG
	ResourceType string
    // IP address of the DHCP server in CIDR format. The server_address is mandatory in case this segment has provided a dhcp_config_path and it represents a DHCP server config. If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must be an IPv4 address. If this is a SegmentDhcpV6Config, the address must be an IPv6 address. This address must not overlap the ip-ranges of the subnet, or the gateway address of the subnet, or the DHCP static-binding addresses of this segment. format: ip-cidr-block
	ServerAddress *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const SegmentDhcpConfig__TYPE_IDENTIFIER = "SegmentDhcpConfig"
const SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV4CONFIG = "SegmentDhcpV4Config"
const SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV6CONFIG = "SegmentDhcpV6Config"

// DHCP configuration of IPv4 subnet in a segment
type SegmentDhcpV4Config struct {
    // IPv4 DHCP options for segment subnet.
	Options *DhcpV4Options
    // IP address of DNS servers for subnet. DNS server IP address must belong to the same address family as segment gateway_address property. format: ip
	DnsServers []string
    // DHCP lease time in seconds. When specified, this property overwrites lease time configured DHCP server config. format: int64
	LeaseTime *int64
    // Possible values are: 
    //
    // * SegmentDhcpConfig#SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV4CONFIG
    // * SegmentDhcpConfig#SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV6CONFIG
	ResourceType string
    // IP address of the DHCP server in CIDR format. The server_address is mandatory in case this segment has provided a dhcp_config_path and it represents a DHCP server config. If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must be an IPv4 address. If this is a SegmentDhcpV6Config, the address must be an IPv6 address. This address must not overlap the ip-ranges of the subnet, or the gateway address of the subnet, or the DHCP static-binding addresses of this segment. format: ip-cidr-block
	ServerAddress *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const SegmentDhcpV4Config__TYPE_IDENTIFIER = "SegmentDhcpV4Config"

// DHCP configuration of IPv6 subnet in a segment
type SegmentDhcpV6Config struct {
    // Domain names for subnet.
	DomainNames []string
    // Excluded addresses to define dynamic ip allocation ranges. format: address-or-block-or-range
	ExcludedRanges []string
    // IPv6 DHCP options based on the address family of the subnet.
	Options *DhcpV6Options
    // The length of time that a valid address is preferred. When the preferred lifetime expires, the address becomes deprecated. format: int64
	PreferredTime *int64
    // IPv6 address of SNTP servers for subnet. format: ipv6
	SntpServers []string
    // IP address of DNS servers for subnet. DNS server IP address must belong to the same address family as segment gateway_address property. format: ip
	DnsServers []string
    // DHCP lease time in seconds. When specified, this property overwrites lease time configured DHCP server config. format: int64
	LeaseTime *int64
    // Possible values are: 
    //
    // * SegmentDhcpConfig#SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV4CONFIG
    // * SegmentDhcpConfig#SegmentDhcpConfig_RESOURCE_TYPE_SEGMENTDHCPV6CONFIG
	ResourceType string
    // IP address of the DHCP server in CIDR format. The server_address is mandatory in case this segment has provided a dhcp_config_path and it represents a DHCP server config. If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must be an IPv4 address. If this is a SegmentDhcpV6Config, the address must be an IPv6 address. This address must not overlap the ip-ranges of the subnet, or the gateway address of the subnet, or the DHCP static-binding addresses of this segment. format: ip-cidr-block
	ServerAddress *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const SegmentDhcpV6Config__TYPE_IDENTIFIER = "SegmentDhcpV6Config"

// This entity will be used to establish association between discovery profile and Segment. Using this entity, user can specify intent for applying discovery profile to particular segments.
type SegmentDiscoveryProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated IP Discovery Profile
	IpDiscoveryProfilePath *string
    // PolicyPath of associated Mac Discovery Profile
	MacDiscoveryProfilePath *string
}

// Paged collection of Segment Discovery Profile Binding Maps
type SegmentDiscoveryProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Segment Discovery Profile Binding Map list results
	Results []SegmentDiscoveryProfileBindingMap
}

// Segment extra config is intended for supporting vendor specific configuration on the data path, it can be set as key value string pairs on either segment or segment port.
type SegmentExtraConfig struct {
    // Key value pair in string for the configuration
	ConfigPair *KeyValuePair
}

// Paged collection of Segments
type SegmentListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Segment list results
	Results []Segment
}

// This entity will be used to establish association between monitoring profile and Segment. Using this entity, you can specify intent for applying monitoring profile to particular segment.
type SegmentMonitoringProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated IPFIX L2 Profile
	IpfixL2ProfilePath *string
    // PolicyPath of associated Port Mirroring Profile
	PortMirroringProfilePath *string
}

// Paged collection of Segment Monitoring Profile Binding Maps
type SegmentMonitoringProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Segment Monitoring Profile Binding Map list results
	Results []SegmentMonitoringProfileBindingMap
}

// Policy port will create LogicalPort on LogicalSwitch corresponding to the Segment. Address bindings cannot be removed after realization.
type SegmentPort struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Static address binding used for the port.
	AddressBindings []PortAddressBindingEntry
    // Possible values are: 
    //
    // * SegmentPort#SegmentPort_ADMIN_STATE_UP
    // * SegmentPort#SegmentPort_ADMIN_STATE_DOWN
    //
    //  Represents desired state of the segment port
	AdminState *string
    // Only VIF attachment is supported
	Attachment *PortAttachment
    // This property could be used for vendor specific configuration in key value string pairs. Segment port setting will override segment setting if the same key was set on both segment and segment port.
	ExtraConfigs []SegmentExtraConfig
    // IP Discovery module uses various mechanisms to discover address bindings being used on each segment port. If a user would like to ignore any specific discovered address bindings or prevent the discovery of a particular set of discovered bindings, then those address bindings can be provided here. Currently IP range in CIDR format is not supported.
	IgnoredAddressBindings []PortAddressBindingEntry
    // Possible values are: 
    //
    // * SegmentPort#SegmentPort_INIT_STATE_VLAN
    //
    //  Set initial state when a new logical port is created. 'UNBLOCKED_VLAN' means new port will be unblocked on traffic in creation, also VLAN will be set with corresponding logical switch setting. This port setting can only be configured at port creation, and cannot be modified.
	InitState *string
    // This field will refer to the source site on which the segment port is discovered. This field is populated by GM, when it receives corresponding notification from LM.
	SourceSiteId *string
}
const SegmentPort_ADMIN_STATE_UP = "UP"
const SegmentPort_ADMIN_STATE_DOWN = "DOWN"
const SegmentPort_INIT_STATE_VLAN = "UNBLOCKED_VLAN"

// List SegmentPort objects
type SegmentPortListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Place holder for the list result
	Results []SegmentPort
}

// Segment port statistics on specific Enforcement Point.
type SegmentPortStatistics struct {
	RxBytes *DataCounter
	RxPackets *DataCounter
	TxBytes *DataCounter
	TxPackets *DataCounter
	DroppedBySecurityPackets *PacketsDroppedBySecurity
	MacLearning *MacLearningCounters
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
    // The id of the logical port
	LogicalPortId *string
}

// This entity will be used to establish association between qos profile and Segment. Using this entity, you can specify intent for applying qos profile to particular segment.
type SegmentQosProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated QoS Profile
	QosProfilePath *string
}

// Paged collection of Segment QoS Profile Binding Maps
type SegmentQosProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Segment QoS Profile Binding Map list results
	Results []SegmentQosProfileBindingMap
}

// Security features extended by policy operations for securing logical segments.
type SegmentSecurityProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering. List of allowed MACs - 01:80:c2:00:00:00, 01:80:c2:00:00:01, 01:80:c2:00:00:02, 01:80:c2:00:00:03, 01:80:c2:00:00:04, 01:80:c2:00:00:05, 01:80:c2:00:00:06, 01:80:c2:00:00:07, 01:80:c2:00:00:08, 01:80:c2:00:00:09, 01:80:c2:00:00:0a, 01:80:c2:00:00:0b, 01:80:c2:00:00:0c, 01:80:c2:00:00:0d, 01:80:c2:00:00:0e, 01:80:c2:00:00:0f, 00:e0:2b:00:00:00, 00:e0:2b:00:00:04, 00:e0:2b:00:00:06, 01:00:0c:00:00:00, 01:00:0c:cc:cc:cc, 01:00:0c:cc:cc:cd, 01:00:0c:cd:cd:cd, 01:00:0c:cc:cc:c0, 01:00:0c:cc:cc:c1, 01:00:0c:cc:cc:c2, 01:00:0c:cc:cc:c3, 01:00:0c:cc:cc:c4, 01:00:0c:cc:cc:c5, 01:00:0c:cc:cc:c6, 01:00:0c:cc:cc:c7 format: mac-address
	BpduFilterAllow []string
    // Indicates whether BPDU filter is enabled. BPDU filtering is enabled by default.
	BpduFilterEnable *bool
    // Filters DHCP server and/or client traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpClientBlockEnabled *bool
    // Filters DHCP server and/or client IPv6 traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpClientBlockV6Enabled *bool
    // Filters DHCP server and/or client traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpServerBlockEnabled *bool
    // Filters DHCP server and/or client IPv6 traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpServerBlockV6Enabled *bool
    // A flag to block all traffic except IP/(G)ARP/BPDU.
	NonIpTrafficBlockEnabled *bool
    // Enable or disable Router Advertisement Guard.
	RaGuardEnabled *bool
    // Allows configuration of rate limits for broadcast and multicast traffic. Rate limiting is disabled by default
	RateLimits *TrafficRateLimits
    // Enable or disable Rate Limits
	RateLimitsEnabled *bool
}

// Contains the binding relationship between segment and security profile.
type SegmentSecurityProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The policy path of the asscociated Segment Security profile
	SegmentSecurityProfilePath *string
    // The policy path of the asscociated SpoofGuard profile
	SpoofguardProfilePath *string
}

// Paged collection of segment security profile binding maps
type SegmentSecurityProfileBindingMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Segment security profile binding map list results
	Results []SegmentSecurityProfileBindingMap
}

// Paged collection of segment security profiles
type SegmentSecurityProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Segment Security profile list results
	Results []SegmentSecurityProfile
}

// Segment statistics on specific Enforcement Point.
type SegmentStatistics struct {
	RxBytes *DataCounter
	RxPackets *DataCounter
	TxBytes *DataCounter
	TxPackets *DataCounter
	DroppedBySecurityPackets *PacketsDroppedBySecurity
	MacLearning *MacLearningCounters
    // Timestamp when the data was last updated; unset if data source has never updated the data. format: int64
	LastUpdateTimestamp *int64
    // The id of the logical Switch
	LogicalSwitchId *string
}

// Subnet configuration for segment
type SegmentSubnet struct {
    // Additional DHCP configuration for current subnet.
	DhcpConfig *data.StructValue
    // DHCP address ranges are used for dynamic IP allocation. Supports address range and CIDR formats. First valid host address from the first value is assigned to DHCP server IP address. Existing values cannot be deleted or modified, but additional DHCP ranges can be added. format: address-or-block-or-range
	DhcpRanges []string
    // Gateway IP address in CIDR format for both IPv4 and IPv6. format: ip-cidr-block
	GatewayAddress *string
    // Network CIDR for this subnet calculated from gateway_addresses and prefix_len.
	Network *string
}

// Resources to take action on
type SelectableResourceReference struct {
    // Will be set to false if the referenced NSX resource has been deleted.
	IsValid *bool
    // Display name of the NSX resource.
	TargetDisplayName *string
    // Identifier of the NSX resource.
	TargetId *string
    // Type of the NSX resource.
	TargetType *string
    // Set to true if this resource has been selected to be acted upon
	Selected *bool
}

// The server will populate this field when returing the resource. Ignored on PUT and POST.
type SelfResourceLink struct {
    // Optional action
	Action *string
    // Link to resource
	Href *string
    // Custom relation type (follows RFC 5988 where appropriate definitions exist)
	Rel *string
}

// Used while defining a CommunicationEntry. A service may have multiple service entries.
type Service struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // The flag, if true, indicates that service is created in the system by default. Such default services can't be modified/deleted.
	IsDefault *bool
    // Service type
	ServiceEntries []*data.StructValue
    // Type of service, EITHER or NON_ETHER
	ServiceType *string
}

// A Service entry that describes traffic
type ServiceEntry struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY
    // * ServiceEntry#ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ServiceEntry__TYPE_IDENTIFIER = "ServiceEntry"
const ServiceEntry_RESOURCE_TYPE_IPPROTOCOLSERVICEENTRY = "IPProtocolServiceEntry"
const ServiceEntry_RESOURCE_TYPE_IGMPTYPESERVICEENTRY = "IGMPTypeServiceEntry"
const ServiceEntry_RESOURCE_TYPE_ICMPTYPESERVICEENTRY = "ICMPTypeServiceEntry"
const ServiceEntry_RESOURCE_TYPE_ALGTYPESERVICEENTRY = "ALGTypeServiceEntry"
const ServiceEntry_RESOURCE_TYPE_L4PORTSETSERVICEENTRY = "L4PortSetServiceEntry"
const ServiceEntry_RESOURCE_TYPE_ETHERTYPESERVICEENTRY = "EtherTypeServiceEntry"
const ServiceEntry_RESOURCE_TYPE_NESTEDSERVICESERVICEENTRY = "NestedServiceServiceEntry"

// Paged Collection of Service entries
type ServiceEntryListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Service entry list results
	Results []*data.StructValue
}

// A ServiceInstanceEndpoint belongs to one ByodPolicyServiceInstance and is attached to one ServiceInterface. A ServiceInstanceEndpoint represents a redirection target for a RedirectionPolicy.
type ServiceInstanceEndpoint struct {
    // Path of Service Interface to which this ServiceInstanceEndpoint is connected.
	ServiceInterfacePath *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * BaseEndpoint#BaseEndpoint_RESOURCE_TYPE_VIRTUALENDPOINT
    // * BaseEndpoint#BaseEndpoint_RESOURCE_TYPE_SERVICEINSTANCEENDPOINT
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IPs where either inbound or outbound traffic is to be redirected.
	TargetIps []IPInfo
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ServiceInstanceEndpoint__TYPE_IDENTIFIER = "ServiceInstanceEndpoint"

// Service interface configuration for internal connectivity.
type ServiceInterface struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet
}

// Paged collection of Service Interfaces
type ServiceInterfaceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Service Interface list results
	Results []ServiceInterface
}

// Paged Collection of Services
type ServiceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Service list results
	Results []Service
}

// An anchor object representing the intent to consume a given 3rd party service.
type ServiceReference struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // A Service's operational state can be enabled or disabled. Note that would work only for NetX type of services and would not work for Guest Introsp- ection type of Services. TRUE - The Service should be enabled FALSE - The Service should be disabled
	Enabled *bool
    // Unique name of Partner Service to be consumed for redirection.
	PartnerServiceName *string
}

// Service Segment configuration to attach Service Insertion VM.
type ServiceSegment struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Policy paths of logical routers or ports | to which this Service Segment can be connected.
	LrPaths []string
    // Policy path to transport zone. Only overlay transport zone is supported.
	TransportZonePath *string
}

// Paged Collection of session timer profile binding maps
type SessionTimerProfileBindingListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Session timer profile binding maps list results
	Results []SessionTimerProfileBindingMap
}

// This entity will be used to establish association between Session Timer profile and Logical Routers.
type SessionTimerProfileBindingMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // PolicyPath of associated Profile
	ProfilePath *string
}

// Set Fields is an action to set fields of the source event.
type SetFields struct {
    // Field Settings.
	FieldSettings []FieldSetting
    // Possible values are: 
    //
    // * Action#Action_RESOURCE_TYPE_PATCHRESOURCES
    // * Action#Action_RESOURCE_TYPE_SETFIELDS
    //
    //  Reaction Action resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const SetFields__TYPE_IDENTIFIER = "SetFields"

// Site represents an NSX deployment having its own set of NSX clusters and transport nodes. It may correspond to a Data Center, VMC deployment, or NSX-Cloud deployment managed via CSM.
type Site struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Both the local site and the remote site must have edge clusters correctly configured and remote tunnel endpoint (RTEP) interfaces must be defined, or onboarding will fail.
	FailIfRtepMisconfigured *bool
    // Fail onboarding if maximum RTT exceeded.
	FailIfRttExceeded *bool
    // System managed federation config.
	FederationConfig *GmFederationSiteConfig
    // If provided and fail_if_rtt_exceeded is true, onboarding of the site will fail if measured RTT is greater than this value. format: int64
	MaximumRtt *int64
    // To onboard a site, the connection information (username, password, and API thumbprint) for at least one NSX manager node in the remote site must be provided. Once the site has been successfully onboarded, the site_connection_info is discarded and authentication to the remote site occurs using an X.509 client certificate.
	SiteConnectionInfo []SiteNodeConnectionInfo
    // 12-bit system generated site number format: int64
	SiteNumber *int64
}

// Index for cross site allocation for edge cluster and its members referred by gateway.
type SiteAllocationIndexForEdge struct {
    // Unqiue edge cluster node index across sites based on stretch of the Gateway. For example, if a Gateway is streched to sites S1 with one edge cluster of 3 nodes and site S2 with one edge cluster of 2 nodes, the in the Global Manager will allocate the index for 5 edge nodes and 2 cluster in the rage 0 to 7. format: int64
	Index *int64
    // Edge cluster or edge node path
	TargetResourcePath *string
}

// Site fedeation configuration.
type SiteFederationConfig struct {
    // Remote tunnel endpoint IP addresses format: ip
	RtepIps []string
    // Site UUID
	SiteId *string
    // Unique site index allocated (from range 0-4095) format: int64
	SiteIndex *int64
    // Site path
	SitePath *string
}

// Paged Collection of Sites.
type SiteListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Site list result.
	Results []Site
}

// Credential info to connect to a node in the federated remote site.
type SiteNodeConnectionInfo struct {
    // Please specify the fqdn of the Management Node of your site.
	Fqdn *string
    // Password to connect to Site's Local Manager.
	Password *string
    // Thumbprint of Site's Local Manager in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint *string
    // Username to connect to Site's Local Manager.
	Username *string
}

// Source that is logically deemed to be the \"object\" upon which the Event in question initially occurred upon. The Source is responsible for providing information of the occurred event. Some example sources include: - Resource. - API.
type Source struct {
    // Possible values are: 
    //
    // * Source#Source_RESOURCE_TYPE_RESOURCEOPERATION
    // * Source#Source_RESOURCE_TYPE_APIREQUESTBODY
    //
    //  Event Source resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const Source__TYPE_IDENTIFIER = "Source"
const Source_RESOURCE_TYPE_RESOURCEOPERATION = "ResourceOperation"
const Source_RESOURCE_TYPE_APIREQUESTBODY = "ApiRequestBody"

// Source Field Evaluation represents an evaluation on resource fields. A source field evaluation will be evaluated against an Event Source which is of type Resource Operation. For instance, the attribute constraint could be related to the necessity that one of the source fields equals one of the specified values.
type SourceFieldEvaluation struct {
    // Expected values necessary to apply the specified operation on the source field value.
	Expected []string
    // Field in the form of a pointer, describing the location of the attribute within the source of the event.
	FieldPointer *string
    // Possible values are: 
    //
    // * SourceFieldEvaluation#SourceFieldEvaluation_OPERATOR_EQ
    // * SourceFieldEvaluation#SourceFieldEvaluation_OPERATOR_NOT_EQ
    //
    //  Logical operator.
	Operator *string
    // Possible values are: 
    //
    // * Evaluation#Evaluation_RESOURCE_TYPE_SOURCEFIELDEVALUATION
    //
    //  Criterion Evaluation resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const SourceFieldEvaluation__TYPE_IDENTIFIER = "SourceFieldEvaluation"
const SourceFieldEvaluation_OPERATOR_EQ = "EQ"
const SourceFieldEvaluation_OPERATOR_NOT_EQ = "NOT_EQ"

// Represents the strech information for a federated entity available only on local manager.
type Span struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of SpanSiteInfos representing the strech of the entity.
	Sites []SpanSiteInfo
    // Represents Policy resource type streached entity's span leader.
	SpanLeader *string
    // Represents Policy resource path of streached entity.
	SpanResource *string
    // Policy resource type of the streached entity.
	SpanResourceType *string
}

// Represents the Site resource information for a Span entity including both the internal id as well as the site path.
type SpanSiteInfo struct {
    // Site UUID representing the Site resource
	SiteId *string
    // Path of the Site resource
	SitePath *string
}

// SpoofGuard is a tool that is designed to prevent virtual machines in your environment from sending traffic with IP addresses which are not authorized to send traffic from. A SpoofGuard policy profile once enabled blocks the traffic determined to be spoofed.
type SpoofGuardProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If true, enable the SpoofGuard, which only allows VM sending traffic with the IPs in the whitelist.
	AddressBindingWhitelist *bool
}

// Paged collection of SpoofGuard profiles
type SpoofGuardProfileListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // SpoofGuard profile list results
	Results []SpoofGuardProfile
}

type SslTrustObjectData struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Key algorithm contained in this certificate
	KeyAlgo *string
    // Password for private key encryption
	Passphrase *string
    // pem encoded certificate data
	PemEncoded *string
    // private key data
	PrivateKey *string
}

// Idfw configuration for enable/disable idfw on standalone hosts.
type StandaloneHostIdfwConfiguration struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If set to true, Idfw is enabled for standalone hosts
	IdfwEnabled *bool
}

// Displayed as a single number. It can be used to show the characteristics of entities such as Logical Switches, Firewall Rules, and so on. For example, number of logical switches and their admin states.
type StatItem struct {
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget.
	DrilldownId *string
    // Multi-line text to be shown on tooltip while hovering over the stat.
	Tooltip []Tooltip
    // If expression for total is specified, it evaluates it. Total can be omitted if not needed to be shown.
	Total *string
    // Expression for stat to be displayed.
	Value *string
}

// Contains Static ARP configuration for Segment.
type StaticARPConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IP Address format: ip
	IpAddress *string
    // MAC Address format: mac-address
	MacAddress *string
}

// Static filters
type StaticFilter struct {
    // display name to be shown in the drop down for static filter.
	DisplayName *string
    // Value of static filter inside dropdown filter.
	Value *string
}

// Static Route Bidirectional Forwarding Detection Peer
type StaticRouteBfdPeer struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Bfd Profile is not supported for IPv6 networks.
	BfdProfilePath *string
    // Flag to enable BFD peer.
	Enabled *bool
    // Only IPv4 addresses are supported. Only a single BFD config per peer address is allowed.
	PeerAddress *string
    // Represents the array of policy paths of locale services where this BFD peer should get relalized on. The locale service service and this BFD peer must belong to the same router. Default scope is empty.
	Scope []string
    // Array of Tier0 external interface IP addresses. BFD peering is established from all these source addresses to the neighbor specified in peer_address. Only IPv4 addresses are supported.
	SourceAddresses []string
}

// Paged collection of StaticRouteBfdPeer.
type StaticRouteBfdPeerListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // StaticRouteBfdPeer list results.
	Results []StaticRouteBfdPeer
}

// Static routes configuration on Tier-0 or Tier-1.
type StaticRoutes struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // When false or by default northbound routes are configure only on primary site and not on secondary. When true, static route will be pushed to secondary even if its locale operation mode is secondary.
	EnabledOnSecondary *bool
    // Specify network address in CIDR format. format: address-or-block-or-range
	Network *string
    // Specify next hop routes for network.
	NextHops []RouterNexthop
}

// Paged collection of Static Routes
type StaticRoutesListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Static Routes list results
	Results []StaticRoutes
}

// Represents configuration of a statistic for an entity. Example, number of logical switches and their admin states.
type StatsConfiguration struct {
    // Displayed at the sections, by default. It labels the entities of sections. If label is not provided, the sections are not labelled.
	Label *Label
    // Hyperlink of the specified UI page that provides details.
	Navigation *string
    // Sections
	Sections []DonutSection
    // Expression that fetches statistic. It can be used to show the characteristics of entities such as Logical Switches, Firewall Rules, and so on. For example, number of logical switches and their admin states. If stat is not provided, then it will not be displayed.
	Stat *StatItem
    // Possible values are: 
    //
    // * StatsConfiguration#StatsConfiguration_SUB_TYPE_COMPACT
    //
    //  A sub-type of StatsConfiguration. If sub-type is not specified the parent type is rendered. The COMPACT sub_type, conserves the space for the widget. The statistic is placed on the right side on top of the status bar and the title of the widget is placed on the left side on the top of the status bar. The COMPACT style aligns itself horizontally as per the width of the container. If multiple widgets are placed insided the container then the widgets are placed one below the other to conserve the space.
	SubType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const StatsConfiguration__TYPE_IDENTIFIER = "StatsConfiguration"
const StatsConfiguration_SUB_TYPE_COMPACT = "COMPACT"

// Arbitrary key-value pairs that may be attached to an entity
type Tag struct {
    // Tag searches may optionally be restricted by scope
	Scope *string
    // Identifier meaningful to user with maximum length of 256 characters
	Tag *string
}

// Tag and resource information on which tag to be applied or removed.
type TagBulkOperation struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // List of resources on which tag needs to be applied
	ApplyTo []ResourceInfo
    // List of resources from which tag needs to be removed
	RemoveFrom []ResourceInfo
    // Tag
	Tag *Tag
}

// Status of tag bulk operation
type TagBulkOperationStatus struct {
    // Tag apply operation status per resource type.
	ApplyTo []ResourceTypeTagStatus
    // Intent path corresponding to tag operation
	Path *string
    // Tag remove operation status per resource type
	RemoveFrom []ResourceTypeTagStatus
    // Possible values are: 
    //
    // * TagBulkOperationStatus#TagBulkOperationStatus_STATUS_SUCCESS
    // * TagBulkOperationStatus#TagBulkOperationStatus_STATUS_RUNNING
    // * TagBulkOperationStatus#TagBulkOperationStatus_STATUS_ERROR
    // * TagBulkOperationStatus#TagBulkOperationStatus_STATUS_PENDING
    //
    //  Overall status
	Status *string
    // Tag
	Tag *Tag
}
const TagBulkOperationStatus_STATUS_SUCCESS = "Success"
const TagBulkOperationStatus_STATUS_RUNNING = "Running"
const TagBulkOperationStatus_STATUS_ERROR = "Error"
const TagBulkOperationStatus_STATUS_PENDING = "Pending"

// Information about arbitrary key-value pairs that may be attached to an entity
type TagInfo struct {
    // Tag searches may optionally be restricted by scope
	Scope *string
    // Identifier meaningful to user with maximum length of 256 characters
	Tag *string
    // Number of objects with assigned with matching scope and tag values format: int32
	TaggedObjectsCount *int64
}

// Paged Collection of Tags
type TagInfoListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tag info list results
	Results []TagInfo
}

type TcpHeader struct {
    // Destination port of tcp header format: int64
	DstPort *int64
    // Source port of tcp header format: int64
	SrcPort *int64
    // TCP flags (9bits) format: int64
	TcpFlags *int64
}

// TCP MSS Clamping Direction and Value.
type TcpMaximumSegmentSizeClamping struct {
    // Possible values are: 
    //
    // * TcpMaximumSegmentSizeClamping#TcpMaximumSegmentSizeClamping_DIRECTION_NONE
    // * TcpMaximumSegmentSizeClamping#TcpMaximumSegmentSizeClamping_DIRECTION_INBOUND_CONNECTION
    // * TcpMaximumSegmentSizeClamping#TcpMaximumSegmentSizeClamping_DIRECTION_OUTBOUND_CONNECTION
    // * TcpMaximumSegmentSizeClamping#TcpMaximumSegmentSizeClamping_DIRECTION_BOTH
    //
    //  Specifies the traffic direction for which to apply MSS Clamping.
	Direction *string
    // MSS defines the maximum amount of data that a host is willing to accept in a single TCP segment. This field is set in TCP header during connection establishment. To avoid packet fragmentation, you can set this field depending on uplink MTU and VPN overhead. This is an optional field and in case it is left unconfigured, best possible MSS value will be calculated based on effective mtu of uplink interface. Supported MSS range is 216 to 8960. format: int64
	MaxSegmentSize *int64
}
const TcpMaximumSegmentSizeClamping_DIRECTION_NONE = "NONE"
const TcpMaximumSegmentSizeClamping_DIRECTION_INBOUND_CONNECTION = "INBOUND_CONNECTION"
const TcpMaximumSegmentSizeClamping_DIRECTION_OUTBOUND_CONNECTION = "OUTBOUND_CONNECTION"
const TcpMaximumSegmentSizeClamping_DIRECTION_BOTH = "BOTH"

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over TCP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type TcpPolicyLbMonitorProfile struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const TcpPolicyLbMonitorProfile__TYPE_IDENTIFIER = "TcpPolicyLbMonitorProfile"

// Virtual server acts as a facade to an application, receives all client connections over TCP and distributes them among the backend servers.
type TcpPolicyLbVirtualServer struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled *bool
    // Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath *string
	TrafficSource *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const TcpPolicyLbVirtualServer__TYPE_IDENTIFIER = "TcpPolicyLbVirtualServer"

// Tier-0 configuration for external connectivity.
type Tier0 struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Indicates if logging should be enabled for the default whitelisting rule. This filed is deprecated and recommended to change Rule logging filed. Note that this filed is not synchornied with default logging field.
	DefaultRuleLogging *bool
    // DHCP configuration for Segments connected to Tier-0. DHCP service is configured in relay mode.
	DhcpConfigPaths []string
    // Disable or enable gateway fiewall.
	DisableFirewall *bool
    // Possible values are: 
    //
    // * Tier0#Tier0_FAILOVER_MODE_PREEMPTIVE
    // * Tier0#Tier0_FAILOVER_MODE_NON_PREEMPTIVE
    //
    //  Determines the behavior when a Tier-0 instance in ACTIVE-STANDBY high-availability mode restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property is not used when the ha_mode property is set to ACTIVE_ACTIVE. Only applicable when edge cluster is configured in Tier0 locale-service.
	FailoverMode *string
    // Additional config for federation.
	FederationConfig *FederationGatewayConfig
    // This filed is deprecated and recommended to change Rule action filed. Note that this filed is not synchornied with default rule field.
	ForceWhitelisting *bool
    // Possible values are: 
    //
    // * Tier0#Tier0_HA_MODE_ACTIVE
    // * Tier0#Tier0_HA_MODE_STANDBY
    //
    //  Specify high-availability mode for Tier-0. Default is ACTIVE_ACTIVE. When ha_mode is changed from ACTIVE_ACTIVE to ACTIVE_STANDBY, inter SR iBGP (in BGP) is disabled. Changing ha_mode from ACTIVE_STANDBY to ACTIVE_ACTIVE will enable inter SR iBGP (in BGP) and previously configured preferred edge nodes (in Tier0 locale-service) are removed.
	HaMode *string
    // Specify subnets that are used to assign addresses to logical links connecting service routers and distributed routers. Only IPv4 addresses are supported. When not specified, subnet 169.254.0.0/24 is assigned by default in ACTIVE_ACTIVE HA mode or 169.254.0.0/28 in ACTIVE_STANDBY mode. format: ip-cidr-block
	InternalTransitSubnets []string
    // Inter site routing configuration when the gateway is streched.
	IntersiteConfig *IntersiteGatewayConfig
    // IPv6 NDRA and DAD profiles configuration on Tier0. Either or both NDRA and/or DAD profiles can be configured.
	Ipv6ProfilePaths []string
    // If you are using EVPN service, then route distinguisher administrator address should be defined if you need auto generation of route distinguisher on your VRF configuration. format: ip
	RdAdminField *string
    // Specify transit subnets that are used to assign addresses to logical links connecting tier-0 and tier-1s. Both IPv4 and IPv6 addresses are supported. When not specified, subnet 100.64.0.0/16 is configured by default. format: ip-cidr-block
	TransitSubnets []string
    // VRF config, required for VRF Tier0.
	VrfConfig *Tier0VrfConfig
}
const Tier0_FAILOVER_MODE_PREEMPTIVE = "PREEMPTIVE"
const Tier0_FAILOVER_MODE_NON_PREEMPTIVE = "NON_PREEMPTIVE"
const Tier0_HA_MODE_ACTIVE = "ACTIVE_ACTIVE"
const Tier0_HA_MODE_STANDBY = "ACTIVE_STANDBY"

// Binding of Tier-0 to the enforcement point.
type Tier0DeploymentMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Path of enforcement point on which Tier-0 shall be deployed.
	EnforcementPoint *string
}

// Paged collection of Tier-0 Deployment Map.
type Tier0DeploymentMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tier-0 Deployment Maps.
	Results []Tier0DeploymentMap
}

// Tier0 gateway state
type Tier0GatewayState struct {
    // String Path of the enforcement point. When not specified, routes from all enforcement-points are returned.
	EnforcementPointPath *string
    // IPv6 DAD status for interfaces configured on Tier0
	Ipv6Status []IPv6Status
    // Detailed realized state information for Tier0
	Tier0State *LogicalRouterState
    // Detailed realized status information for Tier0
	Tier0Status *LogicalRouterStatus
}

// Tier0 HA VIP Config
type Tier0HaVipConfig struct {
    // Flag to enable this HA VIP config.
	Enabled *bool
    // Policy paths to Tier0 external interfaces which are to be paired to provide redundancy. Floating IP will be owned by one of these interfaces depending upon which edge node is Active.
	ExternalInterfacePaths []string
    // Array of IP address subnets which will be used as floating IP addresses.
	VipSubnets []InterfaceSubnet
}

// Tier-0 interface configuration for external connectivity.
type Tier0Interface struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet
    // Vlan id. format: int64
	AccessVlanId *int64
    // Specify association of interface with edge cluster member. This property is deprecated, use edge_path instead. When both properties are specifed, only edge_path property is used. format: int32
	EdgeClusterMemberIndex *int64
    // Policy path to edge node to handle external connectivity. Required when interface type is EXTERNAL.
	EdgePath *string
    // Configuration IPv6 NDRA profile. Only one NDRA profile can be configured.
	Ipv6ProfilePaths []string
    // Specify logical switch to which tier-0 interface is connected for external access. This property is deprecated, use segment_path instead. Both properties cannot be used together.
	LsId *string
    // Maximum transmission unit (MTU) specifies the size of the largest packet that a network protocol can transmit. format: int32
	Mtu *int64
    // Multicast PIM configuration.
	Multicast *Tier0InterfacePimConfig
    // Specify Segment to which this interface is connected to. Either segment_path or ls_id property is required.
	SegmentPath *string
    // Possible values are: 
    //
    // * Tier0Interface#Tier0Interface_TYPE_EXTERNAL
    // * Tier0Interface#Tier0Interface_TYPE_SERVICE
    // * Tier0Interface#Tier0Interface_TYPE_LOOPBACK
    //
    //  Interface type
	Type_ *string
    // Possible values are: 
    //
    // * Tier0Interface#Tier0Interface_URPF_MODE_NONE
    // * Tier0Interface#Tier0Interface_URPF_MODE_STRICT
    //
    //  Unicast Reverse Path Forwarding mode
	UrpfMode *string
}
const Tier0Interface_TYPE_EXTERNAL = "EXTERNAL"
const Tier0Interface_TYPE_SERVICE = "SERVICE"
const Tier0Interface_TYPE_LOOPBACK = "LOOPBACK"
const Tier0Interface_URPF_MODE_NONE = "NONE"
const Tier0Interface_URPF_MODE_STRICT = "STRICT"

// Paged collection of Tier-0 Interfaces
type Tier0InterfaceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tier-0 Interface list results
	Results []Tier0Interface
}

// Multicast PIM configuration.
type Tier0InterfacePimConfig struct {
    // enable/disable PIM configuration.
	Enabled *bool
}

// Paged collection of Tier-0s
type Tier0ListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tier-0 list results
	Results []Tier0
}

// RouteMap for redistributing routes to BGP and other routing protocols
type Tier0RouteMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Ordered list of route map entries.
	Entries []RouteMapEntry
}

// Paged collection of RouteMaps
type Tier0RouteMapListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tier0RouteMap results
	Results []Tier0RouteMap
}

// Route Redistribution config
type Tier0RouteRedistributionConfig struct {
    // Flag to enable route redistribution for BGP.
	BgpEnabled *bool
    // List of redistribution rules.
	RedistributionRules []Tier0RouteRedistributionRule
}

// Single route redistribution rule
type Tier0RouteRedistributionRule struct {
    // Rule name
	Name *string
    // Route map to be associated with the redistribution rule
	RouteMapPath *string
    // Possible values are: 
    //
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_STATIC
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_CONNECTED
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_EXTERNAL_INTERFACE
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_SEGMENT
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_ROUTER_LINK
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_SERVICE_INTERFACE
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_LOOPBACK_INTERFACE
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_DNS_FORWARDER_IP
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_IPSEC_LOCAL_IP
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_NAT
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_EVPN_TEP_IP
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_NAT
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_STATIC
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_VIP
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_SNAT
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_DNS_FORWARDER_IP
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_CONNECTED
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_SERVICE_INTERFACE
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_SEGMENT
    // * Tier0RouteRedistributionRule#Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_IPSEC_LOCAL_ENDPOINT
    //
    //  List of redistribution types
	RouteRedistributionTypes []string
}
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_STATIC = "TIER0_STATIC"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_CONNECTED = "TIER0_CONNECTED"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_EXTERNAL_INTERFACE = "TIER0_EXTERNAL_INTERFACE"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_SEGMENT = "TIER0_SEGMENT"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_ROUTER_LINK = "TIER0_ROUTER_LINK"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_SERVICE_INTERFACE = "TIER0_SERVICE_INTERFACE"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_LOOPBACK_INTERFACE = "TIER0_LOOPBACK_INTERFACE"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_DNS_FORWARDER_IP = "TIER0_DNS_FORWARDER_IP"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_IPSEC_LOCAL_IP = "TIER0_IPSEC_LOCAL_IP"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_NAT = "TIER0_NAT"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER0_EVPN_TEP_IP = "TIER0_EVPN_TEP_IP"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_NAT = "TIER1_NAT"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_STATIC = "TIER1_STATIC"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_VIP = "TIER1_LB_VIP"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_LB_SNAT = "TIER1_LB_SNAT"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_DNS_FORWARDER_IP = "TIER1_DNS_FORWARDER_IP"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_CONNECTED = "TIER1_CONNECTED"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_SERVICE_INTERFACE = "TIER1_SERVICE_INTERFACE"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_SEGMENT = "TIER1_SEGMENT"
const Tier0RouteRedistributionRule_ROUTE_REDISTRIBUTION_TYPES_TIER1_IPSEC_LOCAL_ENDPOINT = "TIER1_IPSEC_LOCAL_ENDPOINT"

// Tier-0 vrf configuration.
type Tier0VrfConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // L3 VNI associated with the VRF for overlay traffic. VNI must be unique and belong to configured VNI pool. format: int32
	EvpnTransitVni *int64
    //
	RouteDistinguisher *string
    // Route targets.
	RouteTargets []VrfRouteTargets
    // Default tier0 path. Cannot be modified after realization.
	Tier0Path *string
}

// Tier-1 instance configuration.
type Tier1 struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Indicates if logging should be enabled for the default whitelisting rule. This filed is deprecated and recommended to change Rule logging filed. Note that this filed is not synchornied with default logging field.
	DefaultRuleLogging *bool
    // DHCP configuration for Segments connected to Tier-1. DHCP service is enabled in relay mode.
	DhcpConfigPaths []string
    // Disable or enable gateway fiewall.
	DisableFirewall *bool
    // Flag to enable standby service router relocation. Standby relocation is not enabled until edge cluster is configured for Tier1.
	EnableStandbyRelocation *bool
    // Possible values are: 
    //
    // * Tier1#Tier1_FAILOVER_MODE_PREEMPTIVE
    // * Tier1#Tier1_FAILOVER_MODE_NON_PREEMPTIVE
    //
    //  Determines the behavior when a Tier-1 instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. Only applicable when edge cluster is configured in Tier1 locale-service.
	FailoverMode *string
    // Additional config for federation.
	FederationConfig *FederationGatewayConfig
    // This filed is deprecated and recommended to change Rule action filed. Note that this filed is not synchornied with default rule field.
	ForceWhitelisting *bool
    // Inter site routing configuration when the gateway is streched.
	IntersiteConfig *IntersiteGatewayConfig
    // Configuration IPv6 NDRA and DAD profiles. Either or both NDRA and/or DAD profiles can be configured.
	Ipv6ProfilePaths []string
    // Possible values are: 
    //
    // * Tier1#Tier1_POOL_ALLOCATION_ROUTING
    // * Tier1#Tier1_POOL_ALLOCATION_LB_SMALL
    // * Tier1#Tier1_POOL_ALLOCATION_LB_MEDIUM
    // * Tier1#Tier1_POOL_ALLOCATION_LB_LARGE
    // * Tier1#Tier1_POOL_ALLOCATION_LB_XLARGE
    //
    //  Supports edge node allocation at different sizes for routing and load balancer service to meet performance and scalability requirements. ROUTING: Allocate edge node to provide routing services. LB_SMALL, LB_MEDIUM, LB_LARGE, LB_XLARGE: Specify size of load balancer service that will be configured on TIER1 gateway.
	PoolAllocation *string
    // QoS Profile configuration for Tier1 router link connected to Tier0 gateway.
	QosProfile *GatewayQosProfileConfig
    // Route advertisement rules and filtering
	RouteAdvertisementRules []RouteAdvertisementRule
    // Possible values are: 
    //
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_STATIC_ROUTES
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_CONNECTED
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_NAT
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_LB_VIP
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_LB_SNAT
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_DNS_FORWARDER_IP
    // * Tier1#Tier1_ROUTE_ADVERTISEMENT_TYPES_IPSEC_LOCAL_ENDPOINT
    //
    //  Enable different types of route advertisements. When not specified, routes to IPSec VPN local-endpoint subnets (TIER1_IPSEC_LOCAL_ENDPOINT) are automatically advertised.
	RouteAdvertisementTypes []string
    // Specify Tier-1 connectivity to Tier-0 instance.
	Tier0Path *string
    // Possible values are: 
    //
    // * Tier1#Tier1_TYPE_ROUTED
    // * Tier1#Tier1_TYPE_ISOLATED
    // * Tier1#Tier1_TYPE_NATTED
    //
    //  Tier1 connectivity type for reference. Property value is not validated with Tier1 configuration. ROUTED: Tier1 is connected to Tier0 gateway and routing is enabled. ISOLATED: Tier1 is not connected to any Tier0 gateway. NATTED: Tier1 is in ROUTED type with NAT configured locally.
	Type_ *string
}
const Tier1_FAILOVER_MODE_PREEMPTIVE = "PREEMPTIVE"
const Tier1_FAILOVER_MODE_NON_PREEMPTIVE = "NON_PREEMPTIVE"
const Tier1_POOL_ALLOCATION_ROUTING = "ROUTING"
const Tier1_POOL_ALLOCATION_LB_SMALL = "LB_SMALL"
const Tier1_POOL_ALLOCATION_LB_MEDIUM = "LB_MEDIUM"
const Tier1_POOL_ALLOCATION_LB_LARGE = "LB_LARGE"
const Tier1_POOL_ALLOCATION_LB_XLARGE = "LB_XLARGE"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_STATIC_ROUTES = "TIER1_STATIC_ROUTES"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_CONNECTED = "TIER1_CONNECTED"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_NAT = "TIER1_NAT"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_LB_VIP = "TIER1_LB_VIP"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_LB_SNAT = "TIER1_LB_SNAT"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_DNS_FORWARDER_IP = "TIER1_DNS_FORWARDER_IP"
const Tier1_ROUTE_ADVERTISEMENT_TYPES_IPSEC_LOCAL_ENDPOINT = "TIER1_IPSEC_LOCAL_ENDPOINT"
const Tier1_TYPE_ROUTED = "ROUTED"
const Tier1_TYPE_ISOLATED = "ISOLATED"
const Tier1_TYPE_NATTED = "NATTED"

// Binding of Tier-1 to the enforcement point.
type Tier1DeploymentMap struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Path of enforcement point on which Tier-1 shall be deployed.
	EnforcementPoint *string
}

// Tier1 gateway state
type Tier1GatewayState struct {
    // String Path of the enforcement point. When not specified, routes from all enforcement-points are returned.
	EnforcementPointPath *string
    // IPv6 DAD status for interfaces configured on Tier1
	Ipv6Status []IPv6Status
    // Detailed realized state information for Tier1
	Tier1State *LogicalRouterState
    // Detailed realized status information for Tier1
	Tier1Status *LogicalRouterStatus
}

// Tier-1 interface configuration for attaching services.
type Tier1Interface struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet
    // Configrue IPv6 NDRA profile. Only one NDRA profile can be configured.
	Ipv6ProfilePaths []string
    // Maximum transmission unit (MTU) specifies the size of the largest packet that a network protocol can transmit. format: int32
	Mtu *int64
    // Policy path of Segment to which interface is connected to.
	SegmentPath *string
    // Possible values are: 
    //
    // * Tier1Interface#Tier1Interface_URPF_MODE_NONE
    // * Tier1Interface#Tier1Interface_URPF_MODE_STRICT
    //
    //  Unicast Reverse Path Forwarding mode
	UrpfMode *string
}
const Tier1Interface_URPF_MODE_NONE = "NONE"
const Tier1Interface_URPF_MODE_STRICT = "STRICT"

// Paged collection of Tier-1 Interfaces
type Tier1InterfaceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tier-1 Interface list results
	Results []Tier1Interface
}

// Paged collection of Tier-1 instances
type Tier1ListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // Tier-1 list results
	Results []Tier1
}

type TlsCertificate struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // list of X509Certificates.
	Details []X509Certificate
    // pem encoded certificate data.
	PemEncoded *string
}

// Certificate queries result
type TlsCertificateList struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // TlsCertificate list.
	Results []TlsCertificate
}

type TlsCrl struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Details of the X509Crl object.
	Details *X509Crl
    // Pem encoded crl data.
	PemEncoded *string
}

// Paged Collection of TlsCrl
type TlsCrlListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // TlsCrl list results
	Results []TlsCrl
}

// Returns the certificate and thumbprint of a remote TLS listener, if the listener is running and accepting requests. If the certificate cannot be retrieved, the result property describes the problem.
type TlsListenerCertificate struct {
    // The certificate of the TLS listener.
	Certificate *X509Certificate
    // Possible values are: 
    //
    // * TlsListenerCertificate#TlsListenerCertificate_RESULT_SUCCESS
    // * TlsListenerCertificate#TlsListenerCertificate_RESULT_CONNECTION_TIMEOUT
    // * TlsListenerCertificate#TlsListenerCertificate_RESULT_NO_ROUTE_TO_HOST
    // * TlsListenerCertificate#TlsListenerCertificate_RESULT_CONNECTION_REFUSED
    //
    //  Result of get certificate operation.
	Result *string
    // The SHA-256 thumbprint of the TLS listener.
	Thumbprint *string
}
const TlsListenerCertificate_RESULT_SUCCESS = "SUCCESS"
const TlsListenerCertificate_RESULT_CONNECTION_TIMEOUT = "CONNECTION_TIMEOUT"
const TlsListenerCertificate_RESULT_NO_ROUTE_TO_HOST = "NO_ROUTE_TO_HOST"
const TlsListenerCertificate_RESULT_CONNECTION_REFUSED = "CONNECTION_REFUSED"

type TlsTrustData struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Key algorithm contained in this certificate.
	KeyAlgo *string
    // Password for private key encryption.
	Passphrase *string
    // pem encoded certificate data.
	PemEncoded *string
    // private key data
	PrivateKey *string
}

// Tooltip to be shown while hovering over the dashboard UI element.
type Tooltip struct {
    // If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition *string
    // If true, displays tooltip text in bold
	Heading *bool
    // Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.
	Text *string
}

// Traceflow configuration
type TraceflowConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // This field indicates if intent is transient and will be cleaned up by the system if set to true
	IsTransient *bool
    // Configuration of packet data
	Packet *data.StructValue
    // Segment Port Path or UUID
	SegmentPortPath *string
    // Maximum time in seconds the management plane will wait for observation result to be sent by opsAgent. format: int64
	Timeout *int64
}

// Enables traffic limit for incoming/outgoing broadcast and multicast packets. Use 0 to disable rate limiting for a specific traffic type
type TrafficRateLimits struct {
    // Incoming broadcast traffic limit in packets per second format: int32
	RxBroadcast *int64
    // Incoming multicast traffic limit in packets per second format: int32
	RxMulticast *int64
    // Outgoing broadcast traffic limit in packets per second format: int32
	TxBroadcast *int64
    // Outgoing multicast traffic limit in packets per second format: int32
	TxMulticast *int64
}

// Detailed Realized Status of an Intent on a span of Transport Nodes.
type TransportNodeSpanEnforcedStatus struct {
    // List of Detailed Realized Status per Transport Node.
	EnforcedStatusPerTransportNode []EnforcedStatusPerTransportNode
    // Possible values are: 
    //
    // * EnforcedStatusPerScopeNsxt#EnforcedStatusPerScopeNsxt_RESOURCE_TYPE_TRANSPORTNODESPANENFORCEDSTATUS
    //
    //  Enforced Realized Status Per Scope Resource Type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const TransportNodeSpanEnforcedStatus__TYPE_IDENTIFIER = "TransportNodeSpanEnforcedStatus"

type TransportProtocolHeader struct {
    // DHCP header
	DhcpHeader *DhcpHeader
    // DHCP v6 header
	Dhcpv6Header *Dhcpv6Header
    // DNS header
	DnsHeader *DnsHeader
    // ICMP echo request header
	IcmpEchoRequestHeader *IcmpEchoRequestHeader
    // Neighbor discovery protocol header
	NdpHeader *NdpHeader
    // TCP header
	TcpHeader *TcpHeader
    // UDP header
	UdpHeader *UdpHeader
}

type TunnelInterfaceIPSubnet struct {
    // IPv4 Addresses format: ipv4
	IpAddresses []string
    // Subnet Prefix Length format: int64
	PrefixLength *int64
}

type TunnelSubnet struct {
    // Subnet ip addresses format: ipv4
	IpAddresses []string
    // Subnet Prefix Length format: int64
	PrefixLength *int64
}

type UdpHeader struct {
    // Destination port of udp header format: int64
	DstPort *int64
    // Source port of udp header format: int64
	SrcPort *int64
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over UDP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type UdpPolicyLbMonitorProfile struct {
    // Expected data, can be anywhere in the response and it has to be a string, regular expressions are not supported. UDP healthcheck is considered failed if there is no server response within the timeout period.
	Receive *string
    // The data to be sent to the monitored server.
	Send *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_TCPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_UDPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_ICMPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPPOLICYLBMONITORPROFILE
    // * PolicyLbMonitorProfile#PolicyLbMonitorProfile_RESOURCE_TYPE_HTTPSPOLICYLBMONITORPROFILE
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN. format: int64
	FallCount *int64
    // Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group. format: int64
	Interval *int64
    // Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. format: int32
	MonitorPort *int64
    // Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state. format: int64
	RiseCount *int64
    // Timeout specified in seconds. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout. format: int64
	Timeout *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const UdpPolicyLbMonitorProfile__TYPE_IDENTIFIER = "UdpPolicyLbMonitorProfile"

// Virtual server acts as a facade to an application, receives all client connections over UDP and distributes them among the backend servers.
type UdpPolicyLbVirtualServer struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_TCPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_UDPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_HTTPSPOLICYLBVIRTUALSERVER
    // * PolicyLbVirtualServer#PolicyLbVirtualServer_RESOURCE_TYPE_CUSTOMPOLICYLBVIRTUALSERVER
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled *bool
    // Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers. format: ip
	IpAddress *string
    // Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile *string
    // Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range. format: port-or-range
	Ports []string
    // Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath *string
	TrafficSource *string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const UdpPolicyLbVirtualServer__TYPE_IDENTIFIER = "UdpPolicyLbVirtualServer"

// Unary Operation.
type UnaryOperation struct {
    // Represents an argument of the operation pointing to a specific field value.
	Operand *ResourceFieldPointer
    // Possible values are: 
    //
    // * UnaryOperation#UnaryOperation_OPERATOR_APPEND
    // * UnaryOperation#UnaryOperation_OPERATOR_SUBTRACT
    //
    //  Logical Operator describing the operation to apply to the operand.
	Operator *string
}
const UnaryOperation_OPERATOR_APPEND = "APPEND"
const UnaryOperation_OPERATOR_SUBTRACT = "SUBTRACT"

// Operation based Injection Value.
type UnaryOperationBasedInjectionValue struct {
    // Resource field pointer representing the initial value for the injection value. If an operation is supplied, the value is handed to the operation function to produce a final result.
	InitialValue *ResourceFieldPointer
    // Represents an optional operation to be done on the initial value.
	Operation *UnaryOperation
    // Possible values are: 
    //
    // * InjectionValue#InjectionValue_RESOURCE_TYPE_UNARYOPERATIONBASEDINJECTIONVALUE
    //
    //  Injection Value resource type.
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const UnaryOperationBasedInjectionValue__TYPE_IDENTIFIER = "UnaryOperationBasedInjectionValue"

// Short name or alias of a url. It is used to represent the url.
type UrlAlias struct {
    //
	Alias *string
    // Search query to be applied, if any. If query string is not provided, it will be ignored.
	Query *string
    // Url to fetch data from.
	Url *string
}

// Authenticated User Info
type UserInfo struct {
    // Permissions
	Roles []NsxRole
    // User Name
	UserName *string
}

// Represents the leaf level value constraint to constrain specified attribute value to the set of values to be allowed/not-allowed. Example - sourceGroups allowed to have only with list of groups. { \"operator\":\"INCLUDES\", \"values\":[\"/infra/services/HTTP\", \"/infra/services/HTTPS\"] }
type ValueConstraintExpression struct {
    // Possible values are: 
    //
    // * ValueConstraintExpression#ValueConstraintExpression_OPERATOR_INCLUDES
    // * ValueConstraintExpression#ValueConstraintExpression_OPERATOR_EXCLUDES
    // * ValueConstraintExpression#ValueConstraintExpression_OPERATOR_EQUALS
    //
    //  Operation to check for value list for resource attribute of constraint.
	Operator *string
    // List of values.
	Values []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_VALUECONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_RELATEDATTRIBUTECONDITIONALEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_ENTITYINSTANCECOUNTCONSTRAINTEXPRESSION
    // * ConstraintExpression#ConstraintExpression_RESOURCE_TYPE_FIELDSANITYCONSTRAINTEXPRESSION
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const ValueConstraintExpression__TYPE_IDENTIFIER = "ValueConstraintExpression"
const ValueConstraintExpression_OPERATOR_INCLUDES = "INCLUDES"
const ValueConstraintExpression_OPERATOR_EXCLUDES = "EXCLUDES"
const ValueConstraintExpression_OPERATOR_EQUALS = "EQUALS"

type VersionList struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // List of component versions
	AcceptableVersions []string
}

// Vidm Info
type VidmInfo struct {
    // User's Full Name Or User Group's Display Name
	DisplayName *string
    // Username Or Groupname
	Name *string
    // Possible values are: 
    //
    // * VidmInfo#VidmInfo_TYPE_USER
    // * VidmInfo#VidmInfo_TYPE_GROUP
    //
    //  Type
	Type_ *string
}
const VidmInfo_TYPE_USER = "remote_user"
const VidmInfo_TYPE_GROUP = "remote_group"

type VidmInfoListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // List results
	Results []VidmInfo
}

// Describes the configuration of a view to be displayed on the dashboard.
type View struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.
	ExcludeRoles *string
    // Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.
	IncludeRoles *string
    // Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.
	Shared *bool
    // Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order. format: int32
	Weight *int64
    // Array of widgets that are part of the view.
	Widgets []WidgetItem
}

// Represents a list of views.
type ViewList struct {
    // Array of views
	Views []View
}

// A VirtualEndpoint represents an IP (or nexthop) which is outside SDDC. It represents a redirection target for RedirectionPolicy.
type VirtualEndpoint struct {
    // One VirtualEndpoint will be created per service name.
	ServiceNames []string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * BaseEndpoint#BaseEndpoint_RESOURCE_TYPE_VIRTUALENDPOINT
    // * BaseEndpoint#BaseEndpoint_RESOURCE_TYPE_SERVICEINSTANCEENDPOINT
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // IPs where either inbound or outbound traffic is to be redirected.
	TargetIps []IPInfo
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const VirtualEndpoint__TYPE_IDENTIFIER = "VirtualEndpoint"

type VirtualMachine struct {
    // List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']
	ComputeIds []string
    // Current external id of this virtual machine in the system.
	ExternalId *string
    // Guest virtual machine details include OS name, computer name of guest VM. Currently this is supported for guests on ESXi that have VMware Tools installed.
	GuestInfo *GuestInfo
    // Id of the host in which this virtual machine exists.
	HostId *string
    // Id of the vm unique within the host.
	LocalIdOnHost *string
    // Possible values are: 
    //
    // * VirtualMachine#VirtualMachine_POWER_STATE_VM_RUNNING
    // * VirtualMachine#VirtualMachine_POWER_STATE_VM_STOPPED
    // * VirtualMachine#VirtualMachine_POWER_STATE_VM_SUSPENDED
    // * VirtualMachine#VirtualMachine_POWER_STATE_UNKNOWN
    //
    //  Current power state of this virtual machine in the system.
	PowerState *string
    // Reference of the Host or Public Cloud Gateway that reported the VM
	Source *ResourceReference
    // Possible values are: 
    //
    // * VirtualMachine#VirtualMachine_TYPE_EDGE
    // * VirtualMachine#VirtualMachine_TYPE_SERVICE
    // * VirtualMachine#VirtualMachine_TYPE_REGULAR
    //
    //  Virtual Machine type; Edge, Service VM or other.
	Type_ *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const VirtualMachine__TYPE_IDENTIFIER = "VirtualMachine"
const VirtualMachine_POWER_STATE_VM_RUNNING = "VM_RUNNING"
const VirtualMachine_POWER_STATE_VM_STOPPED = "VM_STOPPED"
const VirtualMachine_POWER_STATE_VM_SUSPENDED = "VM_SUSPENDED"
const VirtualMachine_POWER_STATE_UNKNOWN = "UNKNOWN"
const VirtualMachine_TYPE_EDGE = "EDGE"
const VirtualMachine_TYPE_SERVICE = "SERVICE"
const VirtualMachine_TYPE_REGULAR = "REGULAR"

type VirtualNetworkInterface struct {
    // Device key of the virtual network interface.
	DeviceKey *string
    // Device name of the virtual network interface.
	DeviceName *string
    // External Id of the virtual network inferface.
	ExternalId *string
    // Id of the host on which the vm exists.
	HostId *string
    // IP Addresses of the the virtual network interface, from various sources.
	IpAddressInfo []IpAddressInfo
    // LPort Attachment Id of the virtual network interface.
	LportAttachmentId *string
    // MAC address of the virtual network interface.
	MacAddress *string
    // Id of the vm to which this virtual network interface belongs.
	OwnerVmId *string
    // Possible values are: 
    //
    // * VirtualNetworkInterface#VirtualNetworkInterface_OWNER_VM_TYPE_EDGE
    // * VirtualNetworkInterface#VirtualNetworkInterface_OWNER_VM_TYPE_SERVICE
    // * VirtualNetworkInterface#VirtualNetworkInterface_OWNER_VM_TYPE_REGULAR
    //
    //  Owner virtual machine type; Edge, Service VM or other.
	OwnerVmType *string
    // Id of the vm unique within the host.
	VmLocalIdOnHost *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const VirtualNetworkInterface__TYPE_IDENTIFIER = "VirtualNetworkInterface"
const VirtualNetworkInterface_OWNER_VM_TYPE_EDGE = "EDGE"
const VirtualNetworkInterface_OWNER_VM_TYPE_SERVICE = "SERVICE"
const VirtualNetworkInterface_OWNER_VM_TYPE_REGULAR = "REGULAR"

type VirtualNetworkInterfaceListResult struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor *string
    // Count of results found (across all pages), set only on first page format: int64
	ResultCount *int64
    // If true, results are sorted in ascending order
	SortAscending *bool
    // Field by which records are sorted
	SortBy *string
    // VirtualNetworkInterface list results
	Results []VirtualNetworkInterface
}

// Virtual portgroup on a virtual switch
type VirtualPortgroup struct {
    // Id of the portgroup, eg. a mo-ref from VC.
	CmLocalId *string
    // External id of the virtual portgroup
	ExternalId *string
    // Portgroup type like DistributedVirtualPortgroup
	OriginType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const VirtualPortgroup__TYPE_IDENTIFIER = "VirtualPortgroup"

// Virtual switch on a compute manager
type VirtualSwitch struct {
    // ID of the virtual switch in compute manager
	CmLocalId *string
    // External id of the virtual switch
	ExternalId *string
    // ID of the compute manager where this virtual switch is discovered.
	OriginId *string
    // Switch type like VmwareDistributedVirtualSwitch
	OriginType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const VirtualSwitch__TYPE_IDENTIFIER = "VirtualSwitch"

type VmToolsInfo struct {
    // Current external id of this virtual machine in the system.
	ExternalId *string
    // Version of file agent on the VM of a third party partner solution.
	FileAgentVersion *string
    // Id of the VM which is assigned locally by the host. It is the VM-moref on ESXi hosts, in other environments it is VM UUID.
	HostLocalId *string
    // Version of network agent on the VM of a third party partner solution.
	NetworkAgentVersion *string
    // Reference of the Host or Public Cloud Gateway that reported the VM.
	Source *ResourceReference
    // Version of VMTools installed on the VM.
	ToolsVersion *string
    // Possible values are: 
    //
    // * VmToolsInfo#VmToolsInfo_VM_TYPE_EDGE
    // * VmToolsInfo#VmToolsInfo_VM_TYPE_SERVICE
    // * VmToolsInfo#VmToolsInfo_VM_TYPE_REGULAR
    //
    //  Type of VM - Edge, Service or other.
	VmType *string
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // Timestamp of last modification format: int64
	LastSyncTime *int64
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // The type of this resource.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const VmToolsInfo__TYPE_IDENTIFIER = "VmToolsInfo"
const VmToolsInfo_VM_TYPE_EDGE = "EDGE"
const VmToolsInfo_VM_TYPE_SERVICE = "SERVICE"
const VmToolsInfo_VM_TYPE_REGULAR = "REGULAR"

// Vni Pool Configuration.
type VniPoolConfig struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // End value of VNI Pool range format: int32
	End *int64
    // Start value of VNI Pool range format: int32
	Start *int64
}

// Vrf Route Targets for import/export.
type VrfRouteTargets struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Defaults to ID if not set
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // The type of this resource.
	ResourceType *string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // Path of its parent
	ParentPath *string
    // Absolute path of this object
	Path *string
    // Path relative from its parent
	RelativePath *string
    // This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId *string
    // subtree for this type within policy tree containing nested elements.
	Children []*data.StructValue
    // Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete *bool
    // Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden *bool
    // Possible values are: 
    //
    // * VrfRouteTargets#VrfRouteTargets_ADDRESS_FAMILY_EVPN
    //
    //  Address family.
	AddressFamily *string
    //
	ExportRouteTargets []string
    //
	ImportRouteTargets []string
}
const VrfRouteTargets_ADDRESS_FAMILY_EVPN = "L2VPN_EVPN"

// Schedule to specify day of the week and time to take automated backup
type WeeklyBackupSchedule struct {
    // Days of week when backup is taken. 0 - Sunday, 1 - Monday, 2 - Tuesday, 3 - Wednesday ... format: int64
	DaysOfWeek []int64
    // Time of day when backup is taken format: int64
	HourOfDay *int64
    // Time of day when backup is taken format: int64
	MinuteOfDay *int64
    // Possible values are: 
    //
    // * BackupSchedule#BackupSchedule_RESOURCE_TYPE_WEEKLYBACKUPSCHEDULE
    // * BackupSchedule#BackupSchedule_RESOURCE_TYPE_INTERVALBACKUPSCHEDULE
    //
    //  Schedule type
	ResourceType string
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const WeeklyBackupSchedule__TYPE_IDENTIFIER = "WeeklyBackupSchedule"

// Describes the configuration of a widget to be displayed on the dashboard. WidgetConfiguration is a base type that provides attributes of a widget in-general.
type WidgetConfiguration struct {
    // The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink
    // Schema for this resource
	Schema *string
    // Link to this resource
	Self *SelfResourceLink
    // The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected. format: int32
	Revision *int64
    // Timestamp of resource creation format: int64
	CreateTime *int64
    // ID of the user who created this resource
	CreateUser *string
    // Timestamp of last modification format: int64
	LastModifiedTime *int64
    // ID of the user who last modified this resource
	LastModifiedUser *string
    // Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super user and can modify it, but only when providing the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this entity.
	Protection *string
    // Indicates system owned resource
	SystemOwned *bool
    // Description of this resource
	Description *string
    // Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName *string
    // Unique identifier of this resource
	Id *string
    // Possible values are: 
    //
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION
    // * WidgetConfiguration#WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION
    //
    //  Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string
    // Opaque identifiers meaningful to the API user
	Tags []Tag
    // The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource
    // Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue
    // Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId *string
    // Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter *string
    // Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired *bool
	Footer *Footer
    // Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon
    // Set to true if this widget should be used as a drilldown.
	IsDrilldown *bool
    // Legend to be displayed. If legend is not needed, do not include it.
	Legend *Legend
    // Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared *bool
    // Represents the horizontal span of the widget / container. format: int32
	Span *int64
    // Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details. format: int32
	Weight *int64
}
// Identifier denoting this class, when it is used in polymorphic context. 
//
// This value should be assigned to the property which is used to discriminate the actual type used in the polymorphic context.
const WidgetConfiguration__TYPE_IDENTIFIER = "WidgetConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_LABELVALUECONFIGURATION = "LabelValueConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_DONUTCONFIGURATION = "DonutConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_MULTIWIDGETCONFIGURATION = "MultiWidgetConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_CONTAINERCONFIGURATION = "ContainerConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_STATSCONFIGURATION = "StatsConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_GRIDCONFIGURATION = "GridConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_GRAPHCONFIGURATION = "GraphConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_CUSTOMWIDGETCONFIGURATION = "CustomWidgetConfiguration"
const WidgetConfiguration_RESOURCE_TYPE_DROPDOWNFILTERWIDGETCONFIGURATION = "DropdownFilterWidgetConfiguration"

// Represents a list of widget configurations.
type WidgetConfigurationList struct {
    // Array of widget configurations
	Widgetconfigurations []*data.StructValue
}

// Represents a reference to a widget that is held by a container or a multi-widget or a View.
type WidgetItem struct {
    // Possible values are: 
    //
    // * WidgetItem#WidgetItem_ALIGNMENT_LEFT
    // * WidgetItem#WidgetItem_ALIGNMENT_RIGHT
    //
    //  Aligns widget either left or right.
	Alignment *string
    // Applicable for 'DonutConfiguration' and 'StatsConfiguration' reports only. If label is not specified, then it defaults to the label of the donut or stats report.
	Label *Label
    // If true, separates this widget in a container.
	Separator *bool
    // Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order. format: int32
	Weight *int64
    // Id of the widget configuration that is held by a multi-widget or a container or a view.
	WidgetId *string
}
const WidgetItem_ALIGNMENT_LEFT = "LEFT"
const WidgetItem_ALIGNMENT_RIGHT = "RIGHT"

type X509Certificate struct {
    // One of the DSA cryptogaphic algorithm's strength parameters, base.
	DsaPublicKeyg *string
    // One of the DSA cryptogaphic algorithm's strength parameters, prime.
	DsaPublicKeyp *string
    // One of the DSA cryptogaphic algorithm's strength parameters, sub-prime.
	DsaPublicKeyq *string
    // One of the DSA cryptogaphic algorithm's strength parameters.
	DsaPublicKeyy *string
    // The Curve name for the ECDSA certificate.
	EcdsaCurveName *string
    // Possible values are: 
    //
    // * X509Certificate#X509Certificate_ECDSA_EC_FIELD_F2M
    // * X509Certificate#X509Certificate_ECDSA_EC_FIELD_FP
    //
    //  Represents an elliptic curve (EC) finite field in ECDSA.
	EcdsaEcField *string
    // The order of the middle term(s) of the reduction polynomial in elliptic curve (EC) | characteristic 2 finite field.| Contents of this array are copied to protect against subsequent modification in ECDSA. format: int64
	EcdsaEcFieldF2mks []int64
    // The first coefficient of this elliptic curve in elliptic curve (EC) | characteristic 2 finite field for ECDSA. format: int64
	EcdsaEcFieldF2mm *int64
    // The value whose i-th bit corresponds to the i-th coefficient of the reduction polynomial | in elliptic curve (EC) characteristic 2 finite field for ECDSA.
	EcdsaEcFieldF2mrp *string
    // The specified prime for the elliptic curve prime finite field in ECDSA.
	EcdsaEcFieldF2pp *string
    // The first coefficient of this elliptic curve in ECDSA.
	EcdsaPublicKeya *string
    // The second coefficient of this elliptic curve in ECDSA.
	EcdsaPublicKeyb *string
    // The co-factor in ECDSA. format: int64
	EcdsaPublicKeyCofactor *int64
    // X co-ordinate of G (the generator which is also known as the base point) in ECDSA.
	EcdsaPublicKeyGeneratorx *string
    // Y co-ordinate of G (the generator which is also known as the base point) in ECDSA.
	EcdsaPublicKeyGeneratory *string
    // The order of generator G in ECDSA.
	EcdsaPublicKeyOrder *string
    // The bytes used during curve generation for later validation in ECDSA.| Contents of this array are copied to protect against subsequent modification.
	EcdsaPublicKeySeed []string
    // True if this is a CA certificate.
	IsCa *bool
    // True if this certificate is valid.
	IsValid *bool
    // The certificate issuers complete distinguished name.
	Issuer *string
    // The certificate issuer's common name.
	IssuerCn *string
    // The time in epoch milliseconds at which the certificate becomes invalid. format: int64
	NotAfter *int64
    // The time in epoch milliseconds at which the certificate becomes valid. format: int64
	NotBefore *int64
    // Possible values are: 
    //
    // * X509Certificate#X509Certificate_PUBLIC_KEY_ALGO_RSA
    // * X509Certificate#X509Certificate_PUBLIC_KEY_ALGO_DSA
    // * X509Certificate#X509Certificate_PUBLIC_KEY_ALGO_ECDSA
    //
    //  Cryptographic algorithm used by the public key for data encryption.
	PublicKeyAlgo *string
    // Size measured in bits of the public/private keys used in a cryptographic algorithm. format: int64
	PublicKeyLength *int64
    // An RSA public key is made up of the modulus and the public exponent. Exponent is a power number.
	RsaPublicKeyExponent *string
    // An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number.
	RsaPublicKeyModulus *string
    // Certificate's serial number.
	SerialNumber *string
    // The signature value(the raw signature bits) used for signing and validate the cert.
	Signature *string
    // The algorithm used by the Certificate Authority to sign the certificate.
	SignatureAlgorithm *string
    // The certificate owners complete distinguished name.
	Subject *string
    // The certificate owner's common name.
	SubjectCn *string
    // Certificate version (default v1).
	Version *string
}
const X509Certificate_ECDSA_EC_FIELD_F2M = "F2M"
const X509Certificate_ECDSA_EC_FIELD_FP = "FP"
const X509Certificate_PUBLIC_KEY_ALGO_RSA = "RSA"
const X509Certificate_PUBLIC_KEY_ALGO_DSA = "DSA"
const X509Certificate_PUBLIC_KEY_ALGO_ECDSA = "ECDSA"

// A CRL is a time-stamped list identifying revoked certificates.
type X509Crl struct {
    // List of X509CrlEntry.
	CrlEntries []X509CrlEntry
    // Issuer's distinguished name. (DN)
	Issuer *string
    // Next update time for the CRL.
	NextUpdate *string
    // CRL's version number either 1 or 2.
	Version *string
}

// Each revoked certificate is identified in a CRL by its certificate serial number.
type X509CrlEntry struct {
    // Revocation date.
	RevocationDate *string
    // The revoked certificate's serial number.
	SerialNumber *string
}




func ALGTypeServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alg"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alg"] = "Alg"
	fields["destination_ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_ports"] = "DestinationPorts"
	fields["source_ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_ports"] = "SourcePorts"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ALG_type_service_entry", fields, reflect.TypeOf(ALGTypeServiceEntry{}), fieldNameMap, validators)
}

func AbstractSpaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["connectivity_strategy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity_strategy"] = "ConnectivityStrategy"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.abstract_space", fields, reflect.TypeOf(AbstractSpace{}), fieldNameMap, validators)
}

func AcceptableComponentVersionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["acceptable_versions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["acceptable_versions"] = "AcceptableVersions"
	fields["component_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["component_type"] = "ComponentType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.acceptable_component_version", fields, reflect.TypeOf(AcceptableComponentVersion{}), fieldNameMap, validators)
}

func AcceptableComponentVersionListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(AcceptableComponentVersionBindingType), reflect.TypeOf([]AcceptableComponentVersion{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.acceptable_component_version_list", fields, reflect.TypeOf(AcceptableComponentVersionList{}), fieldNameMap, validators)
}

func ActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.action", fields, reflect.TypeOf(Action{}), fieldNameMap, validators)
}

func ActionableResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.actionable_resource", fields, reflect.TypeOf(ActionableResource{}), fieldNameMap, validators)
}

func ActionableResourceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ActionableResourceBindingType), reflect.TypeOf([]ActionableResource{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.actionable_resource_list_result", fields, reflect.TypeOf(ActionableResourceListResult{}), fieldNameMap, validators)
}

func ActiveDirectoryIdentitySourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["base_dn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["base_dn"] = "BaseDn"
	fields["domain_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["domain_name"] = "DomainName"
	fields["ldap_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdentitySourceLdapServerBindingType), reflect.TypeOf([]IdentitySourceLdapServer{})))
	fieldNameMap["ldap_servers"] = "LdapServers"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.active_directory_identity_source", fields, reflect.TypeOf(ActiveDirectoryIdentitySource{}), fieldNameMap, validators)
}

func AdvanceClusterRestoreInputBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SelectableResourceReferenceBindingType), reflect.TypeOf([]SelectableResourceReference{})))
	fieldNameMap["resources"] = "Resources"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.advance_cluster_restore_input", fields, reflect.TypeOf(AdvanceClusterRestoreInput{}), fieldNameMap, validators)
}

func AdvanceClusterRestoreRequestBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["data"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(AdvanceClusterRestoreInputBindingType), reflect.TypeOf([]AdvanceClusterRestoreInput{})))
	fieldNameMap["data"] = "Data"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.advance_cluster_restore_request", fields, reflect.TypeOf(AdvanceClusterRestoreRequest{}), fieldNameMap, validators)
}

func AggregateDNSForwarderStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	fields["statistics_per_enforcement_point"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(DNSForwarderStatisticsPerEnforcementPointBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["statistics_per_enforcement_point"] = "StatisticsPerEnforcementPoint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregate_DNS_forwarder_statistics", fields, reflect.TypeOf(AggregateDNSForwarderStatistics{}), fieldNameMap, validators)
}

func AggregateDNSForwarderStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	fields["status_per_enforcement_point"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(DNSForwarderStatusPerEnforcementPointBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["status_per_enforcement_point"] = "StatusPerEnforcementPoint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregate_DNS_forwarder_status", fields, reflect.TypeOf(AggregateDNSForwarderStatus{}), fieldNameMap, validators)
}

func AggregatePolicyDnsAnswerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dns_answer_per_enforcement_point"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(PolicyDnsAnswerPerEnforcementPointBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["dns_answer_per_enforcement_point"] = "DnsAnswerPerEnforcementPoint"
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregate_policy_dns_answer", fields, reflect.TypeOf(AggregatePolicyDnsAnswer{}), fieldNameMap, validators)
}

func AggregatePolicyRuntimeInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregate_policy_runtime_info", fields, reflect.TypeOf(AggregatePolicyRuntimeInfo{}), fieldNameMap, validators)
}

func AggregatedDataCounterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_bytes"] = "RxBytes"
	fields["rx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_packets"] = "RxPackets"
	fields["tx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_bytes"] = "TxBytes"
	fields["tx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_packets"] = "TxPackets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregated_data_counter", fields, reflect.TypeOf(AggregatedDataCounter{}), fieldNameMap, validators)
}

func AggregatedDataCounterExBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_bytes"] = "RxBytes"
	fields["rx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_packets"] = "RxPackets"
	fields["tx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_bytes"] = "TxBytes"
	fields["tx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_packets"] = "TxPackets"
	fields["dropped_by_security_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(PacketsDroppedBySecurityBindingType))
	fieldNameMap["dropped_by_security_packets"] = "DroppedBySecurityPackets"
	fields["mac_learning"] = bindings.NewOptionalType(bindings.NewReferenceType(MacLearningCountersBindingType))
	fieldNameMap["mac_learning"] = "MacLearning"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregated_data_counter_ex", fields, reflect.TypeOf(AggregatedDataCounterEx{}), fieldNameMap, validators)
}

func AggregatedLogicalRouterPortCountersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["rx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["rx"] = "Rx"
	fields["tx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["tx"] = "Tx"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.aggregated_logical_router_port_counters", fields, reflect.TypeOf(AggregatedLogicalRouterPortCounters{}), fieldNameMap, validators)
}

func ApiErrorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["details"] = "Details"
	fields["error_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["error_code"] = "ErrorCode"
	fields["error_data"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["error_data"] = "ErrorData"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["module_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["module_name"] = "ModuleName"
	fields["related_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RelatedApiErrorBindingType), reflect.TypeOf([]RelatedApiError{})))
	fieldNameMap["related_errors"] = "RelatedErrors"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.api_error", fields, reflect.TypeOf(ApiError{}), fieldNameMap, validators)
}

func ApiRequestBodyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_pointer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_pointer"] = "ResourcePointer"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.api_request_body", fields, reflect.TypeOf(ApiRequestBody{}), fieldNameMap, validators)
}

func ArpHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dst_ip"] = "DstIp"
	fields["op_code"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["op_code"] = "OpCode"
	fields["src_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["src_ip"] = "SrcIp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.arp_header", fields, reflect.TypeOf(ArpHeader{}), fieldNameMap, validators)
}

func ArpSnoopingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["arp_binding_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["arp_binding_limit"] = "ArpBindingLimit"
	fields["arp_snooping_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["arp_snooping_enabled"] = "ArpSnoopingEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.arp_snooping_config", fields, reflect.TypeOf(ArpSnoopingConfig{}), fieldNameMap, validators)
}

func AttributeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["attribute_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["attribute_type"] = "AttributeType"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["read_only"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["read_only"] = "ReadOnly"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.attribute", fields, reflect.TypeOf(Attribute{}), fieldNameMap, validators)
}

func AttributeValBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["data_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["data_type"] = "DataType"
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["multivalue"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["multivalue"] = "Multivalue"
	fields["values"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["values"] = "Values"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.attribute_val", fields, reflect.TypeOf(AttributeVal{}), fieldNameMap, validators)
}

func AxesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["x_label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["x_label"] = "XLabel"
	fields["y_label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["y_label"] = "YLabel"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.axes", fields, reflect.TypeOf(Axes{}), fieldNameMap, validators)
}

func BackupConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["after_inventory_update_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["after_inventory_update_interval"] = "AfterInventoryUpdateInterval"
	fields["backup_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["backup_enabled"] = "BackupEnabled"
	fields["backup_schedule"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(BackupScheduleBindingType),}, bindings.REST))
	fieldNameMap["backup_schedule"] = "BackupSchedule"
	fields["inventory_summary_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["inventory_summary_interval"] = "InventorySummaryInterval"
	fields["passphrase"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["passphrase"] = "Passphrase"
	fields["remote_file_server"] = bindings.NewOptionalType(bindings.NewReferenceType(RemoteFileServerBindingType))
	fieldNameMap["remote_file_server"] = "RemoteFileServer"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.backup_configuration", fields, reflect.TypeOf(BackupConfiguration{}), fieldNameMap, validators)
}

func BackupOperationHistoryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cluster_backup_statuses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BackupOperationStatusBindingType), reflect.TypeOf([]BackupOperationStatus{})))
	fieldNameMap["cluster_backup_statuses"] = "ClusterBackupStatuses"
	fields["inventory_backup_statuses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BackupOperationStatusBindingType), reflect.TypeOf([]BackupOperationStatus{})))
	fieldNameMap["inventory_backup_statuses"] = "InventoryBackupStatuses"
	fields["node_backup_statuses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BackupOperationStatusBindingType), reflect.TypeOf([]BackupOperationStatus{})))
	fieldNameMap["node_backup_statuses"] = "NodeBackupStatuses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.backup_operation_history", fields, reflect.TypeOf(BackupOperationHistory{}), fieldNameMap, validators)
}

func BackupOperationStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["backup_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["backup_id"] = "BackupId"
	fields["end_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["end_time"] = "EndTime"
	fields["error_code"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_code"] = "ErrorCode"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["start_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["start_time"] = "StartTime"
	fields["success"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["success"] = "Success"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.backup_operation_status", fields, reflect.TypeOf(BackupOperationStatus{}), fieldNameMap, validators)
}

func BackupOverviewBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ClusterBackupInfoBindingType), reflect.TypeOf([]ClusterBackupInfo{})))
	fieldNameMap["results"] = "Results"
	fields["backup_config"] = bindings.NewOptionalType(bindings.NewReferenceType(BackupConfigurationBindingType))
	fieldNameMap["backup_config"] = "BackupConfig"
	fields["backup_operation_history"] = bindings.NewOptionalType(bindings.NewReferenceType(BackupOperationHistoryBindingType))
	fieldNameMap["backup_operation_history"] = "BackupOperationHistory"
	fields["current_backup_operation_status"] = bindings.NewOptionalType(bindings.NewReferenceType(CurrentBackupOperationStatusBindingType))
	fieldNameMap["current_backup_operation_status"] = "CurrentBackupOperationStatus"
	fields["restore_status"] = bindings.NewOptionalType(bindings.NewReferenceType(ClusterRestoreStatusBindingType))
	fieldNameMap["restore_status"] = "RestoreStatus"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.backup_overview", fields, reflect.TypeOf(BackupOverview{}), fieldNameMap, validators)
}

func BackupScheduleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.backup_schedule", fields, reflect.TypeOf(BackupSchedule{}), fieldNameMap, validators)
}

func BaseConsolidatedStatusPerEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alarm"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyRuntimeAlarmBindingType))
	fieldNameMap["alarm"] = "Alarm"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["consolidated_status"] = bindings.NewOptionalType(bindings.NewReferenceType(ConsolidatedStatusBindingType))
	fieldNameMap["consolidated_status"] = "ConsolidatedStatus"
	fields["enforcement_point_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_id"] = "EnforcementPointId"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.base_consolidated_status_per_enforcement_point", fields, reflect.TypeOf(BaseConsolidatedStatusPerEnforcementPoint{}), fieldNameMap, validators)
}

func BaseEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["target_ips"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPInfoBindingType), reflect.TypeOf([]IPInfo{})))
	fieldNameMap["target_ips"] = "TargetIps"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.base_endpoint", fields, reflect.TypeOf(BaseEndpoint{}), fieldNameMap, validators)
}

func BasePolicyServiceInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["deployment_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["deployment_mode"] = "DeploymentMode"
	fields["partner_service_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["partner_service_name"] = "PartnerServiceName"
	fields["transport_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_type"] = "TransportType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.base_policy_service_instance", fields, reflect.TypeOf(BasePolicyServiceInstance{}), fieldNameMap, validators)
}

func BaseRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["destination_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_groups"] = "DestinationGroups"
	fields["destinations_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["destinations_excluded"] = "DestinationsExcluded"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disabled"] = "Disabled"
	fields["ip_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_protocol"] = "IpProtocol"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["notes"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["notes"] = "Notes"
	fields["profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["profiles"] = "Profiles"
	fields["rule_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_id"] = "RuleId"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["service_entries"] = "ServiceEntries"
	fields["services"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["services"] = "Services"
	fields["source_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_groups"] = "SourceGroups"
	fields["sources_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sources_excluded"] = "SourcesExcluded"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.base_rule", fields, reflect.TypeOf(BaseRule{}), fieldNameMap, validators)
}

func BaseRuleListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.base_rule_list_result", fields, reflect.TypeOf(BaseRuleListResult{}), fieldNameMap, validators)
}

func BaseTier0InterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceSubnetBindingType), reflect.TypeOf([]InterfaceSubnet{})))
	fieldNameMap["subnets"] = "Subnets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.base_tier0_interface", fields, reflect.TypeOf(BaseTier0Interface{}), fieldNameMap, validators)
}

func BatchRequestBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["continue_on_error"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["continue_on_error"] = "ContinueOnError"
	fields["requests"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BatchRequestItemBindingType), reflect.TypeOf([]BatchRequestItem{})))
	fieldNameMap["requests"] = "Requests"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.batch_request", fields, reflect.TypeOf(BatchRequest{}), fieldNameMap, validators)
}

func BatchRequestItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["body"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["body"] = "Body"
	fields["method"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["method"] = "Method"
	fields["uri"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uri"] = "Uri"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.batch_request_item", fields, reflect.TypeOf(BatchRequestItem{}), fieldNameMap, validators)
}

func BatchResponseBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["has_errors"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["has_errors"] = "HasErrors"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BatchResponseItemBindingType), reflect.TypeOf([]BatchResponseItem{})))
	fieldNameMap["results"] = "Results"
	fields["rolled_back"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["rolled_back"] = "RolledBack"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.batch_response", fields, reflect.TypeOf(BatchResponse{}), fieldNameMap, validators)
}

func BatchResponseItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["body"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["body"] = "Body"
	fields["code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["code"] = "Code"
	fields["headers"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["headers"] = "Headers"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.batch_response_item", fields, reflect.TypeOf(BatchResponseItem{}), fieldNameMap, validators)
}

func BfdProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["multiple"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["multiple"] = "Multiple"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bfd_profile", fields, reflect.TypeOf(BfdProfile{}), fieldNameMap, validators)
}

func BfdProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BfdProfileBindingType), reflect.TypeOf([]BfdProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bfd_profile_list_result", fields, reflect.TypeOf(BfdProfileListResult{}), fieldNameMap, validators)
}

func BgpAddressFamilyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["in_prefix_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["in_prefix_count"] = "InPrefixCount"
	fields["out_prefix_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["out_prefix_count"] = "OutPrefixCount"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_address_family", fields, reflect.TypeOf(BgpAddressFamily{}), fieldNameMap, validators)
}

func BgpBfdConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["multiple"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["multiple"] = "Multiple"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_bfd_config", fields, reflect.TypeOf(BgpBfdConfig{}), fieldNameMap, validators)
}

func BgpGracefulRestartConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mode"] = "Mode"
	fields["timer"] = bindings.NewOptionalType(bindings.NewReferenceType(BgpGracefulRestartTimerBindingType))
	fieldNameMap["timer"] = "Timer"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_graceful_restart_config", fields, reflect.TypeOf(BgpGracefulRestartConfig{}), fieldNameMap, validators)
}

func BgpGracefulRestartTimerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["restart_timer"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["restart_timer"] = "RestartTimer"
	fields["stale_route_timer"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["stale_route_timer"] = "StaleRouteTimer"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_graceful_restart_timer", fields, reflect.TypeOf(BgpGracefulRestartTimer{}), fieldNameMap, validators)
}

func BgpNeighborConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["allow_as_in"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["allow_as_in"] = "AllowAsIn"
	fields["bfd"] = bindings.NewOptionalType(bindings.NewReferenceType(BgpBfdConfigBindingType))
	fieldNameMap["bfd"] = "Bfd"
	fields["graceful_restart_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["graceful_restart_mode"] = "GracefulRestartMode"
	fields["hold_down_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["hold_down_time"] = "HoldDownTime"
	fields["in_route_filters"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["in_route_filters"] = "InRouteFilters"
	fields["keep_alive_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["keep_alive_time"] = "KeepAliveTime"
	fields["maximum_hop_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["maximum_hop_limit"] = "MaximumHopLimit"
	fields["neighbor_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["neighbor_address"] = "NeighborAddress"
	fields["out_route_filters"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["out_route_filters"] = "OutRouteFilters"
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["remote_as_num"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["remote_as_num"] = "RemoteAsNum"
	fields["route_filtering"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BgpRouteFilteringBindingType), reflect.TypeOf([]BgpRouteFiltering{})))
	fieldNameMap["route_filtering"] = "RouteFiltering"
	fields["source_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_addresses"] = "SourceAddresses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_neighbor_config", fields, reflect.TypeOf(BgpNeighborConfig{}), fieldNameMap, validators)
}

func BgpNeighborConfigListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BgpNeighborConfigBindingType), reflect.TypeOf([]BgpNeighborConfig{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_neighbor_config_list_result", fields, reflect.TypeOf(BgpNeighborConfigListResult{}), fieldNameMap, validators)
}

func BgpNeighborRouteDetailsCsvRecordBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["as_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["as_path"] = "AsPath"
	fields["local_pref"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["local_pref"] = "LocalPref"
	fields["logical_router_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_router_id"] = "LogicalRouterId"
	fields["med"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["med"] = "Med"
	fields["neighbor_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["neighbor_address"] = "NeighborAddress"
	fields["neighbor_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["neighbor_id"] = "NeighborId"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	fields["next_hop"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_hop"] = "NextHop"
	fields["source_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_address"] = "SourceAddress"
	fields["transport_node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_node_id"] = "TransportNodeId"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_neighbor_route_details_csv_record", fields, reflect.TypeOf(BgpNeighborRouteDetailsCsvRecord{}), fieldNameMap, validators)
}

func BgpNeighborRouteDetailsInCsvFormatBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["file_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["file_name"] = "FileName"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BgpNeighborRouteDetailsCsvRecordBindingType), reflect.TypeOf([]BgpNeighborRouteDetailsCsvRecord{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_neighbor_route_details_in_csv_format", fields, reflect.TypeOf(BgpNeighborRouteDetailsInCsvFormat{}), fieldNameMap, validators)
}

func BgpNeighborRoutesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["egde_node_routes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoutesPerTransportNodeBindingType), reflect.TypeOf([]RoutesPerTransportNode{})))
	fieldNameMap["egde_node_routes"] = "EgdeNodeRoutes"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["neighbor_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["neighbor_path"] = "NeighborPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_neighbor_routes", fields, reflect.TypeOf(BgpNeighborRoutes{}), fieldNameMap, validators)
}

func BgpNeighborRoutesListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BgpNeighborRoutesBindingType), reflect.TypeOf([]BgpNeighborRoutes{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_neighbor_routes_list_result", fields, reflect.TypeOf(BgpNeighborRoutesListResult{}), fieldNameMap, validators)
}

func BgpRouteFilteringBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["address_family"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["address_family"] = "AddressFamily"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["in_route_filters"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["in_route_filters"] = "InRouteFilters"
	fields["maximum_routes"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["maximum_routes"] = "MaximumRoutes"
	fields["out_route_filters"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["out_route_filters"] = "OutRouteFilters"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_route_filtering", fields, reflect.TypeOf(BgpRouteFiltering{}), fieldNameMap, validators)
}

func BgpRoutingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ecmp"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ecmp"] = "Ecmp"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["graceful_restart"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["graceful_restart"] = "GracefulRestart"
	fields["graceful_restart_config"] = bindings.NewOptionalType(bindings.NewReferenceType(BgpGracefulRestartConfigBindingType))
	fieldNameMap["graceful_restart_config"] = "GracefulRestartConfig"
	fields["inter_sr_ibgp"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inter_sr_ibgp"] = "InterSrIbgp"
	fields["local_as_num"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_as_num"] = "LocalAsNum"
	fields["multipath_relax"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["multipath_relax"] = "MultipathRelax"
	fields["route_aggregations"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RouteAggregationEntryBindingType), reflect.TypeOf([]RouteAggregationEntry{})))
	fieldNameMap["route_aggregations"] = "RouteAggregations"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bgp_routing_config", fields, reflect.TypeOf(BgpRoutingConfig{}), fieldNameMap, validators)
}

func BinaryPacketDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["payload"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["payload"] = "Payload"
	fields["frame_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["frame_size"] = "FrameSize"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["routed"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["routed"] = "Routed"
	fields["transport_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_type"] = "TransportType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.binary_packet_data", fields, reflect.TypeOf(BinaryPacketData{}), fieldNameMap, validators)
}

func BridgeProfileConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["bridge_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["bridge_profile_path"] = "BridgeProfilePath"
	fields["uplink_teaming_policy_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uplink_teaming_policy_name"] = "UplinkTeamingPolicyName"
	fields["vlan_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["vlan_ids"] = "VlanIds"
	fields["vlan_transport_zone_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["vlan_transport_zone_path"] = "VlanTransportZonePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.bridge_profile_config", fields, reflect.TypeOf(BridgeProfileConfig{}), fieldNameMap, validators)
}

func ByodPolicyServiceInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["deployment_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["deployment_mode"] = "DeploymentMode"
	fields["partner_service_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["partner_service_name"] = "PartnerServiceName"
	fields["transport_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_type"] = "TransportType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.byod_policy_service_instance", fields, reflect.TypeOf(ByodPolicyServiceInstance{}), fieldNameMap, validators)
}

func ChildBfdProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["BfdProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(BfdProfileBindingType))
	fieldNameMap["BfdProfile"] = "BfdProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_bfd_profile", fields, reflect.TypeOf(ChildBfdProfile{}), fieldNameMap, validators)
}

func ChildBgpNeighborConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["BgpNeighborConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(BgpNeighborConfigBindingType))
	fieldNameMap["BgpNeighborConfig"] = "BgpNeighborConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_bgp_neighbor_config", fields, reflect.TypeOf(ChildBgpNeighborConfig{}), fieldNameMap, validators)
}

func ChildBgpRoutingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["BgpRoutingConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(BgpRoutingConfigBindingType))
	fieldNameMap["BgpRoutingConfig"] = "BgpRoutingConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_bgp_routing_config", fields, reflect.TypeOf(ChildBgpRoutingConfig{}), fieldNameMap, validators)
}

func ChildByodPolicyServiceInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ByodPolicyServiceInstance"] = bindings.NewOptionalType(bindings.NewReferenceType(ByodPolicyServiceInstanceBindingType))
	fieldNameMap["ByodPolicyServiceInstance"] = "ByodPolicyServiceInstance"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_byod_policy_service_instance", fields, reflect.TypeOf(ChildByodPolicyServiceInstance{}), fieldNameMap, validators)
}

func ChildCommunicationEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["CommunicationEntry"] = bindings.NewOptionalType(bindings.NewReferenceType(CommunicationEntryBindingType))
	fieldNameMap["CommunicationEntry"] = "CommunicationEntry"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_communication_entry", fields, reflect.TypeOf(ChildCommunicationEntry{}), fieldNameMap, validators)
}

func ChildCommunicationMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["CommunicationMap"] = bindings.NewOptionalType(bindings.NewReferenceType(CommunicationMapBindingType))
	fieldNameMap["CommunicationMap"] = "CommunicationMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_communication_map", fields, reflect.TypeOf(ChildCommunicationMap{}), fieldNameMap, validators)
}

func ChildCommunityListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["CommunityList"] = bindings.NewOptionalType(bindings.NewReferenceType(CommunityListBindingType))
	fieldNameMap["CommunityList"] = "CommunityList"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_community_list", fields, reflect.TypeOf(ChildCommunityList{}), fieldNameMap, validators)
}

func ChildComputeClusterIdfwConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ComputeClusterIdfwConfiguration"] = bindings.NewOptionalType(bindings.NewReferenceType(ComputeClusterIdfwConfigurationBindingType))
	fieldNameMap["ComputeClusterIdfwConfiguration"] = "ComputeClusterIdfwConfiguration"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_compute_cluster_idfw_configuration", fields, reflect.TypeOf(ChildComputeClusterIdfwConfiguration{}), fieldNameMap, validators)
}

func ChildConstraintBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Constraint"] = bindings.NewOptionalType(bindings.NewReferenceType(ConstraintBindingType))
	fieldNameMap["Constraint"] = "Constraint"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_constraint", fields, reflect.TypeOf(ChildConstraint{}), fieldNameMap, validators)
}

func ChildDeploymentZoneBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DeploymentZone"] = bindings.NewOptionalType(bindings.NewReferenceType(DeploymentZoneBindingType))
	fieldNameMap["DeploymentZone"] = "DeploymentZone"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_deployment_zone", fields, reflect.TypeOf(ChildDeploymentZone{}), fieldNameMap, validators)
}

func ChildDfwFirewallConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DfwFirewallConfiguration"] = bindings.NewOptionalType(bindings.NewReferenceType(DfwFirewallConfigurationBindingType))
	fieldNameMap["DfwFirewallConfiguration"] = "DfwFirewallConfiguration"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_dfw_firewall_configuration", fields, reflect.TypeOf(ChildDfwFirewallConfiguration{}), fieldNameMap, validators)
}

func ChildDhcpRelayConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DhcpRelayConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpRelayConfigBindingType))
	fieldNameMap["DhcpRelayConfig"] = "DhcpRelayConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_dhcp_relay_config", fields, reflect.TypeOf(ChildDhcpRelayConfig{}), fieldNameMap, validators)
}

func ChildDhcpServerConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DhcpServerConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpServerConfigBindingType))
	fieldNameMap["DhcpServerConfig"] = "DhcpServerConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_dhcp_server_config", fields, reflect.TypeOf(ChildDhcpServerConfig{}), fieldNameMap, validators)
}

func ChildDhcpStaticBindingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DhcpStaticBindingConfig"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(DhcpStaticBindingConfigBindingType),}, bindings.REST))
	fieldNameMap["DhcpStaticBindingConfig"] = "DhcpStaticBindingConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_dhcp_static_binding_config", fields, reflect.TypeOf(ChildDhcpStaticBindingConfig{}), fieldNameMap, validators)
}

func ChildDnsSecurityProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DnsSecurityProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(DnsSecurityProfileBindingType))
	fieldNameMap["DnsSecurityProfile"] = "DnsSecurityProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_dns_security_profile", fields, reflect.TypeOf(ChildDnsSecurityProfile{}), fieldNameMap, validators)
}

func ChildDnsSecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DnsSecurityProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(DnsSecurityProfileBindingMapBindingType))
	fieldNameMap["DnsSecurityProfileBindingMap"] = "DnsSecurityProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_dns_security_profile_binding_map", fields, reflect.TypeOf(ChildDnsSecurityProfileBindingMap{}), fieldNameMap, validators)
}

func ChildDomainBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Domain"] = bindings.NewOptionalType(bindings.NewReferenceType(DomainBindingType))
	fieldNameMap["Domain"] = "Domain"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_domain", fields, reflect.TypeOf(ChildDomain{}), fieldNameMap, validators)
}

func ChildDomainDeploymentMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["DomainDeploymentMap"] = bindings.NewOptionalType(bindings.NewReferenceType(DomainDeploymentMapBindingType))
	fieldNameMap["DomainDeploymentMap"] = "DomainDeploymentMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_domain_deployment_map", fields, reflect.TypeOf(ChildDomainDeploymentMap{}), fieldNameMap, validators)
}

func ChildEndpointPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["EndpointPolicy"] = bindings.NewOptionalType(bindings.NewReferenceType(EndpointPolicyBindingType))
	fieldNameMap["EndpointPolicy"] = "EndpointPolicy"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_endpoint_policy", fields, reflect.TypeOf(ChildEndpointPolicy{}), fieldNameMap, validators)
}

func ChildEndpointRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["EndpointRule"] = bindings.NewOptionalType(bindings.NewReferenceType(EndpointRuleBindingType))
	fieldNameMap["EndpointRule"] = "EndpointRule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_endpoint_rule", fields, reflect.TypeOf(ChildEndpointRule{}), fieldNameMap, validators)
}

func ChildEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["EnforcementPoint"] = bindings.NewOptionalType(bindings.NewReferenceType(EnforcementPointBindingType))
	fieldNameMap["EnforcementPoint"] = "EnforcementPoint"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_enforcement_point", fields, reflect.TypeOf(ChildEnforcementPoint{}), fieldNameMap, validators)
}

func ChildEvpnConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["EvpnConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(EvpnConfigBindingType))
	fieldNameMap["EvpnConfig"] = "EvpnConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_evpn_config", fields, reflect.TypeOf(ChildEvpnConfig{}), fieldNameMap, validators)
}

func ChildEvpnTunnelEndpointConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["EvpnTunnelEndpointConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(EvpnTunnelEndpointConfigBindingType))
	fieldNameMap["EvpnTunnelEndpointConfig"] = "EvpnTunnelEndpointConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_evpn_tunnel_endpoint_config", fields, reflect.TypeOf(ChildEvpnTunnelEndpointConfig{}), fieldNameMap, validators)
}

func ChildFirewallIdentityStoreBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["FirewallIdentityStore"] = bindings.NewOptionalType(bindings.NewReferenceType(FirewallIdentityStoreBindingType))
	fieldNameMap["FirewallIdentityStore"] = "FirewallIdentityStore"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_firewall_identity_store", fields, reflect.TypeOf(ChildFirewallIdentityStore{}), fieldNameMap, validators)
}

func ChildFloodProtectionProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["FloodProtectionProfile"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(FloodProtectionProfileBindingType),}, bindings.REST))
	fieldNameMap["FloodProtectionProfile"] = "FloodProtectionProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_flood_protection_profile", fields, reflect.TypeOf(ChildFloodProtectionProfile{}), fieldNameMap, validators)
}

func ChildFloodProtectionProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["FloodProtectionProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(FloodProtectionProfileBindingMapBindingType))
	fieldNameMap["FloodProtectionProfileBindingMap"] = "FloodProtectionProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_flood_protection_profile_binding_map", fields, reflect.TypeOf(ChildFloodProtectionProfileBindingMap{}), fieldNameMap, validators)
}

func ChildForwardingPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ForwardingPolicy"] = bindings.NewOptionalType(bindings.NewReferenceType(ForwardingPolicyBindingType))
	fieldNameMap["ForwardingPolicy"] = "ForwardingPolicy"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_forwarding_policy", fields, reflect.TypeOf(ChildForwardingPolicy{}), fieldNameMap, validators)
}

func ChildForwardingRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ForwardingRule"] = bindings.NewOptionalType(bindings.NewReferenceType(ForwardingRuleBindingType))
	fieldNameMap["ForwardingRule"] = "ForwardingRule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_forwarding_rule", fields, reflect.TypeOf(ChildForwardingRule{}), fieldNameMap, validators)
}

func ChildGatewayPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["GatewayPolicy"] = bindings.NewOptionalType(bindings.NewReferenceType(GatewayPolicyBindingType))
	fieldNameMap["GatewayPolicy"] = "GatewayPolicy"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_gateway_policy", fields, reflect.TypeOf(ChildGatewayPolicy{}), fieldNameMap, validators)
}

func ChildGatewayQosProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["QosProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(GatewayQosProfileBindingType))
	fieldNameMap["QosProfile"] = "QosProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_gateway_qos_profile", fields, reflect.TypeOf(ChildGatewayQosProfile{}), fieldNameMap, validators)
}

func ChildGlobalConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["GlobalConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(GlobalConfigBindingType))
	fieldNameMap["GlobalConfig"] = "GlobalConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_global_config", fields, reflect.TypeOf(ChildGlobalConfig{}), fieldNameMap, validators)
}

func ChildGlobalManagerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["GlobalManager"] = bindings.NewOptionalType(bindings.NewReferenceType(GlobalManagerBindingType))
	fieldNameMap["GlobalManager"] = "GlobalManager"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_global_manager", fields, reflect.TypeOf(ChildGlobalManager{}), fieldNameMap, validators)
}

func ChildGroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Group"] = bindings.NewOptionalType(bindings.NewReferenceType(GroupBindingType))
	fieldNameMap["Group"] = "Group"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_group", fields, reflect.TypeOf(ChildGroup{}), fieldNameMap, validators)
}

func ChildGroupDiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["GroupDiscoveryProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(GroupDiscoveryProfileBindingMapBindingType))
	fieldNameMap["GroupDiscoveryProfileBindingMap"] = "GroupDiscoveryProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_group_discovery_profile_binding_map", fields, reflect.TypeOf(ChildGroupDiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func ChildGroupMonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["GroupMonitoringProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(GroupMonitoringProfileBindingMapBindingType))
	fieldNameMap["GroupMonitoringProfileBindingMap"] = "GroupMonitoringProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_group_monitoring_profile_binding_map", fields, reflect.TypeOf(ChildGroupMonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func ChildIPDiscoveryProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPDiscoveryProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPDiscoveryProfileBindingType))
	fieldNameMap["IPDiscoveryProfile"] = "IpDiscoveryProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_discovery_profile", fields, reflect.TypeOf(ChildIPDiscoveryProfile{}), fieldNameMap, validators)
}

func ChildIPFIXDFWCollectorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPFIXDFWCollectorProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPFIXDFWCollectorProfileBindingType))
	fieldNameMap["IPFIXDFWCollectorProfile"] = "IPFIXDFWCollectorProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IPFIXDFW_collector_profile", fields, reflect.TypeOf(ChildIPFIXDFWCollectorProfile{}), fieldNameMap, validators)
}

func ChildIPFIXDFWProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPFIXDFWProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPFIXDFWProfileBindingType))
	fieldNameMap["IPFIXDFWProfile"] = "IPFIXDFWProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IPFIXDFW_profile", fields, reflect.TypeOf(ChildIPFIXDFWProfile{}), fieldNameMap, validators)
}

func ChildIPFIXL2CollectorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPFIXL2CollectorProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPFIXL2CollectorProfileBindingType))
	fieldNameMap["IPFIXL2CollectorProfile"] = "IPFIXL2CollectorProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IPFIX_l2_collector_profile", fields, reflect.TypeOf(ChildIPFIXL2CollectorProfile{}), fieldNameMap, validators)
}

func ChildIPFIXL2ProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPFIXL2Profile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPFIXL2ProfileBindingType))
	fieldNameMap["IPFIXL2Profile"] = "IPFIXL2Profile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IPFIX_l2_profile", fields, reflect.TypeOf(ChildIPFIXL2Profile{}), fieldNameMap, validators)
}

func ChildIPSecVpnDpdProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPSecVpnDpdProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPSecVpnDpdProfileBindingType))
	fieldNameMap["IPSecVpnDpdProfile"] = "IpSecVpnDpdProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_sec_vpn_dpd_profile", fields, reflect.TypeOf(ChildIPSecVpnDpdProfile{}), fieldNameMap, validators)
}

func ChildIPSecVpnIkeProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPSecVpnIkeProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPSecVpnIkeProfileBindingType))
	fieldNameMap["IPSecVpnIkeProfile"] = "IpSecVpnIkeProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_sec_vpn_ike_profile", fields, reflect.TypeOf(ChildIPSecVpnIkeProfile{}), fieldNameMap, validators)
}

func ChildIPSecVpnLocalEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPSecVpnLocalEndpoint"] = bindings.NewOptionalType(bindings.NewReferenceType(IPSecVpnLocalEndpointBindingType))
	fieldNameMap["IPSecVpnLocalEndpoint"] = "IpSecVpnLocalEndpoint"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_sec_vpn_local_endpoint", fields, reflect.TypeOf(ChildIPSecVpnLocalEndpoint{}), fieldNameMap, validators)
}

func ChildIPSecVpnServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPSecVpnService"] = bindings.NewOptionalType(bindings.NewReferenceType(IPSecVpnServiceBindingType))
	fieldNameMap["IPSecVpnService"] = "IpSecVpnService"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_sec_vpn_service", fields, reflect.TypeOf(ChildIPSecVpnService{}), fieldNameMap, validators)
}

func ChildIPSecVpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPSecVpnSession"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(IPSecVpnSessionBindingType),}, bindings.REST))
	fieldNameMap["IPSecVpnSession"] = "IpSecVpnSession"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_sec_vpn_session", fields, reflect.TypeOf(ChildIPSecVpnSession{}), fieldNameMap, validators)
}

func ChildIPSecVpnTunnelProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IPSecVpnTunnelProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IPSecVpnTunnelProfileBindingType))
	fieldNameMap["IPSecVpnTunnelProfile"] = "IpSecVpnTunnelProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_IP_sec_vpn_tunnel_profile", fields, reflect.TypeOf(ChildIPSecVpnTunnelProfile{}), fieldNameMap, validators)
}

func ChildIdsClusterConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IdsClusterConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(IdsClusterConfigBindingType))
	fieldNameMap["IdsClusterConfig"] = "IdsClusterConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ids_cluster_config", fields, reflect.TypeOf(ChildIdsClusterConfig{}), fieldNameMap, validators)
}

func ChildIdsProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IdsProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(IdsProfileBindingType))
	fieldNameMap["IdsProfile"] = "IdsProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ids_profile", fields, reflect.TypeOf(ChildIdsProfile{}), fieldNameMap, validators)
}

func ChildIdsRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IdsRule"] = bindings.NewOptionalType(bindings.NewReferenceType(IdsRuleBindingType))
	fieldNameMap["IdsRule"] = "IdsRule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ids_rule", fields, reflect.TypeOf(ChildIdsRule{}), fieldNameMap, validators)
}

func ChildIdsSecurityPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IdsSecurityPolicy"] = bindings.NewOptionalType(bindings.NewReferenceType(IdsSecurityPolicyBindingType))
	fieldNameMap["IdsSecurityPolicy"] = "IdsSecurityPolicy"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ids_security_policy", fields, reflect.TypeOf(ChildIdsSecurityPolicy{}), fieldNameMap, validators)
}

func ChildIdsSignatureBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IdsSignature"] = bindings.NewOptionalType(bindings.NewReferenceType(IdsSignatureBindingType))
	fieldNameMap["IdsSignature"] = "IdsSignature"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ids_signature", fields, reflect.TypeOf(ChildIdsSignature{}), fieldNameMap, validators)
}

func ChildIdsStandaloneHostConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IdsStandaloneHostConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(IdsStandaloneHostConfigBindingType))
	fieldNameMap["IdsStandaloneHostConfig"] = "IdsStandaloneHostConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ids_standalone_host_config", fields, reflect.TypeOf(ChildIdsStandaloneHostConfig{}), fieldNameMap, validators)
}

func ChildIpAddressAllocationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IpAddressAllocation"] = bindings.NewOptionalType(bindings.NewReferenceType(IpAddressAllocationBindingType))
	fieldNameMap["IpAddressAllocation"] = "IpAddressAllocation"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ip_address_allocation", fields, reflect.TypeOf(ChildIpAddressAllocation{}), fieldNameMap, validators)
}

func ChildIpAddressBlockBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IpAddressBlock"] = bindings.NewOptionalType(bindings.NewReferenceType(IpAddressBlockBindingType))
	fieldNameMap["IpAddressBlock"] = "IpAddressBlock"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ip_address_block", fields, reflect.TypeOf(ChildIpAddressBlock{}), fieldNameMap, validators)
}

func ChildIpAddressPoolBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IpAddressPool"] = bindings.NewOptionalType(bindings.NewReferenceType(IpAddressPoolBindingType))
	fieldNameMap["IpAddressPool"] = "IpAddressPool"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ip_address_pool", fields, reflect.TypeOf(ChildIpAddressPool{}), fieldNameMap, validators)
}

func ChildIpAddressPoolSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["IpAddressPoolSubnet"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(IpAddressPoolSubnetBindingType),}, bindings.REST))
	fieldNameMap["IpAddressPoolSubnet"] = "IpAddressPoolSubnet"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ip_address_pool_subnet", fields, reflect.TypeOf(ChildIpAddressPoolSubnet{}), fieldNameMap, validators)
}

func ChildIpv6DadProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Ipv6DadProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(Ipv6DadProfileBindingType))
	fieldNameMap["Ipv6DadProfile"] = "Ipv6DadProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ipv6_dad_profile", fields, reflect.TypeOf(ChildIpv6DadProfile{}), fieldNameMap, validators)
}

func ChildIpv6NdraProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Ipv6NdraProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(Ipv6NdraProfileBindingType))
	fieldNameMap["Ipv6NdraProfile"] = "Ipv6NdraProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ipv6_ndra_profile", fields, reflect.TypeOf(ChildIpv6NdraProfile{}), fieldNameMap, validators)
}

func ChildL2BridgeEndpointProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L2BridgeEndpointProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(L2BridgeEndpointProfileBindingType))
	fieldNameMap["L2BridgeEndpointProfile"] = "L2BridgeEndpointProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l2_bridge_endpoint_profile", fields, reflect.TypeOf(ChildL2BridgeEndpointProfile{}), fieldNameMap, validators)
}

func ChildL2VPNServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L2VPNService"] = bindings.NewOptionalType(bindings.NewReferenceType(L2VPNServiceBindingType))
	fieldNameMap["L2VPNService"] = "L2VPNService"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l2_VPN_service", fields, reflect.TypeOf(ChildL2VPNService{}), fieldNameMap, validators)
}

func ChildL2VPNSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L2VPNSession"] = bindings.NewOptionalType(bindings.NewReferenceType(L2VPNSessionBindingType))
	fieldNameMap["L2VPNSession"] = "L2VPNSession"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l2_VPN_session", fields, reflect.TypeOf(ChildL2VPNSession{}), fieldNameMap, validators)
}

func ChildL2VpnBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L2Vpn"] = bindings.NewOptionalType(bindings.NewReferenceType(L2VpnBindingType))
	fieldNameMap["L2Vpn"] = "L2Vpn"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l2_vpn", fields, reflect.TypeOf(ChildL2Vpn{}), fieldNameMap, validators)
}

func ChildL2VpnContextBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L2VpnContext"] = bindings.NewOptionalType(bindings.NewReferenceType(L2VpnContextBindingType))
	fieldNameMap["L2VpnContext"] = "L2VpnContext"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l2_vpn_context", fields, reflect.TypeOf(ChildL2VpnContext{}), fieldNameMap, validators)
}

func ChildL3VpnBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L3Vpn"] = bindings.NewOptionalType(bindings.NewReferenceType(L3VpnBindingType))
	fieldNameMap["L3Vpn"] = "L3Vpn"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l3_vpn", fields, reflect.TypeOf(ChildL3Vpn{}), fieldNameMap, validators)
}

func ChildL3VpnContextBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["L3VpnContext"] = bindings.NewOptionalType(bindings.NewReferenceType(L3VpnContextBindingType))
	fieldNameMap["L3VpnContext"] = "L3VpnContext"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_l3_vpn_context", fields, reflect.TypeOf(ChildL3VpnContext{}), fieldNameMap, validators)
}

func ChildLBAppProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBAppProfile"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBAppProfileBindingType),}, bindings.REST))
	fieldNameMap["LBAppProfile"] = "LbAppProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_app_profile", fields, reflect.TypeOf(ChildLBAppProfile{}), fieldNameMap, validators)
}

func ChildLBClientSslProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBClientSslProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(LBClientSslProfileBindingType))
	fieldNameMap["LBClientSslProfile"] = "LbClientSslProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_client_ssl_profile", fields, reflect.TypeOf(ChildLBClientSslProfile{}), fieldNameMap, validators)
}

func ChildLBMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBMonitorProfile"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBMonitorProfileBindingType),}, bindings.REST))
	fieldNameMap["LBMonitorProfile"] = "LbMonitorProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_monitor_profile", fields, reflect.TypeOf(ChildLBMonitorProfile{}), fieldNameMap, validators)
}

func ChildLBPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBPersistenceProfile"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBPersistenceProfileBindingType),}, bindings.REST))
	fieldNameMap["LBPersistenceProfile"] = "LbPersistenceProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_persistence_profile", fields, reflect.TypeOf(ChildLBPersistenceProfile{}), fieldNameMap, validators)
}

func ChildLBPoolBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBPool"] = bindings.NewOptionalType(bindings.NewReferenceType(LBPoolBindingType))
	fieldNameMap["LBPool"] = "LbPool"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_pool", fields, reflect.TypeOf(ChildLBPool{}), fieldNameMap, validators)
}

func ChildLBServerSslProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBServerSslProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(LBServerSslProfileBindingType))
	fieldNameMap["LBServerSslProfile"] = "LbServerSslProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_server_ssl_profile", fields, reflect.TypeOf(ChildLBServerSslProfile{}), fieldNameMap, validators)
}

func ChildLBServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBService"] = bindings.NewOptionalType(bindings.NewReferenceType(LBServiceBindingType))
	fieldNameMap["LBService"] = "LbService"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_service", fields, reflect.TypeOf(ChildLBService{}), fieldNameMap, validators)
}

func ChildLBVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LBVirtualServer"] = bindings.NewOptionalType(bindings.NewReferenceType(LBVirtualServerBindingType))
	fieldNameMap["LBVirtualServer"] = "LbVirtualServer"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_LB_virtual_server", fields, reflect.TypeOf(ChildLBVirtualServer{}), fieldNameMap, validators)
}

func ChildLocaleServicesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["LocaleServices"] = bindings.NewOptionalType(bindings.NewReferenceType(LocaleServicesBindingType))
	fieldNameMap["LocaleServices"] = "LocaleServices"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_locale_services", fields, reflect.TypeOf(ChildLocaleServices{}), fieldNameMap, validators)
}

func ChildMacDiscoveryProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["MacDiscoveryProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(MacDiscoveryProfileBindingType))
	fieldNameMap["MacDiscoveryProfile"] = "MacDiscoveryProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_mac_discovery_profile", fields, reflect.TypeOf(ChildMacDiscoveryProfile{}), fieldNameMap, validators)
}

func ChildMetadataProxyConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["MetadataProxyConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(MetadataProxyConfigBindingType))
	fieldNameMap["MetadataProxyConfig"] = "MetadataProxyConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_metadata_proxy_config", fields, reflect.TypeOf(ChildMetadataProxyConfig{}), fieldNameMap, validators)
}

func ChildPolicyConfigResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_config_resource", fields, reflect.TypeOf(ChildPolicyConfigResource{}), fieldNameMap, validators)
}

func ChildPolicyContextProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyContextProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyContextProfileBindingType))
	fieldNameMap["PolicyContextProfile"] = "PolicyContextProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_context_profile", fields, reflect.TypeOf(ChildPolicyContextProfile{}), fieldNameMap, validators)
}

func ChildPolicyDnsForwarderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyDnsForwarder"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyDnsForwarderBindingType))
	fieldNameMap["PolicyDnsForwarder"] = "PolicyDnsForwarder"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_dns_forwarder", fields, reflect.TypeOf(ChildPolicyDnsForwarder{}), fieldNameMap, validators)
}

func ChildPolicyDnsForwarderZoneBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyDnsForwarderZone"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyDnsForwarderZoneBindingType))
	fieldNameMap["PolicyDnsForwarderZone"] = "PolicyDnsForwarderZone"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_dns_forwarder_zone", fields, reflect.TypeOf(ChildPolicyDnsForwarderZone{}), fieldNameMap, validators)
}

func ChildPolicyEdgeClusterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyEdgeCluster"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyEdgeClusterBindingType))
	fieldNameMap["PolicyEdgeCluster"] = "PolicyEdgeCluster"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_edge_cluster", fields, reflect.TypeOf(ChildPolicyEdgeCluster{}), fieldNameMap, validators)
}

func ChildPolicyEdgeNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyEdgeNode"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyEdgeNodeBindingType))
	fieldNameMap["PolicyEdgeNode"] = "PolicyEdgeNode"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_edge_node", fields, reflect.TypeOf(ChildPolicyEdgeNode{}), fieldNameMap, validators)
}

func ChildPolicyExcludeListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyExcludeList"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyExcludeListBindingType))
	fieldNameMap["PolicyExcludeList"] = "PolicyExcludeList"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_exclude_list", fields, reflect.TypeOf(ChildPolicyExcludeList{}), fieldNameMap, validators)
}

func ChildPolicyFirewallCPUMemThresholdsProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyFirewallCPUMemThresholdsProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFirewallCPUMemThresholdsProfileBindingMapBindingType))
	fieldNameMap["PolicyFirewallCPUMemThresholdsProfileBindingMap"] = "PolicyFirewallCPUMemThresholdsProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_firewall_CPU_mem_thresholds_profile_binding_map", fields, reflect.TypeOf(ChildPolicyFirewallCPUMemThresholdsProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPolicyFirewallCpuMemThresholdsProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyFirewallCpuMemThresholdsProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFirewallCpuMemThresholdsProfileBindingType))
	fieldNameMap["PolicyFirewallCpuMemThresholdsProfile"] = "PolicyFirewallCpuMemThresholdsProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_firewall_cpu_mem_thresholds_profile", fields, reflect.TypeOf(ChildPolicyFirewallCpuMemThresholdsProfile{}), fieldNameMap, validators)
}

func ChildPolicyFirewallFloodProtectionProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyFirewallFloodProtectionProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFirewallFloodProtectionProfileBindingMapBindingType))
	fieldNameMap["PolicyFirewallFloodProtectionProfileBindingMap"] = "PolicyFirewallFloodProtectionProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_firewall_flood_protection_profile_binding_map", fields, reflect.TypeOf(ChildPolicyFirewallFloodProtectionProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPolicyFirewallSchedulerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyFirewallScheduler"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFirewallSchedulerBindingType))
	fieldNameMap["PolicyFirewallScheduler"] = "PolicyFirewallScheduler"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_firewall_scheduler", fields, reflect.TypeOf(ChildPolicyFirewallScheduler{}), fieldNameMap, validators)
}

func ChildPolicyFirewallSessionTimerProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyFirewallSessionTimerProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFirewallSessionTimerProfileBindingType))
	fieldNameMap["PolicyFirewallSessionTimerProfile"] = "PolicyFirewallSessionTimerProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_firewall_session_timer_profile", fields, reflect.TypeOf(ChildPolicyFirewallSessionTimerProfile{}), fieldNameMap, validators)
}

func ChildPolicyFirewallSessionTimerProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyFirewallSessionTimerProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFirewallSessionTimerProfileBindingMapBindingType))
	fieldNameMap["PolicyFirewallSessionTimerProfileBindingMap"] = "PolicyFirewallSessionTimerProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_firewall_session_timer_profile_binding_map", fields, reflect.TypeOf(ChildPolicyFirewallSessionTimerProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPolicyIgmpProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyIgmpProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyIgmpProfileBindingType))
	fieldNameMap["PolicyIgmpProfile"] = "PolicyIgmpProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_igmp_profile", fields, reflect.TypeOf(ChildPolicyIgmpProfile{}), fieldNameMap, validators)
}

func ChildPolicyLabelBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyLabel"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyLabelBindingType))
	fieldNameMap["PolicyLabel"] = "PolicyLabel"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_label", fields, reflect.TypeOf(ChildPolicyLabel{}), fieldNameMap, validators)
}

func ChildPolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyLbMonitorProfile"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(PolicyLbMonitorProfileBindingType),}, bindings.REST))
	fieldNameMap["PolicyLbMonitorProfile"] = "PolicyLbMonitorProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_lb_monitor_profile", fields, reflect.TypeOf(ChildPolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func ChildPolicyLbPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyLbPersistenceProfile"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(PolicyLbPersistenceProfileBindingType),}, bindings.REST))
	fieldNameMap["PolicyLbPersistenceProfile"] = "PolicyLbPersistenceProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_lb_persistence_profile", fields, reflect.TypeOf(ChildPolicyLbPersistenceProfile{}), fieldNameMap, validators)
}

func ChildPolicyLbPoolAccessBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyLbPoolAccess"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyLbPoolAccessBindingType))
	fieldNameMap["PolicyLbPoolAccess"] = "PolicyLbPoolAccess"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_lb_pool_access", fields, reflect.TypeOf(ChildPolicyLbPoolAccess{}), fieldNameMap, validators)
}

func ChildPolicyLbRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyLbRule"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyLbRuleBindingType))
	fieldNameMap["PolicyLbRule"] = "PolicyLbRule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_lb_rule", fields, reflect.TypeOf(ChildPolicyLbRule{}), fieldNameMap, validators)
}

func ChildPolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyLbVirtualServer"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(PolicyLbVirtualServerBindingType),}, bindings.REST))
	fieldNameMap["PolicyLbVirtualServer"] = "PolicyLbVirtualServer"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_lb_virtual_server", fields, reflect.TypeOf(ChildPolicyLbVirtualServer{}), fieldNameMap, validators)
}

func ChildPolicyMulticastConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyMulticastConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyMulticastConfigBindingType))
	fieldNameMap["PolicyMulticastConfig"] = "PolicyMulticastConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_multicast_config", fields, reflect.TypeOf(ChildPolicyMulticastConfig{}), fieldNameMap, validators)
}

func ChildPolicyNatBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyNat"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyNatBindingType))
	fieldNameMap["PolicyNat"] = "PolicyNat"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_nat", fields, reflect.TypeOf(ChildPolicyNat{}), fieldNameMap, validators)
}

func ChildPolicyNatRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyNatRule"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyNatRuleBindingType))
	fieldNameMap["PolicyNatRule"] = "PolicyNatRule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_nat_rule", fields, reflect.TypeOf(ChildPolicyNatRule{}), fieldNameMap, validators)
}

func ChildPolicyPimProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyPimProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyPimProfileBindingType))
	fieldNameMap["PolicyPimProfile"] = "PolicyPimProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_pim_profile", fields, reflect.TypeOf(ChildPolicyPimProfile{}), fieldNameMap, validators)
}

func ChildPolicyServiceChainBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyServiceChain"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyServiceChainBindingType))
	fieldNameMap["PolicyServiceChain"] = "PolicyServiceChain"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_service_chain", fields, reflect.TypeOf(ChildPolicyServiceChain{}), fieldNameMap, validators)
}

func ChildPolicyServiceInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyServiceInstance"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyServiceInstanceBindingType))
	fieldNameMap["PolicyServiceInstance"] = "PolicyServiceInstance"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_service_instance", fields, reflect.TypeOf(ChildPolicyServiceInstance{}), fieldNameMap, validators)
}

func ChildPolicyServiceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyServiceProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyServiceProfileBindingType))
	fieldNameMap["PolicyServiceProfile"] = "PolicyServiceProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_service_profile", fields, reflect.TypeOf(ChildPolicyServiceProfile{}), fieldNameMap, validators)
}

func ChildPolicyTransportZoneBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyTransportZone"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyTransportZoneBindingType))
	fieldNameMap["PolicyTransportZone"] = "PolicyTransportZone"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_transport_zone", fields, reflect.TypeOf(ChildPolicyTransportZone{}), fieldNameMap, validators)
}

func ChildPolicyUrlCategorizationConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PolicyUrlCategorizationConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyUrlCategorizationConfigBindingType))
	fieldNameMap["PolicyUrlCategorizationConfig"] = "PolicyUrlCategorizationConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_policy_url_categorization_config", fields, reflect.TypeOf(ChildPolicyUrlCategorizationConfig{}), fieldNameMap, validators)
}

func ChildPortDiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PortDiscoveryProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PortDiscoveryProfileBindingMapBindingType))
	fieldNameMap["PortDiscoveryProfileBindingMap"] = "PortDiscoveryProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_port_discovery_profile_binding_map", fields, reflect.TypeOf(ChildPortDiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPortMirroringProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PortMirroringProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(PortMirroringProfileBindingType))
	fieldNameMap["PortMirroringProfile"] = "PortMirroringProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_port_mirroring_profile", fields, reflect.TypeOf(ChildPortMirroringProfile{}), fieldNameMap, validators)
}

func ChildPortMonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PortMonitoringProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PortMonitoringProfileBindingMapBindingType))
	fieldNameMap["PortMonitoringProfileBindingMap"] = "PortMonitoringProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_port_monitoring_profile_binding_map", fields, reflect.TypeOf(ChildPortMonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPortQosProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PortQoSProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PortQosProfileBindingMapBindingType))
	fieldNameMap["PortQoSProfileBindingMap"] = "PortQosProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_port_qos_profile_binding_map", fields, reflect.TypeOf(ChildPortQosProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPortSecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PortSecurityProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(PortSecurityProfileBindingMapBindingType))
	fieldNameMap["PortSecurityProfileBindingMap"] = "PortSecurityProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_port_security_profile_binding_map", fields, reflect.TypeOf(ChildPortSecurityProfileBindingMap{}), fieldNameMap, validators)
}

func ChildPrefixListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["PrefixList"] = bindings.NewOptionalType(bindings.NewReferenceType(PrefixListBindingType))
	fieldNameMap["PrefixList"] = "PrefixList"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_prefix_list", fields, reflect.TypeOf(ChildPrefixList{}), fieldNameMap, validators)
}

func ChildQosProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["QoSProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(QosProfileBindingType))
	fieldNameMap["QoSProfile"] = "QosProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_qos_profile", fields, reflect.TypeOf(ChildQosProfile{}), fieldNameMap, validators)
}

func ChildReactionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Reaction"] = bindings.NewOptionalType(bindings.NewReferenceType(ReactionBindingType))
	fieldNameMap["Reaction"] = "Reaction"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_reaction", fields, reflect.TypeOf(ChildReaction{}), fieldNameMap, validators)
}

func ChildRedirectionPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["RedirectionPolicy"] = bindings.NewOptionalType(bindings.NewReferenceType(RedirectionPolicyBindingType))
	fieldNameMap["RedirectionPolicy"] = "RedirectionPolicy"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_redirection_policy", fields, reflect.TypeOf(ChildRedirectionPolicy{}), fieldNameMap, validators)
}

func ChildRedirectionRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["RedirectionRule"] = bindings.NewOptionalType(bindings.NewReferenceType(RedirectionRuleBindingType))
	fieldNameMap["RedirectionRule"] = "RedirectionRule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_redirection_rule", fields, reflect.TypeOf(ChildRedirectionRule{}), fieldNameMap, validators)
}

func ChildResourceReferenceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["target_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_type"] = "TargetType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_resource_reference", fields, reflect.TypeOf(ChildResourceReference{}), fieldNameMap, validators)
}

func ChildRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Rule"] = bindings.NewOptionalType(bindings.NewReferenceType(RuleBindingType))
	fieldNameMap["Rule"] = "Rule"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_rule", fields, reflect.TypeOf(ChildRule{}), fieldNameMap, validators)
}

func ChildSecurityPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SecurityPolicy"] = bindings.NewOptionalType(bindings.NewReferenceType(SecurityPolicyBindingType))
	fieldNameMap["SecurityPolicy"] = "SecurityPolicy"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_security_policy", fields, reflect.TypeOf(ChildSecurityPolicy{}), fieldNameMap, validators)
}

func ChildSegmentBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Segment"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentBindingType))
	fieldNameMap["Segment"] = "Segment"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment", fields, reflect.TypeOf(ChildSegment{}), fieldNameMap, validators)
}

func ChildSegmentDiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SegmentDiscoveryProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentDiscoveryProfileBindingMapBindingType))
	fieldNameMap["SegmentDiscoveryProfileBindingMap"] = "SegmentDiscoveryProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment_discovery_profile_binding_map", fields, reflect.TypeOf(ChildSegmentDiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func ChildSegmentMonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SegmentMonitoringProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentMonitoringProfileBindingMapBindingType))
	fieldNameMap["SegmentMonitoringProfileBindingMap"] = "SegmentMonitoringProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment_monitoring_profile_binding_map", fields, reflect.TypeOf(ChildSegmentMonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func ChildSegmentPortBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SegmentPort"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentPortBindingType))
	fieldNameMap["SegmentPort"] = "SegmentPort"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment_port", fields, reflect.TypeOf(ChildSegmentPort{}), fieldNameMap, validators)
}

func ChildSegmentQosProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SegmentQoSProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentQosProfileBindingMapBindingType))
	fieldNameMap["SegmentQoSProfileBindingMap"] = "SegmentQosProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment_qos_profile_binding_map", fields, reflect.TypeOf(ChildSegmentQosProfileBindingMap{}), fieldNameMap, validators)
}

func ChildSegmentSecurityProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SegmentSecurityProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentSecurityProfileBindingType))
	fieldNameMap["SegmentSecurityProfile"] = "SegmentSecurityProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment_security_profile", fields, reflect.TypeOf(ChildSegmentSecurityProfile{}), fieldNameMap, validators)
}

func ChildSegmentSecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SegmentSecurityProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentSecurityProfileBindingMapBindingType))
	fieldNameMap["SegmentSecurityProfileBindingMap"] = "SegmentSecurityProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_segment_security_profile_binding_map", fields, reflect.TypeOf(ChildSegmentSecurityProfileBindingMap{}), fieldNameMap, validators)
}

func ChildServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Service"] = bindings.NewOptionalType(bindings.NewReferenceType(ServiceBindingType))
	fieldNameMap["Service"] = "Service"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_service", fields, reflect.TypeOf(ChildService{}), fieldNameMap, validators)
}

func ChildServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Service"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST))
	fieldNameMap["Service"] = "Service"
	fields["ServiceEntry"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST))
	fieldNameMap["ServiceEntry"] = "ServiceEntry"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_service_entry", fields, reflect.TypeOf(ChildServiceEntry{}), fieldNameMap, validators)
}

func ChildServiceInstanceEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ServiceInstanceEndpoint"] = bindings.NewOptionalType(bindings.NewReferenceType(ServiceInstanceEndpointBindingType))
	fieldNameMap["ServiceInstanceEndpoint"] = "ServiceInstanceEndpoint"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_service_instance_endpoint", fields, reflect.TypeOf(ChildServiceInstanceEndpoint{}), fieldNameMap, validators)
}

func ChildServiceInterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ServiceInterface"] = bindings.NewOptionalType(bindings.NewReferenceType(ServiceInterfaceBindingType))
	fieldNameMap["ServiceInterface"] = "ServiceInterface"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_service_interface", fields, reflect.TypeOf(ChildServiceInterface{}), fieldNameMap, validators)
}

func ChildServiceReferenceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ServiceReference"] = bindings.NewOptionalType(bindings.NewReferenceType(ServiceReferenceBindingType))
	fieldNameMap["ServiceReference"] = "ServiceReference"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_service_reference", fields, reflect.TypeOf(ChildServiceReference{}), fieldNameMap, validators)
}

func ChildServiceSegmentBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ServiceSegment"] = bindings.NewOptionalType(bindings.NewReferenceType(ServiceSegmentBindingType))
	fieldNameMap["ServiceSegment"] = "ServiceSegment"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_service_segment", fields, reflect.TypeOf(ChildServiceSegment{}), fieldNameMap, validators)
}

func ChildSessionTimerProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SessionTimerProfileBindingMap"] = bindings.NewOptionalType(bindings.NewReferenceType(SessionTimerProfileBindingMapBindingType))
	fieldNameMap["SessionTimerProfileBindingMap"] = "SessionTimerProfileBindingMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_session_timer_profile_binding_map", fields, reflect.TypeOf(ChildSessionTimerProfileBindingMap{}), fieldNameMap, validators)
}

func ChildSiteBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Site"] = bindings.NewOptionalType(bindings.NewReferenceType(SiteBindingType))
	fieldNameMap["Site"] = "Site"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_site", fields, reflect.TypeOf(ChildSite{}), fieldNameMap, validators)
}

func ChildSpoofGuardProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SpoofGuardProfile"] = bindings.NewOptionalType(bindings.NewReferenceType(SpoofGuardProfileBindingType))
	fieldNameMap["SpoofGuardProfile"] = "SpoofGuardProfile"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_spoof_guard_profile", fields, reflect.TypeOf(ChildSpoofGuardProfile{}), fieldNameMap, validators)
}

func ChildSslTrustObjectDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["SslTrustObjectData"] = bindings.NewOptionalType(bindings.NewReferenceType(SslTrustObjectDataBindingType))
	fieldNameMap["SslTrustObjectData"] = "SslTrustObjectData"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_ssl_trust_object_data", fields, reflect.TypeOf(ChildSslTrustObjectData{}), fieldNameMap, validators)
}

func ChildStandaloneHostIdfwConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["StandaloneHostIdfwConfiguration"] = bindings.NewOptionalType(bindings.NewReferenceType(StandaloneHostIdfwConfigurationBindingType))
	fieldNameMap["StandaloneHostIdfwConfiguration"] = "StandaloneHostIdfwConfiguration"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_standalone_host_idfw_configuration", fields, reflect.TypeOf(ChildStandaloneHostIdfwConfiguration{}), fieldNameMap, validators)
}

func ChildStaticARPConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["StaticARPConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(StaticARPConfigBindingType))
	fieldNameMap["StaticARPConfig"] = "StaticARPConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_static_ARP_config", fields, reflect.TypeOf(ChildStaticARPConfig{}), fieldNameMap, validators)
}

func ChildStaticRouteBfdPeerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["BfdPeer"] = bindings.NewOptionalType(bindings.NewReferenceType(StaticRouteBfdPeerBindingType))
	fieldNameMap["BfdPeer"] = "BfdPeer"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_static_route_bfd_peer", fields, reflect.TypeOf(ChildStaticRouteBfdPeer{}), fieldNameMap, validators)
}

func ChildStaticRoutesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["StaticRoutes"] = bindings.NewOptionalType(bindings.NewReferenceType(StaticRoutesBindingType))
	fieldNameMap["StaticRoutes"] = "StaticRoutes"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_static_routes", fields, reflect.TypeOf(ChildStaticRoutes{}), fieldNameMap, validators)
}

func ChildTier0BindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier0"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0BindingType))
	fieldNameMap["Tier0"] = "Tier0"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier0", fields, reflect.TypeOf(ChildTier0{}), fieldNameMap, validators)
}

func ChildTier0DeploymentMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier0DeploymentMap"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0DeploymentMapBindingType))
	fieldNameMap["Tier0DeploymentMap"] = "Tier0DeploymentMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier0_deployment_map", fields, reflect.TypeOf(ChildTier0DeploymentMap{}), fieldNameMap, validators)
}

func ChildTier0InterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier0Interface"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0InterfaceBindingType))
	fieldNameMap["Tier0Interface"] = "Tier0Interface"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier0_interface", fields, reflect.TypeOf(ChildTier0Interface{}), fieldNameMap, validators)
}

func ChildTier0RouteMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier0RouteMap"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0RouteMapBindingType))
	fieldNameMap["Tier0RouteMap"] = "Tier0RouteMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier0_route_map", fields, reflect.TypeOf(ChildTier0RouteMap{}), fieldNameMap, validators)
}

func ChildTier1BindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier1"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier1BindingType))
	fieldNameMap["Tier1"] = "Tier1"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier1", fields, reflect.TypeOf(ChildTier1{}), fieldNameMap, validators)
}

func ChildTier1DeploymentMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier1DeploymentMap"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier1DeploymentMapBindingType))
	fieldNameMap["Tier1DeploymentMap"] = "Tier1DeploymentMap"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier1_deployment_map", fields, reflect.TypeOf(ChildTier1DeploymentMap{}), fieldNameMap, validators)
}

func ChildTier1InterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["Tier1Interface"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier1InterfaceBindingType))
	fieldNameMap["Tier1Interface"] = "Tier1Interface"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tier1_interface", fields, reflect.TypeOf(ChildTier1Interface{}), fieldNameMap, validators)
}

func ChildTlsCertificateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["TlsCertificate"] = bindings.NewOptionalType(bindings.NewReferenceType(TlsCertificateBindingType))
	fieldNameMap["TlsCertificate"] = "TlsCertificate"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tls_certificate", fields, reflect.TypeOf(ChildTlsCertificate{}), fieldNameMap, validators)
}

func ChildTlsCrlBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["TlsCrl"] = bindings.NewOptionalType(bindings.NewReferenceType(TlsCrlBindingType))
	fieldNameMap["TlsCrl"] = "TlsCrl"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tls_crl", fields, reflect.TypeOf(ChildTlsCrl{}), fieldNameMap, validators)
}

func ChildTlsTrustDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["TlsTrustData"] = bindings.NewOptionalType(bindings.NewReferenceType(TlsTrustDataBindingType))
	fieldNameMap["TlsTrustData"] = "TlsTrustData"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_tls_trust_data", fields, reflect.TypeOf(ChildTlsTrustData{}), fieldNameMap, validators)
}

func ChildTraceflowConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["TraceflowConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(TraceflowConfigBindingType))
	fieldNameMap["TraceflowConfig"] = "TraceflowConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_traceflow_config", fields, reflect.TypeOf(ChildTraceflowConfig{}), fieldNameMap, validators)
}

func ChildVirtualEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["VirtualEndpoint"] = bindings.NewOptionalType(bindings.NewReferenceType(VirtualEndpointBindingType))
	fieldNameMap["VirtualEndpoint"] = "VirtualEndpoint"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_virtual_endpoint", fields, reflect.TypeOf(ChildVirtualEndpoint{}), fieldNameMap, validators)
}

func ChildVniPoolConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["VniPoolConfig"] = bindings.NewOptionalType(bindings.NewReferenceType(VniPoolConfigBindingType))
	fieldNameMap["VniPoolConfig"] = "VniPoolConfig"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.child_vni_pool_config", fields, reflect.TypeOf(ChildVniPoolConfig{}), fieldNameMap, validators)
}

func ClasslessStaticRouteBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	fields["next_hop"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_hop"] = "NextHop"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.classless_static_route", fields, reflect.TypeOf(ClasslessStaticRoute{}), fieldNameMap, validators)
}

func CloudNativeServiceInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["service_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["service_type"] = "ServiceType"
	fields["source"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceReferenceBindingType))
	fieldNameMap["source"] = "Source"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.cloud_native_service_instance", fields, reflect.TypeOf(CloudNativeServiceInstance{}), fieldNameMap, validators)
}

func ClusterBackupInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["node_id"] = "NodeId"
	fields["restore_type"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["restore_type"] = "RestoreType"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.cluster_backup_info", fields, reflect.TypeOf(ClusterBackupInfo{}), fieldNameMap, validators)
}

func ClusterBackupInfoListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ClusterBackupInfoBindingType), reflect.TypeOf([]ClusterBackupInfo{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.cluster_backup_info_list_result", fields, reflect.TypeOf(ClusterBackupInfoListResult{}), fieldNameMap, validators)
}

func ClusterRestoreStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["backup_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["backup_timestamp"] = "BackupTimestamp"
	fields["endpoints"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["endpoints"] = "Endpoints"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["instructions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InstructionInfoBindingType), reflect.TypeOf([]InstructionInfo{})))
	fieldNameMap["instructions"] = "Instructions"
	fields["restore_end_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["restore_end_time"] = "RestoreEndTime"
	fields["restore_start_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["restore_start_time"] = "RestoreStartTime"
	fields["status"] = bindings.NewOptionalType(bindings.NewReferenceType(GlobalRestoreStatusBindingType))
	fieldNameMap["status"] = "Status"
	fields["step"] = bindings.NewOptionalType(bindings.NewReferenceType(RestoreStepBindingType))
	fieldNameMap["step"] = "Step"
	fields["total_steps"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_steps"] = "TotalSteps"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.cluster_restore_status", fields, reflect.TypeOf(ClusterRestoreStatus{}), fieldNameMap, validators)
}

func ColumnItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["column_identifier"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["column_identifier"] = "ColumnIdentifier"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field"] = "Field"
	fields["hidden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["hidden"] = "Hidden"
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["render_configuration"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RenderConfigurationBindingType), reflect.TypeOf([]RenderConfiguration{})))
	fieldNameMap["render_configuration"] = "RenderConfiguration"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_key"] = "SortKey"
	fields["tooltip"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TooltipBindingType), reflect.TypeOf([]Tooltip{})))
	fieldNameMap["tooltip"] = "Tooltip"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.column_item", fields, reflect.TypeOf(ColumnItem{}), fieldNameMap, validators)
}

func CommunicationEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["destination_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_groups"] = "DestinationGroups"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disabled"] = "Disabled"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["notes"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["notes"] = "Notes"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["services"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["services"] = "Services"
	fields["source_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_groups"] = "SourceGroups"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.communication_entry", fields, reflect.TypeOf(CommunicationEntry{}), fieldNameMap, validators)
}

func CommunicationMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["communication_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(CommunicationEntryBindingType), reflect.TypeOf([]CommunicationEntry{})))
	fieldNameMap["communication_entries"] = "CommunicationEntries"
	fields["precedence"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["precedence"] = "Precedence"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.communication_map", fields, reflect.TypeOf(CommunicationMap{}), fieldNameMap, validators)
}

func CommunityListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["communities"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["communities"] = "Communities"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.community_list", fields, reflect.TypeOf(CommunityList{}), fieldNameMap, validators)
}

func CommunityListListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(CommunityListBindingType), reflect.TypeOf([]CommunityList{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.community_list_list_result", fields, reflect.TypeOf(CommunityListListResult{}), fieldNameMap, validators)
}

func CommunityMatchCriteriaBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["criteria"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["criteria"] = "Criteria"
	fields["match_operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_operator"] = "MatchOperator"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.community_match_criteria", fields, reflect.TypeOf(CommunityMatchCriteria{}), fieldNameMap, validators)
}

func ComputeClusterIdfwConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["cluster_idfw_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["cluster_idfw_enabled"] = "ClusterIdfwEnabled"
	fields["member"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyResourceReferenceBindingType))
	fieldNameMap["member"] = "Member"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.compute_cluster_idfw_configuration", fields, reflect.TypeOf(ComputeClusterIdfwConfiguration{}), fieldNameMap, validators)
}

func ComputeCollectionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cm_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cm_local_id"] = "CmLocalId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["origin_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_id"] = "OriginId"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["origin_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_type"] = "OriginType"
	fields["owner_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["owner_id"] = "OwnerId"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.compute_collection", fields, reflect.TypeOf(ComputeCollection{}), fieldNameMap, validators)
}

func ConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["member_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["member_type"] = "MemberType"
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.condition", fields, reflect.TypeOf(Condition{}), fieldNameMap, validators)
}

func ConditionalValueConstraintExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	fields["rhs_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["rhs_value"] = "RhsValue"
	fields["value_constraint"] = bindings.NewOptionalType(bindings.NewReferenceType(ValueConstraintExpressionBindingType))
	fieldNameMap["value_constraint"] = "ValueConstraint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.conditional_value_constraint_expression", fields, reflect.TypeOf(ConditionalValueConstraintExpression{}), fieldNameMap, validators)
}

func ConfigurationStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConfigurationStateElementBindingType), reflect.TypeOf([]ConfigurationStateElement{})))
	fieldNameMap["details"] = "Details"
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.configuration_state", fields, reflect.TypeOf(ConfigurationState{}), fieldNameMap, validators)
}

func ConfigurationStateElementBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	fields["sub_system_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_system_address"] = "SubSystemAddress"
	fields["sub_system_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_system_id"] = "SubSystemId"
	fields["sub_system_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_system_name"] = "SubSystemName"
	fields["sub_system_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_system_type"] = "SubSystemType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.configuration_state_element", fields, reflect.TypeOf(ConfigurationStateElement{}), fieldNameMap, validators)
}

func ConjunctionOperatorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["conjunction_operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["conjunction_operator"] = "ConjunctionOperator"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.conjunction_operator", fields, reflect.TypeOf(ConjunctionOperator{}), fieldNameMap, validators)
}

func ConnectivityAdvancedConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["connectivity"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity"] = "Connectivity"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.connectivity_advanced_config", fields, reflect.TypeOf(ConnectivityAdvancedConfig{}), fieldNameMap, validators)
}

func ConsolidatedRealizedStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	fields["consolidated_status"] = bindings.NewOptionalType(bindings.NewReferenceType(ConsolidatedStatusBindingType))
	fieldNameMap["consolidated_status"] = "ConsolidatedStatus"
	fields["consolidated_status_per_enforcement_point"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConsolidatedStatusPerEnforcementPointBindingType), reflect.TypeOf([]ConsolidatedStatusPerEnforcementPoint{})))
	fieldNameMap["consolidated_status_per_enforcement_point"] = "ConsolidatedStatusPerEnforcementPoint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.consolidated_realized_status", fields, reflect.TypeOf(ConsolidatedRealizedStatus{}), fieldNameMap, validators)
}

func ConsolidatedStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["consolidated_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["consolidated_status"] = "ConsolidatedStatus"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.consolidated_status", fields, reflect.TypeOf(ConsolidatedStatus{}), fieldNameMap, validators)
}

func ConsolidatedStatusNsxtBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforced_status"] = bindings.NewOptionalType(bindings.NewReferenceType(EnforcedStatusDetailsNsxtBindingType))
	fieldNameMap["enforced_status"] = "EnforcedStatus"
	fields["alarm"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyRuntimeAlarmBindingType))
	fieldNameMap["alarm"] = "Alarm"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["consolidated_status"] = bindings.NewOptionalType(bindings.NewReferenceType(ConsolidatedStatusBindingType))
	fieldNameMap["consolidated_status"] = "ConsolidatedStatus"
	fields["enforcement_point_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_id"] = "EnforcementPointId"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.consolidated_status_nsxt", fields, reflect.TypeOf(ConsolidatedStatusNsxt{}), fieldNameMap, validators)
}

func ConsolidatedStatusPerEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alarm"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyRuntimeAlarmBindingType))
	fieldNameMap["alarm"] = "Alarm"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["consolidated_status"] = bindings.NewOptionalType(bindings.NewReferenceType(ConsolidatedStatusBindingType))
	fieldNameMap["consolidated_status"] = "ConsolidatedStatus"
	fields["enforcement_point_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_id"] = "EnforcementPointId"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.consolidated_status_per_enforcement_point", fields, reflect.TypeOf(ConsolidatedStatusPerEnforcementPoint{}), fieldNameMap, validators)
}

func ConstantFieldValueBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["constant"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["constant"] = "Constant"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.constant_field_value", fields, reflect.TypeOf(ConstantFieldValue{}), fieldNameMap, validators)
}

func ConstraintBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["constraint_expression"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ConstraintExpressionBindingType),}, bindings.REST))
	fieldNameMap["constraint_expression"] = "ConstraintExpression"
	fields["message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["message"] = "Message"
	fields["target"] = bindings.NewOptionalType(bindings.NewReferenceType(ConstraintTargetBindingType))
	fieldNameMap["target"] = "Target"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.constraint", fields, reflect.TypeOf(Constraint{}), fieldNameMap, validators)
}

func ConstraintExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.constraint_expression", fields, reflect.TypeOf(ConstraintExpression{}), fieldNameMap, validators)
}

func ConstraintListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConstraintBindingType), reflect.TypeOf([]Constraint{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.constraint_list_result", fields, reflect.TypeOf(ConstraintListResult{}), fieldNameMap, validators)
}

func ConstraintTargetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["attribute"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["attribute"] = "Attribute"
	fields["path_prefix"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path_prefix"] = "PathPrefix"
	fields["target_resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_resource_type"] = "TargetResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.constraint_target", fields, reflect.TypeOf(ConstraintTarget{}), fieldNameMap, validators)
}

func ContainerApplicationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["container_cluster_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_cluster_id"] = "ContainerClusterId"
	fields["container_project_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_project_id"] = "ContainerProjectId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_application", fields, reflect.TypeOf(ContainerApplication{}), fieldNameMap, validators)
}

func ContainerApplicationInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cluster_node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cluster_node_id"] = "ClusterNodeId"
	fields["container_application_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["container_application_ids"] = "ContainerApplicationIds"
	fields["container_cluster_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_cluster_id"] = "ContainerClusterId"
	fields["container_project_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_project_id"] = "ContainerProjectId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_application_instance", fields, reflect.TypeOf(ContainerApplicationInstance{}), fieldNameMap, validators)
}

func ContainerClusterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cluster_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cluster_type"] = "ClusterType"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["infrastructure"] = bindings.NewOptionalType(bindings.NewReferenceType(ContainerInfrastructureInfoBindingType))
	fieldNameMap["infrastructure"] = "Infrastructure"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_cluster", fields, reflect.TypeOf(ContainerCluster{}), fieldNameMap, validators)
}

func ContainerClusterNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["container_cluster_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_cluster_id"] = "ContainerClusterId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_cluster_node", fields, reflect.TypeOf(ContainerClusterNode{}), fieldNameMap, validators)
}

func ContainerConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["header"] = bindings.NewOptionalType(bindings.NewReferenceType(HeaderBindingType))
	fieldNameMap["header"] = "Header"
	fields["labels"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LabelBindingType), reflect.TypeOf([]Label{})))
	fieldNameMap["labels"] = "Labels"
	fields["layout"] = bindings.NewOptionalType(bindings.NewReferenceType(LayoutBindingType))
	fieldNameMap["layout"] = "Layout"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["widgets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(WidgetItemBindingType), reflect.TypeOf([]WidgetItem{})))
	fieldNameMap["widgets"] = "Widgets"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_configuration", fields, reflect.TypeOf(ContainerConfiguration{}), fieldNameMap, validators)
}

func ContainerInfrastructureInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["infra_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["infra_type"] = "InfraType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_infrastructure_info", fields, reflect.TypeOf(ContainerInfrastructureInfo{}), fieldNameMap, validators)
}

func ContainerIngressPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["container_application_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["container_application_ids"] = "ContainerApplicationIds"
	fields["container_cluster_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_cluster_id"] = "ContainerClusterId"
	fields["container_project_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_project_id"] = "ContainerProjectId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["spec"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["spec"] = "Spec"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_ingress_policy", fields, reflect.TypeOf(ContainerIngressPolicy{}), fieldNameMap, validators)
}

func ContainerNetworkPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["container_cluster_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_cluster_id"] = "ContainerClusterId"
	fields["container_project_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_project_id"] = "ContainerProjectId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["policy_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["policy_type"] = "PolicyType"
	fields["spec"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["spec"] = "Spec"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_network_policy", fields, reflect.TypeOf(ContainerNetworkPolicy{}), fieldNameMap, validators)
}

func ContainerProjectBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["container_cluster_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["container_cluster_id"] = "ContainerClusterId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["network_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NetworkErrorBindingType), reflect.TypeOf([]NetworkError{})))
	fieldNameMap["network_errors"] = "NetworkErrors"
	fields["network_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_status"] = "NetworkStatus"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.container_project", fields, reflect.TypeOf(ContainerProject{}), fieldNameMap, validators)
}

func CriterionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["evaluations"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(EvaluationBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["evaluations"] = "Evaluations"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.criterion", fields, reflect.TypeOf(Criterion{}), fieldNameMap, validators)
}

func CsvListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["file_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["file_name"] = "FileName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.csv_list_result", fields, reflect.TypeOf(CsvListResult{}), fieldNameMap, validators)
}

func CsvRecordBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.csv_record", fields, reflect.TypeOf(CsvRecord{}), fieldNameMap, validators)
}

func CurrentBackupOperationStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["backup_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["backup_id"] = "BackupId"
	fields["current_step"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["current_step"] = "CurrentStep"
	fields["current_step_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["current_step_message"] = "CurrentStepMessage"
	fields["end_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["end_time"] = "EndTime"
	fields["operation_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operation_type"] = "OperationType"
	fields["start_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["start_time"] = "StartTime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.current_backup_operation_status", fields, reflect.TypeOf(CurrentBackupOperationStatus{}), fieldNameMap, validators)
}

func CustomPolicyLbPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["persistence"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["persistence"] = "Persistence"
	fields["persistence_shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["persistence_shared"] = "PersistenceShared"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.custom_policy_lb_persistence_profile", fields, reflect.TypeOf(CustomPolicyLbPersistenceProfile{}), fieldNameMap, validators)
}

func CustomPolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["app_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["app_protocol"] = "AppProtocol"
	fields["client_ssl_certificate_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["client_ssl_certificate_ids"] = "ClientSslCertificateIds"
	fields["client_ssl_settings"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["client_ssl_settings"] = "ClientSslSettings"
	fields["default_client_ssl_certificate_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["default_client_ssl_certificate_id"] = "DefaultClientSslCertificateId"
	fields["server_auth_ca_certificate_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["server_auth_ca_certificate_ids"] = "ServerAuthCaCertificateIds"
	fields["server_ssl_settings"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_ssl_settings"] = "ServerSslSettings"
	fields["insert_client_ip_header"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["insert_client_ip_header"] = "InsertClientIpHeader"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile"] = "LbPersistenceProfile"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["traffic_source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["traffic_source"] = "TrafficSource"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.custom_policy_lb_virtual_server", fields, reflect.TypeOf(CustomPolicyLbVirtualServer{}), fieldNameMap, validators)
}

func CustomWidgetConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ui_component_identifier"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ui_component_identifier"] = "UiComponentIdentifier"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.custom_widget_configuration", fields, reflect.TypeOf(CustomWidgetConfiguration{}), fieldNameMap, validators)
}

func CvxConnectionInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["thumbprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["thumbprint"] = "Thumbprint"
	fields["username"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["username"] = "Username"
	fields["enforcement_point_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_address"] = "EnforcementPointAddress"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.cvx_connection_info", fields, reflect.TypeOf(CvxConnectionInfo{}), fieldNameMap, validators)
}

func DNSForwarderStatisticsPerEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.DNS_forwarder_statistics_per_enforcement_point", fields, reflect.TypeOf(DNSForwarderStatisticsPerEnforcementPoint{}), fieldNameMap, validators)
}

func DNSForwarderStatusPerEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.DNS_forwarder_status_per_enforcement_point", fields, reflect.TypeOf(DNSForwarderStatusPerEnforcementPoint{}), fieldNameMap, validators)
}

func DataCounterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dropped"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dropped"] = "Dropped"
	fields["multicast_broadcast"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["multicast_broadcast"] = "MulticastBroadcast"
	fields["total"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total"] = "Total"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.data_counter", fields, reflect.TypeOf(DataCounter{}), fieldNameMap, validators)
}

func DatasourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["urls"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(UrlAliasBindingType), reflect.TypeOf([]UrlAlias{})))
	fieldNameMap["urls"] = "Urls"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.datasource", fields, reflect.TypeOf(Datasource{}), fieldNameMap, validators)
}

func DefaultFilterValueBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alias"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alias"] = "Alias"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.default_filter_value", fields, reflect.TypeOf(DefaultFilterValue{}), fieldNameMap, validators)
}

func DeleteRequestParametersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["force"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["force"] = "Force"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.delete_request_parameters", fields, reflect.TypeOf(DeleteRequestParameters{}), fieldNameMap, validators)
}

func DeploymentZoneBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enforcement_points"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(EnforcementPointBindingType), reflect.TypeOf([]EnforcementPoint{})))
	fieldNameMap["enforcement_points"] = "EnforcementPoints"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.deployment_zone", fields, reflect.TypeOf(DeploymentZone{}), fieldNameMap, validators)
}

func DfwFirewallConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["idfw_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["idfw_enabled"] = "IdfwEnabled"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["disable_auto_drafts"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disable_auto_drafts"] = "DisableAutoDrafts"
	fields["enable_firewall"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_firewall"] = "EnableFirewall"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dfw_firewall_configuration", fields, reflect.TypeOf(DfwFirewallConfiguration{}), fieldNameMap, validators)
}

func DhcpHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["op_code"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["op_code"] = "OpCode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_header", fields, reflect.TypeOf(DhcpHeader{}), fieldNameMap, validators)
}

func DhcpIpPoolUsageBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["allocated_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["allocated_number"] = "AllocatedNumber"
	fields["allocated_percentage"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["allocated_percentage"] = "AllocatedPercentage"
	fields["dhcp_ip_pool_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dhcp_ip_pool_id"] = "DhcpIpPoolId"
	fields["pool_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["pool_size"] = "PoolSize"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_ip_pool_usage", fields, reflect.TypeOf(DhcpIpPoolUsage{}), fieldNameMap, validators)
}

func DhcpLeasePerIPBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["expire_time"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["expire_time"] = "ExpireTime"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	fields["start_time"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["start_time"] = "StartTime"
	fields["subnet"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["subnet"] = "Subnet"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_lease_per_IP", fields, reflect.TypeOf(DhcpLeasePerIP{}), fieldNameMap, validators)
}

func DhcpLeasesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dhcp_server_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dhcp_server_id"] = "DhcpServerId"
	fields["leases"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DhcpLeasePerIPBindingType), reflect.TypeOf([]DhcpLeasePerIP{})))
	fieldNameMap["leases"] = "Leases"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_leases", fields, reflect.TypeOf(DhcpLeases{}), fieldNameMap, validators)
}

func DhcpLeasesResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dhcp_server_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dhcp_server_id"] = "DhcpServerId"
	fields["leases"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DhcpLeasePerIPBindingType), reflect.TypeOf([]DhcpLeasePerIP{})))
	fieldNameMap["leases"] = "Leases"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	fields["connectivity_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity_path"] = "ConnectivityPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_leases_result", fields, reflect.TypeOf(DhcpLeasesResult{}), fieldNameMap, validators)
}

func DhcpOption121BindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["static_routes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ClasslessStaticRouteBindingType), reflect.TypeOf([]ClasslessStaticRoute{})))
	fieldNameMap["static_routes"] = "StaticRoutes"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_option121", fields, reflect.TypeOf(DhcpOption121{}), fieldNameMap, validators)
}

func DhcpRelayConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["server_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["server_addresses"] = "ServerAddresses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_relay_config", fields, reflect.TypeOf(DhcpRelayConfig{}), fieldNameMap, validators)
}

func DhcpRelayConfigListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DhcpRelayConfigBindingType), reflect.TypeOf([]DhcpRelayConfig{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_relay_config_list_result", fields, reflect.TypeOf(DhcpRelayConfigListResult{}), fieldNameMap, validators)
}

func DhcpServerConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["edge_cluster_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_cluster_path"] = "EdgeClusterPath"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["preferred_edge_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["preferred_edge_paths"] = "PreferredEdgePaths"
	fields["server_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_address"] = "ServerAddress"
	fields["server_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["server_addresses"] = "ServerAddresses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_server_config", fields, reflect.TypeOf(DhcpServerConfig{}), fieldNameMap, validators)
}

func DhcpServerConfigListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DhcpServerConfigBindingType), reflect.TypeOf([]DhcpServerConfig{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_server_config_list_result", fields, reflect.TypeOf(DhcpServerConfigListResult{}), fieldNameMap, validators)
}

func DhcpServerStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConfigurationStateElementBindingType), reflect.TypeOf([]ConfigurationStateElement{})))
	fieldNameMap["details"] = "Details"
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_server_state", fields, reflect.TypeOf(DhcpServerState{}), fieldNameMap, validators)
}

func DhcpServerStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["acks"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["acks"] = "Acks"
	fields["declines"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["declines"] = "Declines"
	fields["dhcp_server_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dhcp_server_id"] = "DhcpServerId"
	fields["discovers"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["discovers"] = "Discovers"
	fields["errors"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["errors"] = "Errors"
	fields["informs"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["informs"] = "Informs"
	fields["ip_pool_stats"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DhcpIpPoolUsageBindingType), reflect.TypeOf([]DhcpIpPoolUsage{})))
	fieldNameMap["ip_pool_stats"] = "IpPoolStats"
	fields["nacks"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["nacks"] = "Nacks"
	fields["offers"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["offers"] = "Offers"
	fields["releases"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["releases"] = "Releases"
	fields["requests"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["requests"] = "Requests"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_server_statistics", fields, reflect.TypeOf(DhcpServerStatistics{}), fieldNameMap, validators)
}

func DhcpServerStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["active_node"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["active_node"] = "ActiveNode"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["service_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["service_status"] = "ServiceStatus"
	fields["stand_by_node"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["stand_by_node"] = "StandByNode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_server_status", fields, reflect.TypeOf(DhcpServerStatus{}), fieldNameMap, validators)
}

func DhcpStaticBindingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_static_binding_config", fields, reflect.TypeOf(DhcpStaticBindingConfig{}), fieldNameMap, validators)
}

func DhcpStaticBindingConfigListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(DhcpStaticBindingConfigBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_static_binding_config_list_result", fields, reflect.TypeOf(DhcpStaticBindingConfigListResult{}), fieldNameMap, validators)
}

func DhcpStaticBindingStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConfigurationStateElementBindingType), reflect.TypeOf([]ConfigurationStateElement{})))
	fieldNameMap["details"] = "Details"
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_static_binding_state", fields, reflect.TypeOf(DhcpStaticBindingState{}), fieldNameMap, validators)
}

func DhcpStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["acks"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["acks"] = "Acks"
	fields["declines"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["declines"] = "Declines"
	fields["dhcp_server_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dhcp_server_id"] = "DhcpServerId"
	fields["discovers"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["discovers"] = "Discovers"
	fields["errors"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["errors"] = "Errors"
	fields["informs"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["informs"] = "Informs"
	fields["ip_pool_stats"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DhcpIpPoolUsageBindingType), reflect.TypeOf([]DhcpIpPoolUsage{})))
	fieldNameMap["ip_pool_stats"] = "IpPoolStats"
	fields["nacks"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["nacks"] = "Nacks"
	fields["offers"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["offers"] = "Offers"
	fields["releases"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["releases"] = "Releases"
	fields["requests"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["requests"] = "Requests"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_statistics", fields, reflect.TypeOf(DhcpStatistics{}), fieldNameMap, validators)
}

func DhcpV4OptionsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["option121"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpOption121BindingType))
	fieldNameMap["option121"] = "Option121"
	fields["others"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GenericDhcpOptionBindingType), reflect.TypeOf([]GenericDhcpOption{})))
	fieldNameMap["others"] = "Others"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_v4_options", fields, reflect.TypeOf(DhcpV4Options{}), fieldNameMap, validators)
}

func DhcpV4StaticBindingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["gateway_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["gateway_address"] = "GatewayAddress"
	fields["host_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host_name"] = "HostName"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	fields["options"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpV4OptionsBindingType))
	fieldNameMap["options"] = "Options"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_v4_static_binding_config", fields, reflect.TypeOf(DhcpV4StaticBindingConfig{}), fieldNameMap, validators)
}

func DhcpV6OptionsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_v6_options", fields, reflect.TypeOf(DhcpV6Options{}), fieldNameMap, validators)
}

func DhcpV6StaticBindingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dns_nameservers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_nameservers"] = "DnsNameservers"
	fields["domain_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["domain_names"] = "DomainNames"
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	fields["preferred_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["preferred_time"] = "PreferredTime"
	fields["sntp_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["sntp_servers"] = "SntpServers"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcp_v6_static_binding_config", fields, reflect.TypeOf(DhcpV6StaticBindingConfig{}), fieldNameMap, validators)
}

func Dhcpv6HeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["msg_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["msg_type"] = "MsgType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dhcpv6_header", fields, reflect.TypeOf(Dhcpv6Header{}), fieldNameMap, validators)
}

func DiscoveredNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["certificate"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["certificate"] = "Certificate"
	fields["cm_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cm_local_id"] = "CmLocalId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["hardware_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["hardware_id"] = "HardwareId"
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["node_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["node_type"] = "NodeType"
	fields["origin_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_id"] = "OriginId"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["os_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["os_type"] = "OsType"
	fields["os_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["os_version"] = "OsVersion"
	fields["parent_compute_collection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_compute_collection"] = "ParentComputeCollection"
	fields["stateless"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateless"] = "Stateless"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.discovered_node", fields, reflect.TypeOf(DiscoveredNode{}), fieldNameMap, validators)
}

func DiscoveredResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.discovered_resource", fields, reflect.TypeOf(DiscoveredResource{}), fieldNameMap, validators)
}

func DiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.discovery_profile_binding_map", fields, reflect.TypeOf(DiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func DistributedFloodProtectionProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enable_rst_spoofing"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_rst_spoofing"] = "EnableRstSpoofing"
	fields["enable_syncache"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_syncache"] = "EnableSyncache"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["icmp_active_flow_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_active_flow_limit"] = "IcmpActiveFlowLimit"
	fields["other_active_conn_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["other_active_conn_limit"] = "OtherActiveConnLimit"
	fields["tcp_half_open_conn_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_half_open_conn_limit"] = "TcpHalfOpenConnLimit"
	fields["udp_active_flow_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["udp_active_flow_limit"] = "UdpActiveFlowLimit"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.distributed_flood_protection_profile", fields, reflect.TypeOf(DistributedFloodProtectionProfile{}), fieldNameMap, validators)
}

func DistributedVirtualPortgroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["backing_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["backing_type"] = "BackingType"
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["overall_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["overall_status"] = "OverallStatus"
	fields["cm_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cm_local_id"] = "CmLocalId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["origin_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_type"] = "OriginType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.distributed_virtual_portgroup", fields, reflect.TypeOf(DistributedVirtualPortgroup{}), fieldNameMap, validators)
}

func DistributedVirtualSwitchBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["discovered_nodes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DiscoveredNodeBindingType), reflect.TypeOf([]DiscoveredNode{})))
	fieldNameMap["discovered_nodes"] = "DiscoveredNodes"
	fields["lacp_group_configs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LacpGroupConfigInfoBindingType), reflect.TypeOf([]LacpGroupConfigInfo{})))
	fieldNameMap["lacp_group_configs"] = "LacpGroupConfigs"
	fields["origin_properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(KeyValuePairBindingType), reflect.TypeOf([]KeyValuePair{})))
	fieldNameMap["origin_properties"] = "OriginProperties"
	fields["uplink_port_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["uplink_port_names"] = "UplinkPortNames"
	fields["uplink_portgroup"] = bindings.NewOptionalType(bindings.NewReferenceType(DistributedVirtualPortgroupBindingType))
	fieldNameMap["uplink_portgroup"] = "UplinkPortgroup"
	fields["uuid"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uuid"] = "Uuid"
	fields["cm_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cm_local_id"] = "CmLocalId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["origin_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_id"] = "OriginId"
	fields["origin_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_type"] = "OriginType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.distributed_virtual_switch", fields, reflect.TypeOf(DistributedVirtualSwitch{}), fieldNameMap, validators)
}

func DnsHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["address"] = "Address"
	fields["address_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["address_type"] = "AddressType"
	fields["message_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["message_type"] = "MessageType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dns_header", fields, reflect.TypeOf(DnsHeader{}), fieldNameMap, validators)
}

func DnsSecurityProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ttl"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ttl"] = "Ttl"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dns_security_profile", fields, reflect.TypeOf(DnsSecurityProfile{}), fieldNameMap, validators)
}

func DnsSecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dns_security_profile_binding_map", fields, reflect.TypeOf(DnsSecurityProfileBindingMap{}), fieldNameMap, validators)
}

func DnsSecurityProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DnsSecurityProfileBindingMapBindingType), reflect.TypeOf([]DnsSecurityProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dns_security_profile_binding_map_list_result", fields, reflect.TypeOf(DnsSecurityProfileBindingMapListResult{}), fieldNameMap, validators)
}

func DnsSecurityProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DnsSecurityProfileBindingType), reflect.TypeOf([]DnsSecurityProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dns_security_profile_list_result", fields, reflect.TypeOf(DnsSecurityProfileListResult{}), fieldNameMap, validators)
}

func DomainBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.domain", fields, reflect.TypeOf(Domain{}), fieldNameMap, validators)
}

func DomainDeploymentMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.domain_deployment_map", fields, reflect.TypeOf(DomainDeploymentMap{}), fieldNameMap, validators)
}

func DomainDeploymentMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DomainDeploymentMapBindingType), reflect.TypeOf([]DomainDeploymentMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.domain_deployment_map_list_result", fields, reflect.TypeOf(DomainDeploymentMapListResult{}), fieldNameMap, validators)
}

func DomainListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DomainBindingType), reflect.TypeOf([]Domain{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.domain_list_result", fields, reflect.TypeOf(DomainListResult{}), fieldNameMap, validators)
}

func DonutConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["count"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["count"] = "Count"
	fields["display_count"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["display_count"] = "DisplayCount"
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["sections"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DonutSectionBindingType), reflect.TypeOf([]DonutSection{})))
	fieldNameMap["sections"] = "Sections"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.donut_configuration", fields, reflect.TypeOf(DonutConfiguration{}), fieldNameMap, validators)
}

func DonutPartBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field"] = "Field"
	fields["hide_empty_legend"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["hide_empty_legend"] = "HideEmptyLegend"
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["render_configuration"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RenderConfigurationBindingType), reflect.TypeOf([]RenderConfiguration{})))
	fieldNameMap["render_configuration"] = "RenderConfiguration"
	fields["tooltip"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TooltipBindingType), reflect.TypeOf([]Tooltip{})))
	fieldNameMap["tooltip"] = "Tooltip"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.donut_part", fields, reflect.TypeOf(DonutPart{}), fieldNameMap, validators)
}

func DonutSectionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["parts"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DonutPartBindingType), reflect.TypeOf([]DonutPart{})))
	fieldNameMap["parts"] = "Parts"
	fields["row_list_field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["row_list_field"] = "RowListField"
	fields["template"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["template"] = "Template"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.donut_section", fields, reflect.TypeOf(DonutSection{}), fieldNameMap, validators)
}

func DropdownFilterWidgetConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["default_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["default_value"] = "DefaultValue"
	fields["dropdown_item"] = bindings.NewOptionalType(bindings.NewReferenceType(DropdownItemBindingType))
	fieldNameMap["dropdown_item"] = "DropdownItem"
	fields["placeholder_msg"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["placeholder_msg"] = "PlaceholderMsg"
	fields["static_filter_condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["static_filter_condition"] = "StaticFilterCondition"
	fields["static_filters"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(StaticFilterBindingType), reflect.TypeOf([]StaticFilter{})))
	fieldNameMap["static_filters"] = "StaticFilters"
	fields["alias"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alias"] = "Alias"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dropdown_filter_widget_configuration", fields, reflect.TypeOf(DropdownFilterWidgetConfiguration{}), fieldNameMap, validators)
}

func DropdownItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field"] = "Field"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.dropdown_item", fields, reflect.TypeOf(DropdownItem{}), fieldNameMap, validators)
}

func DuplicateIPDetectionOptionsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["duplicate_ip_detection_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["duplicate_ip_detection_enabled"] = "DuplicateIpDetectionEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.duplicate_IP_detection_options", fields, reflect.TypeOf(DuplicateIPDetectionOptions{}), fieldNameMap, validators)
}

func EULAAcceptanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["acceptance"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["acceptance"] = "Acceptance"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.EULA_acceptance", fields, reflect.TypeOf(EULAAcceptance{}), fieldNameMap, validators)
}

func EULAContentBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["content"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["content"] = "Content"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.EULA_content", fields, reflect.TypeOf(EULAContent{}), fieldNameMap, validators)
}

func EdgeConfigurationStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConfigurationStateElementBindingType), reflect.TypeOf([]ConfigurationStateElement{})))
	fieldNameMap["details"] = "Details"
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	fields["pending_change_list"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["pending_change_list"] = "PendingChangeList"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.edge_configuration_state", fields, reflect.TypeOf(EdgeConfigurationState{}), fieldNameMap, validators)
}

func EgressRateLimiterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["average_bandwidth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["average_bandwidth"] = "AverageBandwidth"
	fields["burst_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["burst_size"] = "BurstSize"
	fields["peak_bandwidth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["peak_bandwidth"] = "PeakBandwidth"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.egress_rate_limiter", fields, reflect.TypeOf(EgressRateLimiter{}), fieldNameMap, validators)
}

func EndpointPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["endpoint_rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(EndpointRuleBindingType), reflect.TypeOf([]EndpointRule{})))
	fieldNameMap["endpoint_rules"] = "EndpointRules"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.endpoint_policy", fields, reflect.TypeOf(EndpointPolicy{}), fieldNameMap, validators)
}

func EndpointRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["groups"] = "Groups"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service_profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["service_profiles"] = "ServiceProfiles"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.endpoint_rule", fields, reflect.TypeOf(EndpointRule{}), fieldNameMap, validators)
}

func EnforcedStatusDetailsNsxtBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforced_status_info"] = bindings.NewOptionalType(bindings.NewReferenceType(EnforcedStatusInfoNsxtBindingType))
	fieldNameMap["enforced_status_info"] = "EnforcedStatusInfo"
	fields["pending_changes_info"] = bindings.NewOptionalType(bindings.NewReferenceType(PendingChangesInfoNsxtBindingType))
	fieldNameMap["pending_changes_info"] = "PendingChangesInfo"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforced_status_details_nsxt", fields, reflect.TypeOf(EnforcedStatusDetailsNsxt{}), fieldNameMap, validators)
}

func EnforcedStatusInfoNsxtBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforced_status"] = bindings.NewOptionalType(bindings.NewReferenceType(EnforcedStatusNsxtBindingType))
	fieldNameMap["enforced_status"] = "EnforcedStatus"
	fields["enforced_status_per_scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(EnforcedStatusPerScopeNsxtBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["enforced_status_per_scope"] = "EnforcedStatusPerScope"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforced_status_info_nsxt", fields, reflect.TypeOf(EnforcedStatusInfoNsxt{}), fieldNameMap, validators)
}

func EnforcedStatusNsxtBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["status_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status_message"] = "StatusMessage"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforced_status_nsxt", fields, reflect.TypeOf(EnforcedStatusNsxt{}), fieldNameMap, validators)
}

func EnforcedStatusPerScopeNsxtBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforced_status_per_scope_nsxt", fields, reflect.TypeOf(EnforcedStatusPerScopeNsxt{}), fieldNameMap, validators)
}

func EnforcedStatusPerTransportNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["enforced_status"] = bindings.NewOptionalType(bindings.NewReferenceType(EnforcedStatusNsxtBindingType))
	fieldNameMap["enforced_status"] = "EnforcedStatus"
	fields["nsx_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nsx_id"] = "NsxId"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforced_status_per_transport_node", fields, reflect.TypeOf(EnforcedStatusPerTransportNode{}), fieldNameMap, validators)
}

func EnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["auto_enforce"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["auto_enforce"] = "AutoEnforce"
	fields["connection_info"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(EnforcementPointConnectionInfoBindingType),}, bindings.REST))
	fieldNameMap["connection_info"] = "ConnectionInfo"
	fields["version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["version"] = "Version"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforcement_point", fields, reflect.TypeOf(EnforcementPoint{}), fieldNameMap, validators)
}

func EnforcementPointConnectionInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_address"] = "EnforcementPointAddress"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforcement_point_connection_info", fields, reflect.TypeOf(EnforcementPointConnectionInfo{}), fieldNameMap, validators)
}

func EnforcementPointListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(EnforcementPointBindingType), reflect.TypeOf([]EnforcementPoint{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.enforcement_point_list_result", fields, reflect.TypeOf(EnforcementPointListResult{}), fieldNameMap, validators)
}

func EntityInstanceCountConstraintExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["count"] = "Count"
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.entity_instance_count_constraint_expression", fields, reflect.TypeOf(EntityInstanceCountConstraintExpression{}), fieldNameMap, validators)
}

func ErrorResolverInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["error_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["error_id"] = "ErrorId"
	fields["resolver_present"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["resolver_present"] = "ResolverPresent"
	fields["user_metadata"] = bindings.NewOptionalType(bindings.NewReferenceType(ErrorResolverUserMetadataBindingType))
	fieldNameMap["user_metadata"] = "UserMetadata"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_info", fields, reflect.TypeOf(ErrorResolverInfo{}), fieldNameMap, validators)
}

func ErrorResolverInfoListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ErrorResolverInfoBindingType), reflect.TypeOf([]ErrorResolverInfo{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_info_list", fields, reflect.TypeOf(ErrorResolverInfoList{}), fieldNameMap, validators)
}

func ErrorResolverMetadataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["entity_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["entity_id"] = "EntityId"
	fields["error_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["error_id"] = "ErrorId"
	fields["system_metadata"] = bindings.NewOptionalType(bindings.NewReferenceType(ErrorResolverSystemMetadataBindingType))
	fieldNameMap["system_metadata"] = "SystemMetadata"
	fields["user_metadata"] = bindings.NewOptionalType(bindings.NewReferenceType(ErrorResolverUserMetadataBindingType))
	fieldNameMap["user_metadata"] = "UserMetadata"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_metadata", fields, reflect.TypeOf(ErrorResolverMetadata{}), fieldNameMap, validators)
}

func ErrorResolverMetadataListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ErrorResolverMetadataBindingType), reflect.TypeOf([]ErrorResolverMetadata{})))
	fieldNameMap["errors"] = "Errors"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_metadata_list", fields, reflect.TypeOf(ErrorResolverMetadataList{}), fieldNameMap, validators)
}

func ErrorResolverSystemMetadataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_system_metadata", fields, reflect.TypeOf(ErrorResolverSystemMetadata{}), fieldNameMap, validators)
}

func ErrorResolverUserInputDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["data_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["data_type"] = "DataType"
	fields["property_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["property_name"] = "PropertyName"
	fields["property_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["property_value"] = "PropertyValue"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_user_input_data", fields, reflect.TypeOf(ErrorResolverUserInputData{}), fieldNameMap, validators)
}

func ErrorResolverUserMetadataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["user_input_list"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ErrorResolverUserInputDataBindingType), reflect.TypeOf([]ErrorResolverUserInputData{})))
	fieldNameMap["user_input_list"] = "UserInputList"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.error_resolver_user_metadata", fields, reflect.TypeOf(ErrorResolverUserMetadata{}), fieldNameMap, validators)
}

func EtherTypeServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ether_type"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ether_type"] = "EtherType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ether_type_service_entry", fields, reflect.TypeOf(EtherTypeServiceEntry{}), fieldNameMap, validators)
}

func EthernetHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_mac"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dst_mac"] = "DstMac"
	fields["eth_type"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["eth_type"] = "EthType"
	fields["src_mac"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["src_mac"] = "SrcMac"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ethernet_header", fields, reflect.TypeOf(EthernetHeader{}), fieldNameMap, validators)
}

func EvaluationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.evaluation", fields, reflect.TypeOf(Evaluation{}), fieldNameMap, validators)
}

func EventBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["criteria"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(CriterionBindingType), reflect.TypeOf([]Criterion{})))
	fieldNameMap["criteria"] = "Criteria"
	fields["source"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(SourceBindingType),}, bindings.REST))
	fieldNameMap["source"] = "Source"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.event", fields, reflect.TypeOf(Event{}), fieldNameMap, validators)
}

func EvpnConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["encapsulation_method"] = bindings.NewOptionalType(bindings.NewReferenceType(EvpnEncapConfigBindingType))
	fieldNameMap["encapsulation_method"] = "EncapsulationMethod"
	fields["mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mode"] = "Mode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.evpn_config", fields, reflect.TypeOf(EvpnConfig{}), fieldNameMap, validators)
}

func EvpnEncapConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["vni_pool_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["vni_pool_path"] = "VniPoolPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.evpn_encap_config", fields, reflect.TypeOf(EvpnEncapConfig{}), fieldNameMap, validators)
}

func EvpnTunnelEndpointConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["edge_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_path"] = "EdgePath"
	fields["local_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["local_addresses"] = "LocalAddresses"
	fields["mtu"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mtu"] = "Mtu"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.evpn_tunnel_endpoint_config", fields, reflect.TypeOf(EvpnTunnelEndpointConfig{}), fieldNameMap, validators)
}

func ExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.expression", fields, reflect.TypeOf(Expression{}), fieldNameMap, validators)
}

func ExternalIDExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["external_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["external_ids"] = "ExternalIds"
	fields["member_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["member_type"] = "MemberType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.external_ID_expression", fields, reflect.TypeOf(ExternalIDExpression{}), fieldNameMap, validators)
}

func FIPSGlobalConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["lb_fips_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["lb_fips_enabled"] = "LbFipsEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.FIPS_global_config", fields, reflect.TypeOf(FIPSGlobalConfig{}), fieldNameMap, validators)
}

func FeaturePermissionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["feature"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["feature"] = "Feature"
	fields["feature_description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["feature_description"] = "FeatureDescription"
	fields["feature_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["feature_name"] = "FeatureName"
	fields["is_execute_recommended"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_execute_recommended"] = "IsExecuteRecommended"
	fields["is_internal"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_internal"] = "IsInternal"
	fields["permission"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["permission"] = "Permission"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.feature_permission", fields, reflect.TypeOf(FeaturePermission{}), fieldNameMap, validators)
}

func FederationComponentUpgradeStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["component_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["component_type"] = "ComponentType"
	fields["current_version_node_summary"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FederationNodeSummaryBindingType), reflect.TypeOf([]FederationNodeSummary{})))
	fieldNameMap["current_version_node_summary"] = "CurrentVersionNodeSummary"
	fields["details"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["details"] = "Details"
	fields["percent_complete"] = bindings.NewOptionalType(bindings.NewDoubleType())
	fieldNameMap["percent_complete"] = "PercentComplete"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["target_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_version"] = "TargetVersion"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_component_upgrade_status", fields, reflect.TypeOf(FederationComponentUpgradeStatus{}), fieldNameMap, validators)
}

func FederationConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["site_config"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SiteFederationConfigBindingType), reflect.TypeOf([]SiteFederationConfig{})))
	fieldNameMap["site_config"] = "SiteConfig"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_config", fields, reflect.TypeOf(FederationConfig{}), fieldNameMap, validators)
}

func FederationConnectivityConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["global_overlay_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["global_overlay_id"] = "GlobalOverlayId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_connectivity_config", fields, reflect.TypeOf(FederationConnectivityConfig{}), fieldNameMap, validators)
}

func FederationGatewayConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["global_overlay_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["global_overlay_id"] = "GlobalOverlayId"
	fields["site_allocation_indices"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SiteAllocationIndexForEdgeBindingType), reflect.TypeOf([]SiteAllocationIndexForEdge{})))
	fieldNameMap["site_allocation_indices"] = "SiteAllocationIndices"
	fields["transit_segment_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transit_segment_id"] = "TransitSegmentId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_gateway_config", fields, reflect.TypeOf(FederationGatewayConfig{}), fieldNameMap, validators)
}

func FederationNodeSummaryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["node_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["node_count"] = "NodeCount"
	fields["version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["version"] = "Version"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_node_summary", fields, reflect.TypeOf(FederationNodeSummary{}), fieldNameMap, validators)
}

func FederationUpgradeSummaryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["component_status"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FederationComponentUpgradeStatusBindingType), reflect.TypeOf([]FederationComponentUpgradeStatus{})))
	fieldNameMap["component_status"] = "ComponentStatus"
	fields["current_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["current_version"] = "CurrentVersion"
	fields["gpm_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["gpm_name"] = "GpmName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["last_upgrade_timestamp"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["last_upgrade_timestamp"] = "LastUpgradeTimestamp"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["overall_upgrade_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["overall_upgrade_status"] = "OverallUpgradeStatus"
	fields["site_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_id"] = "SiteId"
	fields["site_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_ip"] = "SiteIp"
	fields["site_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_type"] = "SiteType"
	fields["target_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_version"] = "TargetVersion"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_upgrade_summary", fields, reflect.TypeOf(FederationUpgradeSummary{}), fieldNameMap, validators)
}

func FederationUpgradeSummaryListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FederationUpgradeSummaryBindingType), reflect.TypeOf([]FederationUpgradeSummary{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.federation_upgrade_summary_list_result", fields, reflect.TypeOf(FederationUpgradeSummaryListResult{}), fieldNameMap, validators)
}

func FieldSanityConstraintExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["checks"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["checks"] = "Checks"
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.field_sanity_constraint_expression", fields, reflect.TypeOf(FieldSanityConstraintExpression{}), fieldNameMap, validators)
}

func FieldSettingBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["field_pointer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field_pointer"] = "FieldPointer"
	fields["value"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(FieldSettingValueBindingType),}, bindings.REST))
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.field_setting", fields, reflect.TypeOf(FieldSetting{}), fieldNameMap, validators)
}

func FieldSettingValueBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.field_setting_value", fields, reflect.TypeOf(FieldSettingValue{}), fieldNameMap, validators)
}

func FieldsPacketDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["arp_header"] = bindings.NewOptionalType(bindings.NewReferenceType(ArpHeaderBindingType))
	fieldNameMap["arp_header"] = "ArpHeader"
	fields["eth_header"] = bindings.NewOptionalType(bindings.NewReferenceType(EthernetHeaderBindingType))
	fieldNameMap["eth_header"] = "EthHeader"
	fields["ip_header"] = bindings.NewOptionalType(bindings.NewReferenceType(Ipv4HeaderBindingType))
	fieldNameMap["ip_header"] = "IpHeader"
	fields["ipv6_header"] = bindings.NewOptionalType(bindings.NewReferenceType(Ipv6HeaderBindingType))
	fieldNameMap["ipv6_header"] = "Ipv6Header"
	fields["payload"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["payload"] = "Payload"
	fields["transport_header"] = bindings.NewOptionalType(bindings.NewReferenceType(TransportProtocolHeaderBindingType))
	fieldNameMap["transport_header"] = "TransportHeader"
	fields["frame_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["frame_size"] = "FrameSize"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["routed"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["routed"] = "Routed"
	fields["transport_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_type"] = "TransportType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.fields_packet_data", fields, reflect.TypeOf(FieldsPacketData{}), fieldNameMap, validators)
}

func FileTransferAuthenticationSchemeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["scheme_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheme_name"] = "SchemeName"
	fields["username"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["username"] = "Username"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.file_transfer_authentication_scheme", fields, reflect.TypeOf(FileTransferAuthenticationScheme{}), fieldNameMap, validators)
}

func FileTransferProtocolBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["authentication_scheme"] = bindings.NewOptionalType(bindings.NewReferenceType(FileTransferAuthenticationSchemeBindingType))
	fieldNameMap["authentication_scheme"] = "AuthenticationScheme"
	fields["protocol_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["protocol_name"] = "ProtocolName"
	fields["ssh_fingerprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ssh_fingerprint"] = "SshFingerprint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.file_transfer_protocol", fields, reflect.TypeOf(FileTransferProtocol{}), fieldNameMap, validators)
}

func FilterWidgetConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alias"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alias"] = "Alias"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.filter_widget_configuration", fields, reflect.TypeOf(FilterWidgetConfiguration{}), fieldNameMap, validators)
}

func FirewallConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["disable_auto_drafts"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disable_auto_drafts"] = "DisableAutoDrafts"
	fields["enable_firewall"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_firewall"] = "EnableFirewall"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.firewall_configuration", fields, reflect.TypeOf(FirewallConfiguration{}), fieldNameMap, validators)
}

func FirewallIdentityStoreBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["base_distinguished_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["base_distinguished_name"] = "BaseDistinguishedName"
	fields["ldap_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FirewallIdentityStoreLdapServerBindingType), reflect.TypeOf([]FirewallIdentityStoreLdapServer{})))
	fieldNameMap["ldap_servers"] = "LdapServers"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["netbios_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["netbios_name"] = "NetbiosName"
	fields["selective_sync_settings"] = bindings.NewOptionalType(bindings.NewReferenceType(FirewallIdentityStoreSelectiveSyncSettingsBindingType))
	fieldNameMap["selective_sync_settings"] = "SelectiveSyncSettings"
	fields["sync_settings"] = bindings.NewOptionalType(bindings.NewReferenceType(FirewallIdentityStoreSyncSettingsBindingType))
	fieldNameMap["sync_settings"] = "SyncSettings"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.firewall_identity_store", fields, reflect.TypeOf(FirewallIdentityStore{}), fieldNameMap, validators)
}

func FirewallIdentityStoreLdapServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["domain_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["domain_name"] = "DomainName"
	fields["host"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host"] = "Host"
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["port"] = "Port"
	fields["protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["protocol"] = "Protocol"
	fields["thumbprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["thumbprint"] = "Thumbprint"
	fields["username"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["username"] = "Username"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.firewall_identity_store_ldap_server", fields, reflect.TypeOf(FirewallIdentityStoreLdapServer{}), fieldNameMap, validators)
}

func FirewallIdentityStoreSelectiveSyncSettingsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["selected_org_units"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["selected_org_units"] = "SelectedOrgUnits"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.firewall_identity_store_selective_sync_settings", fields, reflect.TypeOf(FirewallIdentityStoreSelectiveSyncSettings{}), fieldNameMap, validators)
}

func FirewallIdentityStoreSyncSettingsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["delta_sync_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["delta_sync_interval"] = "DeltaSyncInterval"
	fields["full_sync_cron_expr"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["full_sync_cron_expr"] = "FullSyncCronExpr"
	fields["sync_delay_in_sec"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sync_delay_in_sec"] = "SyncDelayInSec"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.firewall_identity_store_sync_settings", fields, reflect.TypeOf(FirewallIdentityStoreSyncSettings{}), fieldNameMap, validators)
}

func FloodProtectionProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["icmp_active_flow_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_active_flow_limit"] = "IcmpActiveFlowLimit"
	fields["other_active_conn_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["other_active_conn_limit"] = "OtherActiveConnLimit"
	fields["tcp_half_open_conn_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_half_open_conn_limit"] = "TcpHalfOpenConnLimit"
	fields["udp_active_flow_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["udp_active_flow_limit"] = "UdpActiveFlowLimit"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.flood_protection_profile", fields, reflect.TypeOf(FloodProtectionProfile{}), fieldNameMap, validators)
}

func FloodProtectionProfileBindingListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FloodProtectionProfileBindingMapBindingType), reflect.TypeOf([]FloodProtectionProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.flood_protection_profile_binding_list_result", fields, reflect.TypeOf(FloodProtectionProfileBindingListResult{}), fieldNameMap, validators)
}

func FloodProtectionProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.flood_protection_profile_binding_map", fields, reflect.TypeOf(FloodProtectionProfileBindingMap{}), fieldNameMap, validators)
}

func FloodProtectionProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(FloodProtectionProfileBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.flood_protection_profile_list_result", fields, reflect.TypeOf(FloodProtectionProfileListResult{}), fieldNameMap, validators)
}

func FooterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["actions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FooterActionBindingType), reflect.TypeOf([]FooterAction{})))
	fieldNameMap["actions"] = "Actions"
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.footer", fields, reflect.TypeOf(Footer{}), fieldNameMap, validators)
}

func FooterActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dock_to_container_footer"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dock_to_container_footer"] = "DockToContainerFooter"
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.footer_action", fields, reflect.TypeOf(FooterAction{}), fieldNameMap, validators)
}

func ForwardingPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["comments"] = "Comments"
	fields["internal_sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["internal_sequence_number"] = "InternalSequenceNumber"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["rule_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_count"] = "RuleCount"
	fields["scheduler_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheduler_path"] = "SchedulerPath"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["stateful"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateful"] = "Stateful"
	fields["tcp_strict"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_strict"] = "TcpStrict"
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ForwardingRuleBindingType), reflect.TypeOf([]ForwardingRule{})))
	fieldNameMap["rules"] = "Rules"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.forwarding_policy", fields, reflect.TypeOf(ForwardingPolicy{}), fieldNameMap, validators)
}

func ForwardingPolicyListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ForwardingPolicyBindingType), reflect.TypeOf([]ForwardingPolicy{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.forwarding_policy_list_result", fields, reflect.TypeOf(ForwardingPolicyListResult{}), fieldNameMap, validators)
}

func ForwardingRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["destination_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_groups"] = "DestinationGroups"
	fields["destinations_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["destinations_excluded"] = "DestinationsExcluded"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disabled"] = "Disabled"
	fields["ip_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_protocol"] = "IpProtocol"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["notes"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["notes"] = "Notes"
	fields["profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["profiles"] = "Profiles"
	fields["rule_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_id"] = "RuleId"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["service_entries"] = "ServiceEntries"
	fields["services"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["services"] = "Services"
	fields["source_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_groups"] = "SourceGroups"
	fields["sources_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sources_excluded"] = "SourcesExcluded"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.forwarding_rule", fields, reflect.TypeOf(ForwardingRule{}), fieldNameMap, validators)
}

func ForwardingRuleListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ForwardingRuleBindingType), reflect.TypeOf([]ForwardingRule{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.forwarding_rule_list_result", fields, reflect.TypeOf(ForwardingRuleListResult{}), fieldNameMap, validators)
}

func FullSyncStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["errors"] = "Errors"
	fields["full_sync_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["full_sync_id"] = "FullSyncId"
	fields["last_completed_stage"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["last_completed_stage"] = "LastCompletedStage"
	fields["last_upate_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_upate_time"] = "LastUpateTime"
	fields["start_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["start_time"] = "StartTime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.full_sync_state", fields, reflect.TypeOf(FullSyncState{}), fieldNameMap, validators)
}

func FullSyncStateListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FullSyncStateBindingType), reflect.TypeOf([]FullSyncState{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.full_sync_state_list_result", fields, reflect.TypeOf(FullSyncStateListResult{}), fieldNameMap, validators)
}

func GatewayFloodProtectionProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["icmp_active_flow_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_active_flow_limit"] = "IcmpActiveFlowLimit"
	fields["other_active_conn_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["other_active_conn_limit"] = "OtherActiveConnLimit"
	fields["tcp_half_open_conn_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_half_open_conn_limit"] = "TcpHalfOpenConnLimit"
	fields["udp_active_flow_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["udp_active_flow_limit"] = "UdpActiveFlowLimit"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_flood_protection_profile", fields, reflect.TypeOf(GatewayFloodProtectionProfile{}), fieldNameMap, validators)
}

func GatewayPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["comments"] = "Comments"
	fields["internal_sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["internal_sequence_number"] = "InternalSequenceNumber"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["rule_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_count"] = "RuleCount"
	fields["scheduler_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheduler_path"] = "SchedulerPath"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["stateful"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateful"] = "Stateful"
	fields["tcp_strict"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_strict"] = "TcpStrict"
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RuleBindingType), reflect.TypeOf([]Rule{})))
	fieldNameMap["rules"] = "Rules"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_policy", fields, reflect.TypeOf(GatewayPolicy{}), fieldNameMap, validators)
}

func GatewayPolicyListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GatewayPolicyBindingType), reflect.TypeOf([]GatewayPolicy{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_policy_list_result", fields, reflect.TypeOf(GatewayPolicyListResult{}), fieldNameMap, validators)
}

func GatewayQosProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["burst_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["burst_size"] = "BurstSize"
	fields["committed_bandwitdth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["committed_bandwitdth"] = "CommittedBandwitdth"
	fields["excess_action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["excess_action"] = "ExcessAction"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_qos_profile", fields, reflect.TypeOf(GatewayQosProfile{}), fieldNameMap, validators)
}

func GatewayQosProfileConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["egress_qos_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["egress_qos_profile_path"] = "EgressQosProfilePath"
	fields["ingress_qos_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ingress_qos_profile_path"] = "IngressQosProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_qos_profile_config", fields, reflect.TypeOf(GatewayQosProfileConfig{}), fieldNameMap, validators)
}

func GatewayQosProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GatewayQosProfileBindingType), reflect.TypeOf([]GatewayQosProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_qos_profile_list_result", fields, reflect.TypeOf(GatewayQosProfileListResult{}), fieldNameMap, validators)
}

func GatewayRouteCsvRecordBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["admin_distance"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["admin_distance"] = "AdminDistance"
	fields["edge_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_path"] = "EdgePath"
	fields["interface"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["interface"] = "_Interface"
	fields["lr_component_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lr_component_id"] = "LrComponentId"
	fields["lr_component_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lr_component_type"] = "LrComponentType"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	fields["next_hop"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_hop"] = "NextHop"
	fields["route_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["route_type"] = "RouteType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_route_csv_record", fields, reflect.TypeOf(GatewayRouteCsvRecord{}), fieldNameMap, validators)
}

func GatewayRouteTableInCsvFormatBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["file_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["file_name"] = "FileName"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GatewayRouteCsvRecordBindingType), reflect.TypeOf([]GatewayRouteCsvRecord{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gateway_route_table_in_csv_format", fields, reflect.TypeOf(GatewayRouteTableInCsvFormat{}), fieldNameMap, validators)
}

func GenericDhcpOptionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["code"] = "Code"
	fields["values"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["values"] = "Values"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.generic_dhcp_option", fields, reflect.TypeOf(GenericDhcpOption{}), fieldNameMap, validators)
}

func GenericPolicyRealizedResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["alarms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyAlarmResourceBindingType), reflect.TypeOf([]PolicyAlarmResource{})))
	fieldNameMap["alarms"] = "Alarms"
	fields["intent_reference"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["intent_reference"] = "IntentReference"
	fields["realization_api"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realization_api"] = "RealizationApi"
	fields["realization_specific_identifier"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realization_specific_identifier"] = "RealizationSpecificIdentifier"
	fields["runtime_error"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["runtime_error"] = "RuntimeError"
	fields["runtime_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["runtime_status"] = "RuntimeStatus"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["entity_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["entity_type"] = "EntityType"
	fields["extended_attributes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(AttributeValBindingType), reflect.TypeOf([]AttributeVal{})))
	fieldNameMap["extended_attributes"] = "ExtendedAttributes"
	fields["intent_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["intent_paths"] = "IntentPaths"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.generic_policy_realized_resource", fields, reflect.TypeOf(GenericPolicyRealizedResource{}), fieldNameMap, validators)
}

func GenericPolicyRealizedResourceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GenericPolicyRealizedResourceBindingType), reflect.TypeOf([]GenericPolicyRealizedResource{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.generic_policy_realized_resource_list_result", fields, reflect.TypeOf(GenericPolicyRealizedResourceListResult{}), fieldNameMap, validators)
}

func GlobalConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fips"] = bindings.NewOptionalType(bindings.NewReferenceType(FIPSGlobalConfigBindingType))
	fieldNameMap["fips"] = "Fips"
	fields["l3_forwarding_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["l3_forwarding_mode"] = "L3ForwardingMode"
	fields["mtu"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mtu"] = "Mtu"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.global_config", fields, reflect.TypeOf(GlobalConfig{}), fieldNameMap, validators)
}

func GlobalManagerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["connection_info"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SiteNodeConnectionInfoBindingType), reflect.TypeOf([]SiteNodeConnectionInfo{})))
	fieldNameMap["connection_info"] = "ConnectionInfo"
	fields["fail_if_rtt_exceeded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["fail_if_rtt_exceeded"] = "FailIfRttExceeded"
	fields["federation_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["federation_id"] = "FederationId"
	fields["maximum_rtt"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["maximum_rtt"] = "MaximumRtt"
	fields["mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mode"] = "Mode"
	fields["site_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_id"] = "SiteId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.global_manager", fields, reflect.TypeOf(GlobalManager{}), fieldNameMap, validators)
}

func GlobalManagerConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["rtep_config"] = bindings.NewOptionalType(bindings.NewReferenceType(GmRtepConfigBindingType))
	fieldNameMap["rtep_config"] = "RtepConfig"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.global_manager_config", fields, reflect.TypeOf(GlobalManagerConfig{}), fieldNameMap, validators)
}

func GlobalManagerListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GlobalManagerBindingType), reflect.TypeOf([]GlobalManager{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.global_manager_list_result", fields, reflect.TypeOf(GlobalManagerListResult{}), fieldNameMap, validators)
}

func GlobalRestoreStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.global_restore_status", fields, reflect.TypeOf(GlobalRestoreStatus{}), fieldNameMap, validators)
}

func GmFederationSiteConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["transit_subnet"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transit_subnet"] = "TransitSubnet"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gm_federation_site_config", fields, reflect.TypeOf(GmFederationSiteConfig{}), fieldNameMap, validators)
}

func GmRtepConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ibgp_password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ibgp_password"] = "IbgpPassword"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.gm_rtep_config", fields, reflect.TypeOf(GmRtepConfig{}), fieldNameMap, validators)
}

func GraphConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["axes"] = bindings.NewOptionalType(bindings.NewReferenceType(AxesBindingType))
	fieldNameMap["axes"] = "Axes"
	fields["display_x_value"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["display_x_value"] = "DisplayxValue"
	fields["graphs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GraphDefinitionBindingType), reflect.TypeOf([]GraphDefinition{})))
	fieldNameMap["graphs"] = "Graphs"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["sub_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_type"] = "SubType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.graph_configuration", fields, reflect.TypeOf(GraphConfiguration{}), fieldNameMap, validators)
}

func GraphDefinitionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["point_definition"] = bindings.NewOptionalType(bindings.NewReferenceType(PointDefinitionBindingType))
	fieldNameMap["point_definition"] = "PointDefinition"
	fields["render_configuration"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RenderConfigurationBindingType), reflect.TypeOf([]RenderConfiguration{})))
	fieldNameMap["render_configuration"] = "RenderConfiguration"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.graph_definition", fields, reflect.TypeOf(GraphDefinition{}), fieldNameMap, validators)
}

func GridConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["columns"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ColumnItemBindingType), reflect.TypeOf([]ColumnItem{})))
	fieldNameMap["columns"] = "Columns"
	fields["page_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["page_size"] = "PageSize"
	fields["row_list_fields"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RowListFieldBindingType), reflect.TypeOf([]RowListField{})))
	fieldNameMap["row_list_fields"] = "RowListFields"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.grid_configuration", fields, reflect.TypeOf(GridConfiguration{}), fieldNameMap, validators)
}

func GroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["expression"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ExpressionBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["expression"] = "Expression"
	fields["extended_expression"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ExpressionBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["extended_expression"] = "ExtendedExpression"
	fields["reference"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["reference"] = "Reference"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group", fields, reflect.TypeOf(Group{}), fieldNameMap, validators)
}

func GroupDiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_discovery_profile_binding_map", fields, reflect.TypeOf(GroupDiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func GroupListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GroupBindingType), reflect.TypeOf([]Group{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_list_result", fields, reflect.TypeOf(GroupListResult{}), fieldNameMap, validators)
}

func GroupMemberListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["members"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["members"] = "Members"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_member_list", fields, reflect.TypeOf(GroupMemberList{}), fieldNameMap, validators)
}

func GroupMemberTagsListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["member_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["member_type"] = "MemberType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_member_tags_list", fields, reflect.TypeOf(GroupMemberTagsList{}), fieldNameMap, validators)
}

func GroupMemberTypeListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_member_type_list_result", fields, reflect.TypeOf(GroupMemberTypeListResult{}), fieldNameMap, validators)
}

func GroupMonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ipfix_dfw_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ipfix_dfw_profile_path"] = "IpfixDfwProfilePath"
	fields["ipfix_l2_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ipfix_l2_profile_path"] = "IpfixL2ProfilePath"
	fields["port_mirroring_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["port_mirroring_profile_path"] = "PortMirroringProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_monitoring_profile_binding_map", fields, reflect.TypeOf(GroupMonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func GroupMonitoringProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GroupMonitoringProfileBindingMapBindingType), reflect.TypeOf([]GroupMonitoringProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_monitoring_profile_binding_map_list_result", fields, reflect.TypeOf(GroupMonitoringProfileBindingMapListResult{}), fieldNameMap, validators)
}

func GroupTagsListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(GroupMemberTagsListBindingType), reflect.TypeOf([]GroupMemberTagsList{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.group_tags_list", fields, reflect.TypeOf(GroupTagsList{}), fieldNameMap, validators)
}

func GuestInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["computer_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["computer_name"] = "ComputerName"
	fields["os_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["os_name"] = "OsName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.guest_info", fields, reflect.TypeOf(GuestInfo{}), fieldNameMap, validators)
}

func HeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	fields["content_alignment"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["content_alignment"] = "ContentAlignment"
	fields["sub_headers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PropertyItemBindingType), reflect.TypeOf([]PropertyItem{})))
	fieldNameMap["sub_headers"] = "SubHeaders"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.header", fields, reflect.TypeOf(Header{}), fieldNameMap, validators)
}

func HttpPolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.http_policy_lb_monitor_profile", fields, reflect.TypeOf(HttpPolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func HttpPolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["insert_client_ip_header"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["insert_client_ip_header"] = "InsertClientIpHeader"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile"] = "LbPersistenceProfile"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["traffic_source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["traffic_source"] = "TrafficSource"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.http_policy_lb_virtual_server", fields, reflect.TypeOf(HttpPolicyLbVirtualServer{}), fieldNameMap, validators)
}

func HttpsPolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.https_policy_lb_monitor_profile", fields, reflect.TypeOf(HttpsPolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func HttpsPolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["client_ssl_certificate_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["client_ssl_certificate_ids"] = "ClientSslCertificateIds"
	fields["client_ssl_settings"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["client_ssl_settings"] = "ClientSslSettings"
	fields["default_client_ssl_certificate_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["default_client_ssl_certificate_id"] = "DefaultClientSslCertificateId"
	fields["insert_client_ip_header"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["insert_client_ip_header"] = "InsertClientIpHeader"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile"] = "LbPersistenceProfile"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["traffic_source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["traffic_source"] = "TrafficSource"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.https_policy_lb_virtual_server", fields, reflect.TypeOf(HttpsPolicyLbVirtualServer{}), fieldNameMap, validators)
}

func ICMPTypeServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["icmp_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_code"] = "IcmpCode"
	fields["icmp_type"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_type"] = "IcmpType"
	fields["protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["protocol"] = "Protocol"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ICMP_type_service_entry", fields, reflect.TypeOf(ICMPTypeServiceEntry{}), fieldNameMap, validators)
}

func IGMPTypeServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IGMP_type_service_entry", fields, reflect.TypeOf(IGMPTypeServiceEntry{}), fieldNameMap, validators)
}

func IPAddressExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_address_expression", fields, reflect.TypeOf(IPAddressExpression{}), fieldNameMap, validators)
}

func IPAddressListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_address_list", fields, reflect.TypeOf(IPAddressList{}), fieldNameMap, validators)
}

func IPAddressPortPairBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["port"] = "Port"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_address_port_pair", fields, reflect.TypeOf(IPAddressPortPair{}), fieldNameMap, validators)
}

func IPDiscoveryProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["arp_nd_binding_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["arp_nd_binding_timeout"] = "ArpNdBindingTimeout"
	fields["duplicate_ip_detection"] = bindings.NewOptionalType(bindings.NewReferenceType(DuplicateIPDetectionOptionsBindingType))
	fieldNameMap["duplicate_ip_detection"] = "DuplicateIpDetection"
	fields["ip_v4_discovery_options"] = bindings.NewOptionalType(bindings.NewReferenceType(IPv4DiscoveryOptionsBindingType))
	fieldNameMap["ip_v4_discovery_options"] = "IpV4DiscoveryOptions"
	fields["ip_v6_discovery_options"] = bindings.NewOptionalType(bindings.NewReferenceType(IPv6DiscoveryOptionsBindingType))
	fieldNameMap["ip_v6_discovery_options"] = "IpV6DiscoveryOptions"
	fields["tofu_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tofu_enabled"] = "TofuEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_discovery_profile", fields, reflect.TypeOf(IPDiscoveryProfile{}), fieldNameMap, validators)
}

func IPDiscoveryProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPDiscoveryProfileBindingType), reflect.TypeOf([]IPDiscoveryProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_discovery_profile_list_result", fields, reflect.TypeOf(IPDiscoveryProfileListResult{}), fieldNameMap, validators)
}

func IPFIXDFWCollectorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["collector_ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["collector_ip_address"] = "CollectorIpAddress"
	fields["collector_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["collector_port"] = "CollectorPort"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIXDFW_collector", fields, reflect.TypeOf(IPFIXDFWCollector{}), fieldNameMap, validators)
}

func IPFIXDFWCollectorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ipfix_dfw_collectors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPFIXDFWCollectorBindingType), reflect.TypeOf([]IPFIXDFWCollector{})))
	fieldNameMap["ipfix_dfw_collectors"] = "IpfixDfwCollectors"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIXDFW_collector_profile", fields, reflect.TypeOf(IPFIXDFWCollectorProfile{}), fieldNameMap, validators)
}

func IPFIXDFWCollectorProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPFIXDFWCollectorProfileBindingType), reflect.TypeOf([]IPFIXDFWCollectorProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIXDFW_collector_profile_list_result", fields, reflect.TypeOf(IPFIXDFWCollectorProfileListResult{}), fieldNameMap, validators)
}

func IPFIXDFWProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["active_flow_export_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["active_flow_export_timeout"] = "ActiveFlowExportTimeout"
	fields["ipfix_dfw_collector_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ipfix_dfw_collector_profile_path"] = "IpfixDfwCollectorProfilePath"
	fields["observation_domain_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["observation_domain_id"] = "ObservationDomainId"
	fields["priority"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["priority"] = "Priority"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIXDFW_profile", fields, reflect.TypeOf(IPFIXDFWProfile{}), fieldNameMap, validators)
}

func IPFIXDFWProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPFIXDFWProfileBindingType), reflect.TypeOf([]IPFIXDFWProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIXDFW_profile_list_result", fields, reflect.TypeOf(IPFIXDFWProfileListResult{}), fieldNameMap, validators)
}

func IPFIXL2CollectorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["collector_ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["collector_ip_address"] = "CollectorIpAddress"
	fields["collector_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["collector_port"] = "CollectorPort"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIX_l2_collector", fields, reflect.TypeOf(IPFIXL2Collector{}), fieldNameMap, validators)
}

func IPFIXL2CollectorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ipfix_l2_collectors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPFIXL2CollectorBindingType), reflect.TypeOf([]IPFIXL2Collector{})))
	fieldNameMap["ipfix_l2_collectors"] = "IpfixL2Collectors"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIX_l2_collector_profile", fields, reflect.TypeOf(IPFIXL2CollectorProfile{}), fieldNameMap, validators)
}

func IPFIXL2CollectorProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPFIXL2CollectorProfileBindingType), reflect.TypeOf([]IPFIXL2CollectorProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIX_l2_collector_profile_list_result", fields, reflect.TypeOf(IPFIXL2CollectorProfileListResult{}), fieldNameMap, validators)
}

func IPFIXL2ProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["active_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["active_timeout"] = "ActiveTimeout"
	fields["export_overlay_flow"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["export_overlay_flow"] = "ExportOverlayFlow"
	fields["idle_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["idle_timeout"] = "IdleTimeout"
	fields["ipfix_collector_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ipfix_collector_profile_path"] = "IpfixCollectorProfilePath"
	fields["max_flows"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_flows"] = "MaxFlows"
	fields["observation_domain_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["observation_domain_id"] = "ObservationDomainId"
	fields["packet_sample_probability"] = bindings.NewOptionalType(bindings.NewDoubleType())
	fieldNameMap["packet_sample_probability"] = "PacketSampleProbability"
	fields["priority"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["priority"] = "Priority"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIX_l2_profile", fields, reflect.TypeOf(IPFIXL2Profile{}), fieldNameMap, validators)
}

func IPFIXL2ProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPFIXL2ProfileBindingType), reflect.TypeOf([]IPFIXL2Profile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IPFIX_l2_profile_list_result", fields, reflect.TypeOf(IPFIXL2ProfileListResult{}), fieldNameMap, validators)
}

func IPInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["prefix_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_length"] = "PrefixLength"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_info", fields, reflect.TypeOf(IPInfo{}), fieldNameMap, validators)
}

func IPProtocolServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["protocol_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["protocol_number"] = "ProtocolNumber"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_protocol_service_entry", fields, reflect.TypeOf(IPProtocolServiceEntry{}), fieldNameMap, validators)
}

func IPSecVpnDpdProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["dpd_probe_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dpd_probe_interval"] = "DpdProbeInterval"
	fields["dpd_probe_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dpd_probe_mode"] = "DpdProbeMode"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["retry_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["retry_count"] = "RetryCount"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_dpd_profile", fields, reflect.TypeOf(IPSecVpnDpdProfile{}), fieldNameMap, validators)
}

func IPSecVpnIkeProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["dh_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dh_groups"] = "DhGroups"
	fields["digest_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["digest_algorithms"] = "DigestAlgorithms"
	fields["encryption_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["encryption_algorithms"] = "EncryptionAlgorithms"
	fields["ike_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_version"] = "IkeVersion"
	fields["sa_life_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sa_life_time"] = "SaLifeTime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_ike_profile", fields, reflect.TypeOf(IPSecVpnIkeProfile{}), fieldNameMap, validators)
}

func IPSecVpnLocalEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["certificate_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["certificate_path"] = "CertificatePath"
	fields["local_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_address"] = "LocalAddress"
	fields["local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_id"] = "LocalId"
	fields["trust_ca_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["trust_ca_paths"] = "TrustCaPaths"
	fields["trust_crl_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["trust_crl_paths"] = "TrustCrlPaths"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_local_endpoint", fields, reflect.TypeOf(IPSecVpnLocalEndpoint{}), fieldNameMap, validators)
}

func IPSecVpnRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["destinations"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPSecVpnSubnetBindingType), reflect.TypeOf([]IPSecVpnSubnet{})))
	fieldNameMap["destinations"] = "Destinations"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["sources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPSecVpnSubnetBindingType), reflect.TypeOf([]IPSecVpnSubnet{})))
	fieldNameMap["sources"] = "Sources"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_rule", fields, reflect.TypeOf(IPSecVpnRule{}), fieldNameMap, validators)
}

func IPSecVpnServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["bypass_rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPSecVpnRuleBindingType), reflect.TypeOf([]IPSecVpnRule{})))
	fieldNameMap["bypass_rules"] = "BypassRules"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ha_sync"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ha_sync"] = "HaSync"
	fields["ike_log_level"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_log_level"] = "IkeLogLevel"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_service", fields, reflect.TypeOf(IPSecVpnService{}), fieldNameMap, validators)
}

func IPSecVpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["authentication_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["authentication_mode"] = "AuthenticationMode"
	fields["compliance_suite"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["compliance_suite"] = "ComplianceSuite"
	fields["connection_initiation_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connection_initiation_mode"] = "ConnectionInitiationMode"
	fields["dpd_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dpd_profile_path"] = "DpdProfilePath"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ike_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_profile_path"] = "IkeProfilePath"
	fields["local_endpoint_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_endpoint_path"] = "LocalEndpointPath"
	fields["peer_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_address"] = "PeerAddress"
	fields["peer_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_id"] = "PeerId"
	fields["psk"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["psk"] = "Psk"
	fields["tcp_mss_clamping"] = bindings.NewOptionalType(bindings.NewReferenceType(TcpMaximumSegmentSizeClampingBindingType))
	fieldNameMap["tcp_mss_clamping"] = "TcpMssClamping"
	fields["tunnel_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tunnel_profile_path"] = "TunnelProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_session", fields, reflect.TypeOf(IPSecVpnSession{}), fieldNameMap, validators)
}

func IPSecVpnSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["subnet"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["subnet"] = "Subnet"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_subnet", fields, reflect.TypeOf(IPSecVpnSubnet{}), fieldNameMap, validators)
}

func IPSecVpnTunnelInterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ip_subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TunnelInterfaceIPSubnetBindingType), reflect.TypeOf([]TunnelInterfaceIPSubnet{})))
	fieldNameMap["ip_subnets"] = "IpSubnets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_tunnel_interface", fields, reflect.TypeOf(IPSecVpnTunnelInterface{}), fieldNameMap, validators)
}

func IPSecVpnTunnelProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["df_policy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["df_policy"] = "DfPolicy"
	fields["dh_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dh_groups"] = "DhGroups"
	fields["digest_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["digest_algorithms"] = "DigestAlgorithms"
	fields["enable_perfect_forward_secrecy"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_perfect_forward_secrecy"] = "EnablePerfectForwardSecrecy"
	fields["encryption_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["encryption_algorithms"] = "EncryptionAlgorithms"
	fields["extended_attributes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(AttributeValBindingType), reflect.TypeOf([]AttributeVal{})))
	fieldNameMap["extended_attributes"] = "ExtendedAttributes"
	fields["sa_life_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sa_life_time"] = "SaLifeTime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.IP_sec_vpn_tunnel_profile", fields, reflect.TypeOf(IPSecVpnTunnelProfile{}), fieldNameMap, validators)
}

func IPv4DiscoveryOptionsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["arp_snooping_config"] = bindings.NewOptionalType(bindings.NewReferenceType(ArpSnoopingConfigBindingType))
	fieldNameMap["arp_snooping_config"] = "ArpSnoopingConfig"
	fields["dhcp_snooping_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dhcp_snooping_enabled"] = "DhcpSnoopingEnabled"
	fields["vmtools_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["vmtools_enabled"] = "VmtoolsEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.I_pv4_discovery_options", fields, reflect.TypeOf(IPv4DiscoveryOptions{}), fieldNameMap, validators)
}

func IPv6DADStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["transport_node"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceReferenceBindingType), reflect.TypeOf([]ResourceReference{})))
	fieldNameMap["transport_node"] = "TransportNode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.I_pv6_DAD_status", fields, reflect.TypeOf(IPv6DADStatus{}), fieldNameMap, validators)
}

func IPv6DiscoveryOptionsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dhcp_snooping_v6_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dhcp_snooping_v6_enabled"] = "DhcpSnoopingV6Enabled"
	fields["nd_snooping_config"] = bindings.NewOptionalType(bindings.NewReferenceType(NdSnoopingConfigBindingType))
	fieldNameMap["nd_snooping_config"] = "NdSnoopingConfig"
	fields["vmtools_v6_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["vmtools_v6_enabled"] = "VmtoolsV6Enabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.I_pv6_discovery_options", fields, reflect.TypeOf(IPv6DiscoveryOptions{}), fieldNameMap, validators)
}

func IPv6StatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["connected_segment_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connected_segment_path"] = "ConnectedSegmentPath"
	fields["dad_statuses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPv6DADStatusBindingType), reflect.TypeOf([]IPv6DADStatus{})))
	fieldNameMap["dad_statuses"] = "DadStatuses"
	fields["interface_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["interface_id"] = "InterfaceId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.I_pv6_status", fields, reflect.TypeOf(IPv6Status{}), fieldNameMap, validators)
}

func IcmpEchoRequestHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["id"] = "Id"
	fields["sequence"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence"] = "Sequence"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.icmp_echo_request_header", fields, reflect.TypeOf(IcmpEchoRequestHeader{}), fieldNameMap, validators)
}

func IcmpPolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.icmp_policy_lb_monitor_profile", fields, reflect.TypeOf(IcmpPolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func IconBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["placement"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["placement"] = "Placement"
	fields["tooltip"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TooltipBindingType), reflect.TypeOf([]Tooltip{})))
	fieldNameMap["tooltip"] = "Tooltip"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.icon", fields, reflect.TypeOf(Icon{}), fieldNameMap, validators)
}

func IdentityGroupExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["identity_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdentityGroupInfoBindingType), reflect.TypeOf([]IdentityGroupInfo{})))
	fieldNameMap["identity_groups"] = "IdentityGroups"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.identity_group_expression", fields, reflect.TypeOf(IdentityGroupExpression{}), fieldNameMap, validators)
}

func IdentityGroupInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["distinguished_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["distinguished_name"] = "DistinguishedName"
	fields["domain_base_distinguished_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["domain_base_distinguished_name"] = "DomainBaseDistinguishedName"
	fields["sid"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sid"] = "Sid"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.identity_group_info", fields, reflect.TypeOf(IdentityGroupInfo{}), fieldNameMap, validators)
}

func IdentitySourceLdapServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["bind_identity"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["bind_identity"] = "BindIdentity"
	fields["certificates"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["certificates"] = "Certificates"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	fields["use_starttls"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["use_starttls"] = "UseStarttls"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.identity_source_ldap_server", fields, reflect.TypeOf(IdentitySourceLdapServer{}), fieldNameMap, validators)
}

func IdentitySourceLdapServerEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	fields["use_starttls"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["use_starttls"] = "UseStarttls"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.identity_source_ldap_server_endpoint", fields, reflect.TypeOf(IdentitySourceLdapServerEndpoint{}), fieldNameMap, validators)
}

func IdentitySourceLdapServerProbeResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LdapProbeErrorBindingType), reflect.TypeOf([]LdapProbeError{})))
	fieldNameMap["errors"] = "Errors"
	fields["result"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["result"] = "Result"
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.identity_source_ldap_server_probe_result", fields, reflect.TypeOf(IdentitySourceLdapServerProbeResult{}), fieldNameMap, validators)
}

func IdsClusterConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["cluster"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyResourceReferenceBindingType))
	fieldNameMap["cluster"] = "Cluster"
	fields["ids_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ids_enabled"] = "IdsEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_cluster_config", fields, reflect.TypeOf(IdsClusterConfig{}), fieldNameMap, validators)
}

func IdsProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["severities"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdsProfileSeverityBindingType), reflect.TypeOf([]IdsProfileSeverity{})))
	fieldNameMap["severities"] = "Severities"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_profile", fields, reflect.TypeOf(IdsProfile{}), fieldNameMap, validators)
}

func IdsProfileSeverityBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ignore_signatures"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ignore_signatures"] = "IgnoreSignatures"
	fields["severity"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["severity"] = "Severity"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_profile_severity", fields, reflect.TypeOf(IdsProfileSeverity{}), fieldNameMap, validators)
}

func IdsRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["destination_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_groups"] = "DestinationGroups"
	fields["destinations_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["destinations_excluded"] = "DestinationsExcluded"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disabled"] = "Disabled"
	fields["ip_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_protocol"] = "IpProtocol"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["notes"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["notes"] = "Notes"
	fields["profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["profiles"] = "Profiles"
	fields["rule_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_id"] = "RuleId"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["service_entries"] = "ServiceEntries"
	fields["services"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["services"] = "Services"
	fields["source_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_groups"] = "SourceGroups"
	fields["sources_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sources_excluded"] = "SourcesExcluded"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["ids_profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ids_profiles"] = "IdsProfiles"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_rule", fields, reflect.TypeOf(IdsRule{}), fieldNameMap, validators)
}

func IdsSecurityPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["comments"] = "Comments"
	fields["internal_sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["internal_sequence_number"] = "InternalSequenceNumber"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["rule_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_count"] = "RuleCount"
	fields["scheduler_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheduler_path"] = "SchedulerPath"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["stateful"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateful"] = "Stateful"
	fields["tcp_strict"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_strict"] = "TcpStrict"
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdsRuleBindingType), reflect.TypeOf([]IdsRule{})))
	fieldNameMap["rules"] = "Rules"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_security_policy", fields, reflect.TypeOf(IdsSecurityPolicy{}), fieldNameMap, validators)
}

func IdsSignatureBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["attack_target"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["attack_target"] = "AttackTarget"
	fields["categories"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["categories"] = "Categories"
	fields["class_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["class_type"] = "ClassType"
	fields["cves"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["cves"] = "Cves"
	fields["cvssv2"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cvssv2"] = "Cvssv2"
	fields["cvssv3"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cvssv3"] = "Cvssv3"
	fields["flow"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["flow"] = "Flow"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["product_affected"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["product_affected"] = "ProductAffected"
	fields["severity"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["severity"] = "Severity"
	fields["signature_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["signature_id"] = "SignatureId"
	fields["signature_revision"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["signature_revision"] = "SignatureRevision"
	fields["urls"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["urls"] = "Urls"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_signature", fields, reflect.TypeOf(IdsSignature{}), fieldNameMap, validators)
}

func IdsStandaloneHostConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ids_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ids_enabled"] = "IdsEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ids_standalone_host_config", fields, reflect.TypeOf(IdsStandaloneHostConfig{}), fieldNameMap, validators)
}

func IncludedFieldsParametersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["included_fields"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["included_fields"] = "IncludedFields"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.included_fields_parameters", fields, reflect.TypeOf(IncludedFieldsParameters{}), fieldNameMap, validators)
}

func InfraBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["connectivity_strategy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity_strategy"] = "ConnectivityStrategy"
	fields["domains"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DomainBindingType), reflect.TypeOf([]Domain{})))
	fieldNameMap["domains"] = "Domains"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.infra", fields, reflect.TypeOf(Infra{}), fieldNameMap, validators)
}

func IngressBroadcastRateLimiterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["average_bandwidth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["average_bandwidth"] = "AverageBandwidth"
	fields["burst_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["burst_size"] = "BurstSize"
	fields["peak_bandwidth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["peak_bandwidth"] = "PeakBandwidth"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ingress_broadcast_rate_limiter", fields, reflect.TypeOf(IngressBroadcastRateLimiter{}), fieldNameMap, validators)
}

func IngressRateLimiterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["average_bandwidth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["average_bandwidth"] = "AverageBandwidth"
	fields["burst_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["burst_size"] = "BurstSize"
	fields["peak_bandwidth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["peak_bandwidth"] = "PeakBandwidth"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ingress_rate_limiter", fields, reflect.TypeOf(IngressRateLimiter{}), fieldNameMap, validators)
}

func InitiateClusterRestoreRequestBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["node_id"] = "NodeId"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.initiate_cluster_restore_request", fields, reflect.TypeOf(InitiateClusterRestoreRequest{}), fieldNameMap, validators)
}

func InjectionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["value"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(InjectionValueBindingType),}, bindings.REST))
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.injection", fields, reflect.TypeOf(Injection{}), fieldNameMap, validators)
}

func InjectionValueBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.injection_value", fields, reflect.TypeOf(InjectionValue{}), fieldNameMap, validators)
}

func InstructionInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["actions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["actions"] = "Actions"
	fields["fields"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["fields"] = "Fields"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.instruction_info", fields, reflect.TypeOf(InstructionInfo{}), fieldNameMap, validators)
}

func IntentRuntimeRequestParametersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.intent_runtime_request_parameters", fields, reflect.TypeOf(IntentRuntimeRequestParameters{}), fieldNameMap, validators)
}

func InterfaceArpCsvRecordBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip"] = "Ip"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interface_arp_csv_record", fields, reflect.TypeOf(InterfaceArpCsvRecord{}), fieldNameMap, validators)
}

func InterfaceArpEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip"] = "Ip"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interface_arp_entry", fields, reflect.TypeOf(InterfaceArpEntry{}), fieldNameMap, validators)
}

func InterfaceArpTableBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["edge_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_path"] = "EdgePath"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["interface_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["interface_path"] = "InterfacePath"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceArpEntryBindingType), reflect.TypeOf([]InterfaceArpEntry{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interface_arp_table", fields, reflect.TypeOf(InterfaceArpTable{}), fieldNameMap, validators)
}

func InterfaceArpTableInCsvFormatBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["file_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["file_name"] = "FileName"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceArpCsvRecordBindingType), reflect.TypeOf([]InterfaceArpCsvRecord{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interface_arp_table_in_csv_format", fields, reflect.TypeOf(InterfaceArpTableInCsvFormat{}), fieldNameMap, validators)
}

func InterfaceDADStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dad_statuses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceiPv6DADStatusBindingType), reflect.TypeOf([]InterfaceiPv6DADStatus{})))
	fieldNameMap["dad_statuses"] = "DadStatuses"
	fields["interface_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["interface_path"] = "InterfacePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interface_DAD_state", fields, reflect.TypeOf(InterfaceDADState{}), fieldNameMap, validators)
}

func InterfaceiPv6DADStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["edge_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["edge_paths"] = "EdgePaths"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interfacei_pv6_DAD_status", fields, reflect.TypeOf(InterfaceiPv6DADStatus{}), fieldNameMap, validators)
}

func InterfaceSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["prefix_len"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_len"] = "PrefixLen"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interface_subnet", fields, reflect.TypeOf(InterfaceSubnet{}), fieldNameMap, validators)
}

func IntersiteGatewayConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["fallback_sites"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["fallback_sites"] = "FallbackSites"
	fields["intersite_transit_subnet"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intersite_transit_subnet"] = "IntersiteTransitSubnet"
	fields["last_admin_active_epoch"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_admin_active_epoch"] = "LastAdminActiveEpoch"
	fields["primary_site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["primary_site_path"] = "PrimarySitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.intersite_gateway_config", fields, reflect.TypeOf(IntersiteGatewayConfig{}), fieldNameMap, validators)
}

func IntervalBackupScheduleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["seconds_between_backups"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["seconds_between_backups"] = "SecondsBetweenBackups"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.interval_backup_schedule", fields, reflect.TypeOf(IntervalBackupSchedule{}), fieldNameMap, validators)
}

func IpAddressAllocationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["allocation_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["allocation_ip"] = "AllocationIp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_allocation", fields, reflect.TypeOf(IpAddressAllocation{}), fieldNameMap, validators)
}

func IpAddressBlockBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["cidr"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cidr"] = "Cidr"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_block", fields, reflect.TypeOf(IpAddressBlock{}), fieldNameMap, validators)
}

func IpAddressInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source"] = "Source"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_info", fields, reflect.TypeOf(IpAddressInfo{}), fieldNameMap, validators)
}

func IpAddressPoolBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ip_release_delay"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ip_release_delay"] = "IpReleaseDelay"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_pool", fields, reflect.TypeOf(IpAddressPool{}), fieldNameMap, validators)
}

func IpAddressPoolBlockSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["auto_assign_gateway"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["auto_assign_gateway"] = "AutoAssignGateway"
	fields["ip_block_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_block_path"] = "IpBlockPath"
	fields["size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["size"] = "Size"
	fields["start_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["start_ip"] = "StartIp"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_pool_block_subnet", fields, reflect.TypeOf(IpAddressPoolBlockSubnet{}), fieldNameMap, validators)
}

func IpAddressPoolStaticSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["allocation_ranges"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IpPoolRangeBindingType), reflect.TypeOf([]IpPoolRange{})))
	fieldNameMap["allocation_ranges"] = "AllocationRanges"
	fields["cidr"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cidr"] = "Cidr"
	fields["dns_nameservers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_nameservers"] = "DnsNameservers"
	fields["dns_suffix"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dns_suffix"] = "DnsSuffix"
	fields["gateway_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["gateway_ip"] = "GatewayIp"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_pool_static_subnet", fields, reflect.TypeOf(IpAddressPoolStaticSubnet{}), fieldNameMap, validators)
}

func IpAddressPoolSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_address_pool_subnet", fields, reflect.TypeOf(IpAddressPoolSubnet{}), fieldNameMap, validators)
}

func IpPoolRangeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["end"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["end"] = "End"
	fields["start"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["start"] = "Start"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ip_pool_range", fields, reflect.TypeOf(IpPoolRange{}), fieldNameMap, validators)
}

func Ipv4HeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dst_ip"] = "DstIp"
	fields["flags"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["flags"] = "Flags"
	fields["protocol"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["protocol"] = "Protocol"
	fields["src_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["src_ip"] = "SrcIp"
	fields["src_subnet_prefix_len"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["src_subnet_prefix_len"] = "SrcSubnetPrefixLen"
	fields["ttl"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ttl"] = "Ttl"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ipv4_header", fields, reflect.TypeOf(Ipv4Header{}), fieldNameMap, validators)
}

func Ipv6DadProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["dad_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dad_mode"] = "DadMode"
	fields["ns_retries"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ns_retries"] = "NsRetries"
	fields["wait_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["wait_time"] = "WaitTime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ipv6_dad_profile", fields, reflect.TypeOf(Ipv6DadProfile{}), fieldNameMap, validators)
}

func Ipv6DadProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Ipv6DadProfileBindingType), reflect.TypeOf([]Ipv6DadProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ipv6_dad_profile_list_result", fields, reflect.TypeOf(Ipv6DadProfileListResult{}), fieldNameMap, validators)
}

func Ipv6HeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dst_ip"] = "DstIp"
	fields["hop_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["hop_limit"] = "HopLimit"
	fields["next_header"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["next_header"] = "NextHeader"
	fields["src_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["src_ip"] = "SrcIp"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ipv6_header", fields, reflect.TypeOf(Ipv6Header{}), fieldNameMap, validators)
}

func Ipv6NdraProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["dns_config"] = bindings.NewOptionalType(bindings.NewReferenceType(RaDNSConfigBindingType))
	fieldNameMap["dns_config"] = "DnsConfig"
	fields["ra_config"] = bindings.NewOptionalType(bindings.NewReferenceType(RAConfigBindingType))
	fieldNameMap["ra_config"] = "RaConfig"
	fields["ra_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ra_mode"] = "RaMode"
	fields["reachable_timer"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["reachable_timer"] = "ReachableTimer"
	fields["retransmit_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["retransmit_interval"] = "RetransmitInterval"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ipv6_ndra_profile", fields, reflect.TypeOf(Ipv6NdraProfile{}), fieldNameMap, validators)
}

func Ipv6NdraProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Ipv6NdraProfileBindingType), reflect.TypeOf([]Ipv6NdraProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ipv6_ndra_profile_list_result", fields, reflect.TypeOf(Ipv6NdraProfileListResult{}), fieldNameMap, validators)
}

func KeyValuePairBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.key_value_pair", fields, reflect.TypeOf(KeyValuePair{}), fieldNameMap, validators)
}

func L2BridgeEndpointProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["edge_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["edge_paths"] = "EdgePaths"
	fields["failover_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failover_mode"] = "FailoverMode"
	fields["ha_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ha_mode"] = "HaMode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_bridge_endpoint_profile", fields, reflect.TypeOf(L2BridgeEndpointProfile{}), fieldNameMap, validators)
}

func L2ExtensionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["l2vpn_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["l2vpn_path"] = "L2vpnPath"
	fields["l2vpn_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["l2vpn_paths"] = "L2vpnPaths"
	fields["local_egress"] = bindings.NewOptionalType(bindings.NewReferenceType(LocalEgressBindingType))
	fieldNameMap["local_egress"] = "LocalEgress"
	fields["tunnel_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tunnel_id"] = "TunnelId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_extension", fields, reflect.TypeOf(L2Extension{}), fieldNameMap, validators)
}

func L2VPNServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enable_hub"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_hub"] = "EnableHub"
	fields["encap_ip_pool"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["encap_ip_pool"] = "EncapIpPool"
	fields["mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mode"] = "Mode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_VPN_service", fields, reflect.TypeOf(L2VPNService{}), fieldNameMap, validators)
}

func L2VPNSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["transport_tunnels"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["transport_tunnels"] = "TransportTunnels"
	fields["tunnel_encapsulation"] = bindings.NewOptionalType(bindings.NewReferenceType(L2VPNTunnelEncapsulationBindingType))
	fieldNameMap["tunnel_encapsulation"] = "TunnelEncapsulation"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_VPN_session", fields, reflect.TypeOf(L2VPNSession{}), fieldNameMap, validators)
}

func L2VPNTunnelEncapsulationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["local_endpoint_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_endpoint_address"] = "LocalEndpointAddress"
	fields["peer_endpoint_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_endpoint_address"] = "PeerEndpointAddress"
	fields["protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["protocol"] = "Protocol"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_VPN_tunnel_encapsulation", fields, reflect.TypeOf(L2VPNTunnelEncapsulation{}), fieldNameMap, validators)
}

func L2VpnBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["transport_tunnels"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["transport_tunnels"] = "TransportTunnels"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_vpn", fields, reflect.TypeOf(L2Vpn{}), fieldNameMap, validators)
}

func L2VpnContextBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enable_hub"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_hub"] = "EnableHub"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l2_vpn_context", fields, reflect.TypeOf(L2VpnContext{}), fieldNameMap, validators)
}

func L3VpnBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["dh_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dh_groups"] = "DhGroups"
	fields["enable_perfect_forward_secrecy"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_perfect_forward_secrecy"] = "EnablePerfectForwardSecrecy"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ike_digest_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ike_digest_algorithms"] = "IkeDigestAlgorithms"
	fields["ike_encryption_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ike_encryption_algorithms"] = "IkeEncryptionAlgorithms"
	fields["ike_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_version"] = "IkeVersion"
	fields["l3vpn_session"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(L3VpnSessionBindingType),}, bindings.REST))
	fieldNameMap["l3vpn_session"] = "L3vpnSession"
	fields["local_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_address"] = "LocalAddress"
	fields["passphrases"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["passphrases"] = "Passphrases"
	fields["remote_private_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["remote_private_address"] = "RemotePrivateAddress"
	fields["remote_public_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["remote_public_address"] = "RemotePublicAddress"
	fields["tunnel_digest_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["tunnel_digest_algorithms"] = "TunnelDigestAlgorithms"
	fields["tunnel_encryption_algorithms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["tunnel_encryption_algorithms"] = "TunnelEncryptionAlgorithms"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l3_vpn", fields, reflect.TypeOf(L3Vpn{}), fieldNameMap, validators)
}

func L3VpnContextBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["available_local_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyIPAddressInfoBindingType), reflect.TypeOf([]PolicyIPAddressInfo{})))
	fieldNameMap["available_local_addresses"] = "AvailableLocalAddresses"
	fields["bypass_rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(L3VpnRuleBindingType), reflect.TypeOf([]L3VpnRule{})))
	fieldNameMap["bypass_rules"] = "BypassRules"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ike_log_level"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_log_level"] = "IkeLogLevel"
	fields["label"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["label"] = "Label"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l3_vpn_context", fields, reflect.TypeOf(L3VpnContext{}), fieldNameMap, validators)
}

func L3VpnRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["destinations"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(L3VpnSubnetBindingType), reflect.TypeOf([]L3VpnSubnet{})))
	fieldNameMap["destinations"] = "Destinations"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["sources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(L3VpnSubnetBindingType), reflect.TypeOf([]L3VpnSubnet{})))
	fieldNameMap["sources"] = "Sources"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l3_vpn_rule", fields, reflect.TypeOf(L3VpnRule{}), fieldNameMap, validators)
}

func L3VpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l3_vpn_session", fields, reflect.TypeOf(L3VpnSession{}), fieldNameMap, validators)
}

func L3VpnSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["subnet"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["subnet"] = "Subnet"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l3_vpn_subnet", fields, reflect.TypeOf(L3VpnSubnet{}), fieldNameMap, validators)
}

func L4PolicyLbPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["persistence"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["persistence"] = "Persistence"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l4_policy_lb_persistence_profile", fields, reflect.TypeOf(L4PolicyLbPersistenceProfile{}), fieldNameMap, validators)
}

func L4PortSetServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["destination_ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_ports"] = "DestinationPorts"
	fields["l4_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["l4_protocol"] = "L4Protocol"
	fields["source_ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_ports"] = "SourcePorts"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l4_port_set_service_entry", fields, reflect.TypeOf(L4PortSetServiceEntry{}), fieldNameMap, validators)
}

func L7PolicyLbPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["persistence"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["persistence"] = "Persistence"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.l7_policy_lb_persistence_profile", fields, reflect.TypeOf(L7PolicyLbPersistenceProfile{}), fieldNameMap, validators)
}

func LBAccessListControlBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["group_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["group_path"] = "GroupPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_access_list_control", fields, reflect.TypeOf(LBAccessListControl{}), fieldNameMap, validators)
}

func LBActiveMonitorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_active_monitor", fields, reflect.TypeOf(LBActiveMonitor{}), fieldNameMap, validators)
}

func LBAppProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_app_profile", fields, reflect.TypeOf(LBAppProfile{}), fieldNameMap, validators)
}

func LBClientCertificateIssuerDnConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["issuer_dn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["issuer_dn"] = "IssuerDn"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_client_certificate_issuer_dn_condition", fields, reflect.TypeOf(LBClientCertificateIssuerDnCondition{}), fieldNameMap, validators)
}

func LBClientCertificateSubjectDnConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["subject_dn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["subject_dn"] = "SubjectDn"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_client_certificate_subject_dn_condition", fields, reflect.TypeOf(LBClientCertificateSubjectDnCondition{}), fieldNameMap, validators)
}

func LBClientSslProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["cipher_group_label"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cipher_group_label"] = "CipherGroupLabel"
	fields["ciphers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ciphers"] = "Ciphers"
	fields["is_fips"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_fips"] = "IsFips"
	fields["is_secure"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_secure"] = "IsSecure"
	fields["prefer_server_ciphers"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["prefer_server_ciphers"] = "PreferServerCiphers"
	fields["protocols"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["protocols"] = "Protocols"
	fields["session_cache_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["session_cache_enabled"] = "SessionCacheEnabled"
	fields["session_cache_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["session_cache_timeout"] = "SessionCacheTimeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_client_ssl_profile", fields, reflect.TypeOf(LBClientSslProfile{}), fieldNameMap, validators)
}

func LBClientSslProfileBindingBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["certificate_chain_depth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["certificate_chain_depth"] = "CertificateChainDepth"
	fields["client_auth"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["client_auth"] = "ClientAuth"
	fields["client_auth_ca_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["client_auth_ca_paths"] = "ClientAuthCaPaths"
	fields["client_auth_crl_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["client_auth_crl_paths"] = "ClientAuthCrlPaths"
	fields["default_certificate_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["default_certificate_path"] = "DefaultCertificatePath"
	fields["sni_certificate_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["sni_certificate_paths"] = "SniCertificatePaths"
	fields["ssl_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ssl_profile_path"] = "SslProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_client_ssl_profile_binding", fields, reflect.TypeOf(LBClientSslProfileBinding{}), fieldNameMap, validators)
}

func LBConnectionDropActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_connection_drop_action", fields, reflect.TypeOf(LBConnectionDropAction{}), fieldNameMap, validators)
}

func LBCookiePersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cookie_domain"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cookie_domain"] = "CookieDomain"
	fields["cookie_fallback"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["cookie_fallback"] = "CookieFallback"
	fields["cookie_garble"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["cookie_garble"] = "CookieGarble"
	fields["cookie_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cookie_mode"] = "CookieMode"
	fields["cookie_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cookie_name"] = "CookieName"
	fields["cookie_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cookie_path"] = "CookiePath"
	fields["cookie_time"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBCookieTimeBindingType),}, bindings.REST))
	fieldNameMap["cookie_time"] = "CookieTime"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["persistence_shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["persistence_shared"] = "PersistenceShared"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_cookie_persistence_profile", fields, reflect.TypeOf(LBCookiePersistenceProfile{}), fieldNameMap, validators)
}

func LBCookieTimeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_cookie_time", fields, reflect.TypeOf(LBCookieTime{}), fieldNameMap, validators)
}

func LBFastTcpProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["close_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["close_timeout"] = "CloseTimeout"
	fields["ha_flow_mirroring_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ha_flow_mirroring_enabled"] = "HaFlowMirroringEnabled"
	fields["idle_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["idle_timeout"] = "IdleTimeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_fast_tcp_profile", fields, reflect.TypeOf(LBFastTcpProfile{}), fieldNameMap, validators)
}

func LBFastUdpProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["flow_mirroring_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["flow_mirroring_enabled"] = "FlowMirroringEnabled"
	fields["idle_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["idle_timeout"] = "IdleTimeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_fast_udp_profile", fields, reflect.TypeOf(LBFastUdpProfile{}), fieldNameMap, validators)
}

func LBGenericPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ha_persistence_mirroring_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ha_persistence_mirroring_enabled"] = "HaPersistenceMirroringEnabled"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["persistence_shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["persistence_shared"] = "PersistenceShared"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_generic_persistence_profile", fields, reflect.TypeOf(LBGenericPersistenceProfile{}), fieldNameMap, validators)
}

func LBHttpMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["request_body"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_body"] = "RequestBody"
	fields["request_headers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LbHttpRequestHeaderBindingType), reflect.TypeOf([]LbHttpRequestHeader{})))
	fieldNameMap["request_headers"] = "RequestHeaders"
	fields["request_method"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_method"] = "RequestMethod"
	fields["request_url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_url"] = "RequestUrl"
	fields["request_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_version"] = "RequestVersion"
	fields["response_body"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["response_body"] = "ResponseBody"
	fields["response_status_codes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewIntegerType(), reflect.TypeOf([]int64{})))
	fieldNameMap["response_status_codes"] = "ResponseStatusCodes"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_monitor_profile", fields, reflect.TypeOf(LBHttpMonitorProfile{}), fieldNameMap, validators)
}

func LBHttpProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["http_redirect_to"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["http_redirect_to"] = "HttpRedirectTo"
	fields["http_redirect_to_https"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["http_redirect_to_https"] = "HttpRedirectToHttps"
	fields["idle_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["idle_timeout"] = "IdleTimeout"
	fields["ntlm"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ntlm"] = "Ntlm"
	fields["request_body_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["request_body_size"] = "RequestBodySize"
	fields["request_header_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["request_header_size"] = "RequestHeaderSize"
	fields["response_buffering"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["response_buffering"] = "ResponseBuffering"
	fields["response_header_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["response_header_size"] = "ResponseHeaderSize"
	fields["response_timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["response_timeout"] = "ResponseTimeout"
	fields["x_forwarded_for"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["x_forwarded_for"] = "XForwardedFor"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_profile", fields, reflect.TypeOf(LBHttpProfile{}), fieldNameMap, validators)
}

func LBHttpRedirectActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["redirect_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["redirect_status"] = "RedirectStatus"
	fields["redirect_url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["redirect_url"] = "RedirectUrl"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_redirect_action", fields, reflect.TypeOf(LBHttpRedirectAction{}), fieldNameMap, validators)
}

func LBHttpRejectActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["reply_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["reply_message"] = "ReplyMessage"
	fields["reply_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["reply_status"] = "ReplyStatus"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_reject_action", fields, reflect.TypeOf(LBHttpRejectAction{}), fieldNameMap, validators)
}

func LBHttpRequestBodyConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["body_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["body_value"] = "BodyValue"
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_body_condition", fields, reflect.TypeOf(LBHttpRequestBodyCondition{}), fieldNameMap, validators)
}

func LBHttpRequestCookieConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["cookie_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cookie_name"] = "CookieName"
	fields["cookie_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cookie_value"] = "CookieValue"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_cookie_condition", fields, reflect.TypeOf(LBHttpRequestCookieCondition{}), fieldNameMap, validators)
}

func LBHttpRequestHeaderConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["header_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_value"] = "HeaderValue"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_header_condition", fields, reflect.TypeOf(LBHttpRequestHeaderCondition{}), fieldNameMap, validators)
}

func LBHttpRequestHeaderDeleteActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_header_delete_action", fields, reflect.TypeOf(LBHttpRequestHeaderDeleteAction{}), fieldNameMap, validators)
}

func LBHttpRequestHeaderRewriteActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["header_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_value"] = "HeaderValue"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_header_rewrite_action", fields, reflect.TypeOf(LBHttpRequestHeaderRewriteAction{}), fieldNameMap, validators)
}

func LBHttpRequestMethodConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["method"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["method"] = "Method"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_method_condition", fields, reflect.TypeOf(LBHttpRequestMethodCondition{}), fieldNameMap, validators)
}

func LBHttpRequestUriArgumentsConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["uri_arguments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uri_arguments"] = "UriArguments"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_uri_arguments_condition", fields, reflect.TypeOf(LBHttpRequestUriArgumentsCondition{}), fieldNameMap, validators)
}

func LBHttpRequestUriConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["uri"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uri"] = "Uri"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_uri_condition", fields, reflect.TypeOf(LBHttpRequestUriCondition{}), fieldNameMap, validators)
}

func LBHttpRequestUriRewriteActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["uri"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uri"] = "Uri"
	fields["uri_arguments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uri_arguments"] = "UriArguments"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_uri_rewrite_action", fields, reflect.TypeOf(LBHttpRequestUriRewriteAction{}), fieldNameMap, validators)
}

func LBHttpRequestVersionConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["version"] = "Version"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_request_version_condition", fields, reflect.TypeOf(LBHttpRequestVersionCondition{}), fieldNameMap, validators)
}

func LBHttpResponseHeaderConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["header_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_value"] = "HeaderValue"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_response_header_condition", fields, reflect.TypeOf(LBHttpResponseHeaderCondition{}), fieldNameMap, validators)
}

func LBHttpResponseHeaderDeleteActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_response_header_delete_action", fields, reflect.TypeOf(LBHttpResponseHeaderDeleteAction{}), fieldNameMap, validators)
}

func LBHttpResponseHeaderRewriteActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["header_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_value"] = "HeaderValue"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_response_header_rewrite_action", fields, reflect.TypeOf(LBHttpResponseHeaderRewriteAction{}), fieldNameMap, validators)
}

func LBHttpSslConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["client_certificate_issuer_dn"] = bindings.NewOptionalType(bindings.NewReferenceType(LBClientCertificateIssuerDnConditionBindingType))
	fieldNameMap["client_certificate_issuer_dn"] = "ClientCertificateIssuerDn"
	fields["client_certificate_subject_dn"] = bindings.NewOptionalType(bindings.NewReferenceType(LBClientCertificateSubjectDnConditionBindingType))
	fieldNameMap["client_certificate_subject_dn"] = "ClientCertificateSubjectDn"
	fields["client_supported_ssl_ciphers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["client_supported_ssl_ciphers"] = "ClientSupportedSslCiphers"
	fields["session_reused"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["session_reused"] = "SessionReused"
	fields["used_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["used_protocol"] = "UsedProtocol"
	fields["used_ssl_cipher"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["used_ssl_cipher"] = "UsedSslCipher"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_http_ssl_condition", fields, reflect.TypeOf(LBHttpSslCondition{}), fieldNameMap, validators)
}

func LBHttpsMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["request_body"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_body"] = "RequestBody"
	fields["request_headers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LbHttpRequestHeaderBindingType), reflect.TypeOf([]LbHttpRequestHeader{})))
	fieldNameMap["request_headers"] = "RequestHeaders"
	fields["request_method"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_method"] = "RequestMethod"
	fields["request_url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_url"] = "RequestUrl"
	fields["request_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["request_version"] = "RequestVersion"
	fields["response_body"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["response_body"] = "ResponseBody"
	fields["response_status_codes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewIntegerType(), reflect.TypeOf([]int64{})))
	fieldNameMap["response_status_codes"] = "ResponseStatusCodes"
	fields["server_ssl_profile_binding"] = bindings.NewOptionalType(bindings.NewReferenceType(LBServerSslProfileBindingBindingType))
	fieldNameMap["server_ssl_profile_binding"] = "ServerSslProfileBinding"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_https_monitor_profile", fields, reflect.TypeOf(LBHttpsMonitorProfile{}), fieldNameMap, validators)
}

func LBIcmpMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["data_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["data_length"] = "DataLength"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_icmp_monitor_profile", fields, reflect.TypeOf(LBIcmpMonitorProfile{}), fieldNameMap, validators)
}

func LBIpHeaderConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["group_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["group_path"] = "GroupPath"
	fields["source_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_address"] = "SourceAddress"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_ip_header_condition", fields, reflect.TypeOf(LBIpHeaderCondition{}), fieldNameMap, validators)
}

func LBJwtAuthActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["key"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBJwtKeyBindingType),}, bindings.REST))
	fieldNameMap["key"] = "Key"
	fields["pass_jwt_to_pool"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["pass_jwt_to_pool"] = "PassJwtToPool"
	fields["realm"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realm"] = "Realm"
	fields["tokens"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["tokens"] = "Tokens"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_jwt_auth_action", fields, reflect.TypeOf(LBJwtAuthAction{}), fieldNameMap, validators)
}

func LBJwtCertificateKeyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["certificate_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["certificate_path"] = "CertificatePath"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_jwt_certificate_key", fields, reflect.TypeOf(LBJwtCertificateKey{}), fieldNameMap, validators)
}

func LBJwtKeyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_jwt_key", fields, reflect.TypeOf(LBJwtKey{}), fieldNameMap, validators)
}

func LBJwtPublicKeyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["public_key_content"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["public_key_content"] = "PublicKeyContent"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_jwt_public_key", fields, reflect.TypeOf(LBJwtPublicKey{}), fieldNameMap, validators)
}

func LBJwtSymmetricKeyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_jwt_symmetric_key", fields, reflect.TypeOf(LBJwtSymmetricKey{}), fieldNameMap, validators)
}

func LBMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_monitor_profile", fields, reflect.TypeOf(LBMonitorProfile{}), fieldNameMap, validators)
}

func LBPassiveMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["max_fails"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_fails"] = "MaxFails"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_passive_monitor_profile", fields, reflect.TypeOf(LBPassiveMonitorProfile{}), fieldNameMap, validators)
}

func LBPersistenceCookieTimeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cookie_max_idle"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["cookie_max_idle"] = "CookieMaxIdle"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_persistence_cookie_time", fields, reflect.TypeOf(LBPersistenceCookieTime{}), fieldNameMap, validators)
}

func LBPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["persistence_shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["persistence_shared"] = "PersistenceShared"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_persistence_profile", fields, reflect.TypeOf(LBPersistenceProfile{}), fieldNameMap, validators)
}

func LBPoolBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["active_monitor_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["active_monitor_paths"] = "ActiveMonitorPaths"
	fields["algorithm"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["algorithm"] = "Algorithm"
	fields["member_group"] = bindings.NewOptionalType(bindings.NewReferenceType(LBPoolMemberGroupBindingType))
	fieldNameMap["member_group"] = "MemberGroup"
	fields["members"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LBPoolMemberBindingType), reflect.TypeOf([]LBPoolMember{})))
	fieldNameMap["members"] = "Members"
	fields["min_active_members"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["min_active_members"] = "MinActiveMembers"
	fields["passive_monitor_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["passive_monitor_path"] = "PassiveMonitorPath"
	fields["snat_translation"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBSnatTranslationBindingType),}, bindings.REST))
	fieldNameMap["snat_translation"] = "SnatTranslation"
	fields["tcp_multiplexing_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_multiplexing_enabled"] = "TcpMultiplexingEnabled"
	fields["tcp_multiplexing_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_multiplexing_number"] = "TcpMultiplexingNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_pool", fields, reflect.TypeOf(LBPool{}), fieldNameMap, validators)
}

func LBPoolMemberBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["admin_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["admin_state"] = "AdminState"
	fields["backup_member"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["backup_member"] = "BackupMember"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["max_concurrent_connections"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_concurrent_connections"] = "MaxConcurrentConnections"
	fields["port"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["port"] = "Port"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_pool_member", fields, reflect.TypeOf(LBPoolMember{}), fieldNameMap, validators)
}

func LBPoolMemberGroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["customized_members"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PoolMemberSettingBindingType), reflect.TypeOf([]PoolMemberSetting{})))
	fieldNameMap["customized_members"] = "CustomizedMembers"
	fields["group_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["group_path"] = "GroupPath"
	fields["ip_revision_filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_revision_filter"] = "IpRevisionFilter"
	fields["max_ip_list_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_ip_list_size"] = "MaxIpListSize"
	fields["port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["port"] = "Port"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_pool_member_group", fields, reflect.TypeOf(LBPoolMemberGroup{}), fieldNameMap, validators)
}

func LBRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["actions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBRuleActionBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["actions"] = "Actions"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["match_conditions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LBRuleConditionBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["match_conditions"] = "MatchConditions"
	fields["match_strategy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_strategy"] = "MatchStrategy"
	fields["phase"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["phase"] = "Phase"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_rule", fields, reflect.TypeOf(LBRule{}), fieldNameMap, validators)
}

func LBRuleActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_rule_action", fields, reflect.TypeOf(LBRuleAction{}), fieldNameMap, validators)
}

func LBRuleConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_rule_condition", fields, reflect.TypeOf(LBRuleCondition{}), fieldNameMap, validators)
}

func LBSelectPoolActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["pool_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pool_id"] = "PoolId"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_select_pool_action", fields, reflect.TypeOf(LBSelectPoolAction{}), fieldNameMap, validators)
}

func LBServerSslProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["cipher_group_label"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cipher_group_label"] = "CipherGroupLabel"
	fields["ciphers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ciphers"] = "Ciphers"
	fields["is_fips"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_fips"] = "IsFips"
	fields["is_secure"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_secure"] = "IsSecure"
	fields["protocols"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["protocols"] = "Protocols"
	fields["session_cache_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["session_cache_enabled"] = "SessionCacheEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_server_ssl_profile", fields, reflect.TypeOf(LBServerSslProfile{}), fieldNameMap, validators)
}

func LBServerSslProfileBindingBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["certificate_chain_depth"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["certificate_chain_depth"] = "CertificateChainDepth"
	fields["client_certificate_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["client_certificate_path"] = "ClientCertificatePath"
	fields["server_auth"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_auth"] = "ServerAuth"
	fields["server_auth_ca_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["server_auth_ca_paths"] = "ServerAuthCaPaths"
	fields["server_auth_crl_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["server_auth_crl_paths"] = "ServerAuthCrlPaths"
	fields["ssl_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ssl_profile_path"] = "SslProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_server_ssl_profile_binding", fields, reflect.TypeOf(LBServerSslProfileBinding{}), fieldNameMap, validators)
}

func LBServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["connectivity_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity_path"] = "ConnectivityPath"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["error_log_level"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_log_level"] = "ErrorLogLevel"
	fields["relax_scale_validation"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["relax_scale_validation"] = "RelaxScaleValidation"
	fields["size"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["size"] = "Size"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_service", fields, reflect.TypeOf(LBService{}), fieldNameMap, validators)
}

func LBSessionCookieTimeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cookie_max_idle"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["cookie_max_idle"] = "CookieMaxIdle"
	fields["cookie_max_life"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["cookie_max_life"] = "CookieMaxLife"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_session_cookie_time", fields, reflect.TypeOf(LBSessionCookieTime{}), fieldNameMap, validators)
}

func LBSnatAutoMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_snat_auto_map", fields, reflect.TypeOf(LBSnatAutoMap{}), fieldNameMap, validators)
}

func LBSnatDisabledBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_snat_disabled", fields, reflect.TypeOf(LBSnatDisabled{}), fieldNameMap, validators)
}

func LBSnatIpElementBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["prefix_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_length"] = "PrefixLength"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_snat_ip_element", fields, reflect.TypeOf(LBSnatIpElement{}), fieldNameMap, validators)
}

func LBSnatIpPoolBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LBSnatIpElementBindingType), reflect.TypeOf([]LBSnatIpElement{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_snat_ip_pool", fields, reflect.TypeOf(LBSnatIpPool{}), fieldNameMap, validators)
}

func LBSnatTranslationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_snat_translation", fields, reflect.TypeOf(LBSnatTranslation{}), fieldNameMap, validators)
}

func LBSourceIpPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ha_persistence_mirroring_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ha_persistence_mirroring_enabled"] = "HaPersistenceMirroringEnabled"
	fields["purge"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["purge"] = "Purge"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["persistence_shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["persistence_shared"] = "PersistenceShared"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_source_ip_persistence_profile", fields, reflect.TypeOf(LBSourceIpPersistenceProfile{}), fieldNameMap, validators)
}

func LBSslModeSelectionActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ssl_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ssl_mode"] = "SslMode"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_ssl_mode_selection_action", fields, reflect.TypeOf(LBSslModeSelectionAction{}), fieldNameMap, validators)
}

func LBSslProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_ssl_profile", fields, reflect.TypeOf(LBSslProfile{}), fieldNameMap, validators)
}

func LBSslSniConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["sni"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sni"] = "Sni"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_ssl_sni_condition", fields, reflect.TypeOf(LBSslSniCondition{}), fieldNameMap, validators)
}

func LBTcpHeaderConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["source_port"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_port"] = "SourcePort"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_tcp_header_condition", fields, reflect.TypeOf(LBTcpHeaderCondition{}), fieldNameMap, validators)
}

func LBTcpMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["receive"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["receive"] = "Receive"
	fields["send"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["send"] = "Send"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_tcp_monitor_profile", fields, reflect.TypeOf(LBTcpMonitorProfile{}), fieldNameMap, validators)
}

func LBUdpMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["receive"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["receive"] = "Receive"
	fields["send"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["send"] = "Send"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_udp_monitor_profile", fields, reflect.TypeOf(LBUdpMonitorProfile{}), fieldNameMap, validators)
}

func LBVariableAssignmentActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["variable_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["variable_name"] = "VariableName"
	fields["variable_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["variable_value"] = "VariableValue"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_variable_assignment_action", fields, reflect.TypeOf(LBVariableAssignmentAction{}), fieldNameMap, validators)
}

func LBVariableConditionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["case_sensitive"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["case_sensitive"] = "CaseSensitive"
	fields["match_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_type"] = "MatchType"
	fields["variable_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["variable_name"] = "VariableName"
	fields["variable_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["variable_value"] = "VariableValue"
	fields["inverse"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inverse"] = "Inverse"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_variable_condition", fields, reflect.TypeOf(LBVariableCondition{}), fieldNameMap, validators)
}

func LBVariablePersistenceLearnActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["persistence_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["persistence_profile_path"] = "PersistenceProfilePath"
	fields["variable_hash_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["variable_hash_enabled"] = "VariableHashEnabled"
	fields["variable_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["variable_name"] = "VariableName"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_variable_persistence_learn_action", fields, reflect.TypeOf(LBVariablePersistenceLearnAction{}), fieldNameMap, validators)
}

func LBVariablePersistenceOnActionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["persistence_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["persistence_profile_path"] = "PersistenceProfilePath"
	fields["variable_hash_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["variable_hash_enabled"] = "VariableHashEnabled"
	fields["variable_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["variable_name"] = "VariableName"
	fields["type"] = bindings.NewStringType()
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_variable_persistence_on_action", fields, reflect.TypeOf(LBVariablePersistenceOnAction{}), fieldNameMap, validators)
}

func LBVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_list_control"] = bindings.NewOptionalType(bindings.NewReferenceType(LBAccessListControlBindingType))
	fieldNameMap["access_list_control"] = "AccessListControl"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["application_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["application_profile_path"] = "ApplicationProfilePath"
	fields["client_ssl_profile_binding"] = bindings.NewOptionalType(bindings.NewReferenceType(LBClientSslProfileBindingBindingType))
	fieldNameMap["client_ssl_profile_binding"] = "ClientSslProfileBinding"
	fields["default_pool_member_ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["default_pool_member_ports"] = "DefaultPoolMemberPorts"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile_path"] = "LbPersistenceProfilePath"
	fields["lb_service_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_service_path"] = "LbServicePath"
	fields["log_significant_event_only"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["log_significant_event_only"] = "LogSignificantEventOnly"
	fields["max_concurrent_connections"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_concurrent_connections"] = "MaxConcurrentConnections"
	fields["max_new_connection_rate"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_new_connection_rate"] = "MaxNewConnectionRate"
	fields["pool_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pool_path"] = "PoolPath"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LBRuleBindingType), reflect.TypeOf([]LBRule{})))
	fieldNameMap["rules"] = "Rules"
	fields["server_ssl_profile_binding"] = bindings.NewOptionalType(bindings.NewReferenceType(LBServerSslProfileBindingBindingType))
	fieldNameMap["server_ssl_profile_binding"] = "ServerSslProfileBinding"
	fields["sorry_pool_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sorry_pool_path"] = "SorryPoolPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.LB_virtual_server", fields, reflect.TypeOf(LBVirtualServer{}), fieldNameMap, validators)
}

func LabelBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	fields["hover"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["hover"] = "Hover"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["text"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["text"] = "Text"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.label", fields, reflect.TypeOf(Label{}), fieldNameMap, validators)
}

func LabelValueConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["layout"] = bindings.NewOptionalType(bindings.NewReferenceType(LayoutBindingType))
	fieldNameMap["layout"] = "Layout"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["properties"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PropertyItemBindingType), reflect.TypeOf([]PropertyItem{})))
	fieldNameMap["properties"] = "Properties"
	fields["sub_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_type"] = "SubType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.label_value_configuration", fields, reflect.TypeOf(LabelValueConfiguration{}), fieldNameMap, validators)
}

func LacpGroupConfigInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["load_balance_algorithm"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["load_balance_algorithm"] = "LoadBalanceAlgorithm"
	fields["mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mode"] = "Mode"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["uplink_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["uplink_names"] = "UplinkNames"
	fields["uplink_num"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["uplink_num"] = "UplinkNum"
	fields["uplink_port_keys"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["uplink_port_keys"] = "UplinkPortKeys"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.lacp_group_config_info", fields, reflect.TypeOf(LacpGroupConfigInfo{}), fieldNameMap, validators)
}

func LayoutBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["properties"] = bindings.NewOptionalType(bindings.NewReferenceType(LayoutPropertiesBindingType))
	fieldNameMap["properties"] = "Properties"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.layout", fields, reflect.TypeOf(Layout{}), fieldNameMap, validators)
}

func LayoutPropertiesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["num_columns"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["num_columns"] = "NumColumns"
	fields["num_rows"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["num_rows"] = "NumRows"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.layout_properties", fields, reflect.TypeOf(LayoutProperties{}), fieldNameMap, validators)
}

func LbHttpRequestHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["header_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_name"] = "HeaderName"
	fields["header_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["header_value"] = "HeaderValue"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.lb_http_request_header", fields, reflect.TypeOf(LbHttpRequestHeader{}), fieldNameMap, validators)
}

func LdapIdentitySourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["base_dn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["base_dn"] = "BaseDn"
	fields["domain_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["domain_name"] = "DomainName"
	fields["ldap_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdentitySourceLdapServerBindingType), reflect.TypeOf([]IdentitySourceLdapServer{})))
	fieldNameMap["ldap_servers"] = "LdapServers"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ldap_identity_source", fields, reflect.TypeOf(LdapIdentitySource{}), fieldNameMap, validators)
}

func LdapIdentitySourceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(LdapIdentitySourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ldap_identity_source_list_result", fields, reflect.TypeOf(LdapIdentitySourceListResult{}), fieldNameMap, validators)
}

func LdapIdentitySourceProbeResultsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdentitySourceLdapServerProbeResultBindingType), reflect.TypeOf([]IdentitySourceLdapServerProbeResult{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ldap_identity_source_probe_results", fields, reflect.TypeOf(LdapIdentitySourceProbeResults{}), fieldNameMap, validators)
}

func LdapIdentitySourceSearchResultItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["common_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["common_name"] = "CommonName"
	fields["dn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dn"] = "Dn"
	fields["principal_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["principal_name"] = "PrincipalName"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ldap_identity_source_search_result_item", fields, reflect.TypeOf(LdapIdentitySourceSearchResultItem{}), fieldNameMap, validators)
}

func LdapIdentitySourceSearchResultListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LdapIdentitySourceSearchResultItemBindingType), reflect.TypeOf([]LdapIdentitySourceSearchResultItem{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ldap_identity_source_search_result_list", fields, reflect.TypeOf(LdapIdentitySourceSearchResultList{}), fieldNameMap, validators)
}

func LdapProbeErrorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["error_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_type"] = "ErrorType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ldap_probe_error", fields, reflect.TypeOf(LdapProbeError{}), fieldNameMap, validators)
}

func LegendBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alignment"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alignment"] = "Alignment"
	fields["display_count"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["display_count"] = "DisplayCount"
	fields["position"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["position"] = "Position"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	fields["unit"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unit"] = "Unit"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.legend", fields, reflect.TypeOf(Legend{}), fieldNameMap, validators)
}

func ListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.list_result", fields, reflect.TypeOf(ListResult{}), fieldNameMap, validators)
}

func LocalEgressBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["optimized_ips"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["optimized_ips"] = "OptimizedIps"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.local_egress", fields, reflect.TypeOf(LocalEgress{}), fieldNameMap, validators)
}

func LocalEgressRoutingEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["nexthop_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nexthop_address"] = "NexthopAddress"
	fields["prefix_list_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["prefix_list_paths"] = "PrefixListPaths"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.local_egress_routing_entry", fields, reflect.TypeOf(LocalEgressRoutingEntry{}), fieldNameMap, validators)
}

func LocaleServicesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["edge_cluster_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_cluster_path"] = "EdgeClusterPath"
	fields["ha_vip_configs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier0HaVipConfigBindingType), reflect.TypeOf([]Tier0HaVipConfig{})))
	fieldNameMap["ha_vip_configs"] = "HaVipConfigs"
	fields["preferred_edge_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["preferred_edge_paths"] = "PreferredEdgePaths"
	fields["route_redistribution_config"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0RouteRedistributionConfigBindingType))
	fieldNameMap["route_redistribution_config"] = "RouteRedistributionConfig"
	fields["route_redistribution_types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["route_redistribution_types"] = "RouteRedistributionTypes"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.locale_services", fields, reflect.TypeOf(LocaleServices{}), fieldNameMap, validators)
}

func LocaleServicesListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LocaleServicesBindingType), reflect.TypeOf([]LocaleServices{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.locale_services_list_result", fields, reflect.TypeOf(LocaleServicesListResult{}), fieldNameMap, validators)
}

func LogicalPortStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_bytes"] = "RxBytes"
	fields["rx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_packets"] = "RxPackets"
	fields["tx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_bytes"] = "TxBytes"
	fields["tx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_packets"] = "TxPackets"
	fields["dropped_by_security_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(PacketsDroppedBySecurityBindingType))
	fieldNameMap["dropped_by_security_packets"] = "DroppedBySecurityPackets"
	fields["mac_learning"] = bindings.NewOptionalType(bindings.NewReferenceType(MacLearningCountersBindingType))
	fieldNameMap["mac_learning"] = "MacLearning"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["logical_port_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_port_id"] = "LogicalPortId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_port_statistics", fields, reflect.TypeOf(LogicalPortStatistics{}), fieldNameMap, validators)
}

func LogicalRouterPortCountersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dropped_packets"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dropped_packets"] = "DroppedPackets"
	fields["total_bytes"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_bytes"] = "TotalBytes"
	fields["total_packets"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_packets"] = "TotalPackets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_port_counters", fields, reflect.TypeOf(LogicalRouterPortCounters{}), fieldNameMap, validators)
}

func LogicalRouterPortStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["logical_router_port_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_router_port_id"] = "LogicalRouterPortId"
	fields["per_node_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LogicalRouterPortStatisticsPerNodeBindingType), reflect.TypeOf([]LogicalRouterPortStatisticsPerNode{})))
	fieldNameMap["per_node_statistics"] = "PerNodeStatistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_port_statistics", fields, reflect.TypeOf(LogicalRouterPortStatistics{}), fieldNameMap, validators)
}

func LogicalRouterPortStatisticsPerNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["rx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["rx"] = "Rx"
	fields["tx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["tx"] = "Tx"
	fields["transport_node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_node_id"] = "TransportNodeId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_port_statistics_per_node", fields, reflect.TypeOf(LogicalRouterPortStatisticsPerNode{}), fieldNameMap, validators)
}

func LogicalRouterPortStatisticsSummaryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["rx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["rx"] = "Rx"
	fields["tx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["tx"] = "Tx"
	fields["logical_router_port_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_router_port_id"] = "LogicalRouterPortId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_port_statistics_summary", fields, reflect.TypeOf(LogicalRouterPortStatisticsSummary{}), fieldNameMap, validators)
}

func LogicalRouterStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConfigurationStateElementBindingType), reflect.TypeOf([]ConfigurationStateElement{})))
	fieldNameMap["details"] = "Details"
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	fields["pending_change_list"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["pending_change_list"] = "PendingChangeList"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_state", fields, reflect.TypeOf(LogicalRouterState{}), fieldNameMap, validators)
}

func LogicalRouterStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["locale_operation_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["locale_operation_mode"] = "LocaleOperationMode"
	fields["logical_router_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_router_id"] = "LogicalRouterId"
	fields["per_node_status"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LogicalRouterStatusPerNodeBindingType), reflect.TypeOf([]LogicalRouterStatusPerNode{})))
	fieldNameMap["per_node_status"] = "PerNodeStatus"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_status", fields, reflect.TypeOf(LogicalRouterStatus{}), fieldNameMap, validators)
}

func LogicalRouterStatusPerNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["high_availability_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["high_availability_status"] = "HighAvailabilityStatus"
	fields["service_router_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["service_router_id"] = "ServiceRouterId"
	fields["transport_node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_node_id"] = "TransportNodeId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_router_status_per_node", fields, reflect.TypeOf(LogicalRouterStatusPerNode{}), fieldNameMap, validators)
}

func LogicalSwitchStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_bytes"] = "RxBytes"
	fields["rx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_packets"] = "RxPackets"
	fields["tx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_bytes"] = "TxBytes"
	fields["tx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_packets"] = "TxPackets"
	fields["dropped_by_security_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(PacketsDroppedBySecurityBindingType))
	fieldNameMap["dropped_by_security_packets"] = "DroppedBySecurityPackets"
	fields["mac_learning"] = bindings.NewOptionalType(bindings.NewReferenceType(MacLearningCountersBindingType))
	fieldNameMap["mac_learning"] = "MacLearning"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["logical_switch_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_switch_id"] = "LogicalSwitchId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.logical_switch_statistics", fields, reflect.TypeOf(LogicalSwitchStatistics{}), fieldNameMap, validators)
}

func MACAddressExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["mac_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["mac_addresses"] = "MacAddresses"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.MAC_address_expression", fields, reflect.TypeOf(MACAddressExpression{}), fieldNameMap, validators)
}

func MACAddressListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["mac_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["mac_addresses"] = "MacAddresses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.MAC_address_list", fields, reflect.TypeOf(MACAddressList{}), fieldNameMap, validators)
}

func MacDiscoveryProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["mac_change_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["mac_change_enabled"] = "MacChangeEnabled"
	fields["mac_learning_aging_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mac_learning_aging_time"] = "MacLearningAgingTime"
	fields["mac_learning_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["mac_learning_enabled"] = "MacLearningEnabled"
	fields["mac_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mac_limit"] = "MacLimit"
	fields["mac_limit_policy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_limit_policy"] = "MacLimitPolicy"
	fields["remote_overlay_mac_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["remote_overlay_mac_limit"] = "RemoteOverlayMacLimit"
	fields["unknown_unicast_flooding_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["unknown_unicast_flooding_enabled"] = "UnknownUnicastFloodingEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.mac_discovery_profile", fields, reflect.TypeOf(MacDiscoveryProfile{}), fieldNameMap, validators)
}

func MacDiscoveryProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(MacDiscoveryProfileBindingType), reflect.TypeOf([]MacDiscoveryProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.mac_discovery_profile_list_result", fields, reflect.TypeOf(MacDiscoveryProfileListResult{}), fieldNameMap, validators)
}

func MacLearningCountersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["mac_not_learned_packets_allowed"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mac_not_learned_packets_allowed"] = "MacNotLearnedPacketsAllowed"
	fields["mac_not_learned_packets_dropped"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mac_not_learned_packets_dropped"] = "MacNotLearnedPacketsDropped"
	fields["macs_learned"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["macs_learned"] = "MacsLearned"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.mac_learning_counters", fields, reflect.TypeOf(MacLearningCounters{}), fieldNameMap, validators)
}

func ManagedResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.managed_resource", fields, reflect.TypeOf(ManagedResource{}), fieldNameMap, validators)
}

func ManagementConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["publish_fqdns"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["publish_fqdns"] = "PublishFqdns"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.management_config", fields, reflect.TypeOf(ManagementConfig{}), fieldNameMap, validators)
}

func MetadataProxyConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["crypto_protocols"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["crypto_protocols"] = "CryptoProtocols"
	fields["edge_cluster_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_cluster_path"] = "EdgeClusterPath"
	fields["enable_standby_relocation"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_standby_relocation"] = "EnableStandbyRelocation"
	fields["preferred_edge_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["preferred_edge_paths"] = "PreferredEdgePaths"
	fields["secret"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["secret"] = "Secret"
	fields["server_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_address"] = "ServerAddress"
	fields["server_certificates"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["server_certificates"] = "ServerCertificates"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.metadata_proxy_config", fields, reflect.TypeOf(MetadataProxyConfig{}), fieldNameMap, validators)
}

func MonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.monitoring_profile_binding_map", fields, reflect.TypeOf(MonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func MultiWidgetConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["widgets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(WidgetItemBindingType), reflect.TypeOf([]WidgetItem{})))
	fieldNameMap["widgets"] = "Widgets"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.multi_widget_configuration", fields, reflect.TypeOf(MultiWidgetConfiguration{}), fieldNameMap, validators)
}

func NSXTConnectionInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["edge_cluster_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["edge_cluster_ids"] = "EdgeClusterIds"
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["thumbprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["thumbprint"] = "Thumbprint"
	fields["transport_zone_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["transport_zone_ids"] = "TransportZoneIds"
	fields["username"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["username"] = "Username"
	fields["enforcement_point_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_address"] = "EnforcementPointAddress"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.NSXT_connection_info", fields, reflect.TypeOf(NSXTConnectionInfo{}), fieldNameMap, validators)
}

func NSXVConnectionInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["thumbprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["thumbprint"] = "Thumbprint"
	fields["username"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["username"] = "Username"
	fields["enforcement_point_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_address"] = "EnforcementPointAddress"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.NSXV_connection_info", fields, reflect.TypeOf(NSXVConnectionInfo{}), fieldNameMap, validators)
}

func NdSnoopingConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["nd_snooping_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["nd_snooping_enabled"] = "NdSnoopingEnabled"
	fields["nd_snooping_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["nd_snooping_limit"] = "NdSnoopingLimit"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nd_snooping_config", fields, reflect.TypeOf(NdSnoopingConfig{}), fieldNameMap, validators)
}

func NdpHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dst_ip"] = "DstIp"
	fields["msg_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["msg_type"] = "MsgType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ndp_header", fields, reflect.TypeOf(NdpHeader{}), fieldNameMap, validators)
}

func NestedExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["expressions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ExpressionBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["expressions"] = "Expressions"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nested_expression", fields, reflect.TypeOf(NestedExpression{}), fieldNameMap, validators)
}

func NestedServiceServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["nested_service_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nested_service_path"] = "NestedServicePath"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nested_service_service_entry", fields, reflect.TypeOf(NestedServiceServiceEntry{}), fieldNameMap, validators)
}

func NetworkErrorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["error_code"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_code"] = "ErrorCode"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["spec"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["spec"] = "Spec"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.network_error", fields, reflect.TypeOf(NetworkError{}), fieldNameMap, validators)
}

func NsxRoleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["permissions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["permissions"] = "Permissions"
	fields["role"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["role"] = "Role"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsx_role", fields, reflect.TypeOf(NsxRole{}), fieldNameMap, validators)
}

func NsxTDNSForwarderStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cached_entries"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["cached_entries"] = "CachedEntries"
	fields["conditional_forwarder_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NsxTDNSForwarderZoneStatisticsBindingType), reflect.TypeOf([]NsxTDNSForwarderZoneStatistics{})))
	fieldNameMap["conditional_forwarder_statistics"] = "ConditionalForwarderStatistics"
	fields["configured_cache_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["configured_cache_size"] = "ConfiguredCacheSize"
	fields["default_forwarder_statistics"] = bindings.NewOptionalType(bindings.NewReferenceType(NsxTDNSForwarderZoneStatisticsBindingType))
	fieldNameMap["default_forwarder_statistics"] = "DefaultForwarderStatistics"
	fields["queries_answered_locally"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["queries_answered_locally"] = "QueriesAnsweredLocally"
	fields["queries_forwarded"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["queries_forwarded"] = "QueriesForwarded"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	fields["total_queries"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_queries"] = "TotalQueries"
	fields["used_cache_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NsxtPerNodeUsedCacheStatisticsBindingType), reflect.TypeOf([]NsxtPerNodeUsedCacheStatistics{})))
	fieldNameMap["used_cache_statistics"] = "UsedCacheStatistics"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsx_TDNS_forwarder_statistics", fields, reflect.TypeOf(NsxTDNSForwarderStatistics{}), fieldNameMap, validators)
}

func NsxTDNSForwarderStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["extra_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["extra_message"] = "ExtraMessage"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timestamp"] = "Timestamp"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsx_TDNS_forwarder_status", fields, reflect.TypeOf(NsxTDNSForwarderStatus{}), fieldNameMap, validators)
}

func NsxTDNSForwarderZoneStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["domain_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["domain_names"] = "DomainNames"
	fields["upstream_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NsxtUpstreamServerStatisticsBindingType), reflect.TypeOf([]NsxtUpstreamServerStatistics{})))
	fieldNameMap["upstream_statistics"] = "UpstreamStatistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsx_TDNS_forwarder_zone_statistics", fields, reflect.TypeOf(NsxTDNSForwarderZoneStatistics{}), fieldNameMap, validators)
}

func NsxtDnsAnswerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["authoritative_answers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NsxtDnsQueryAnswerBindingType), reflect.TypeOf([]NsxtDnsQueryAnswer{})))
	fieldNameMap["authoritative_answers"] = "AuthoritativeAnswers"
	fields["dns_server"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dns_server"] = "DnsServer"
	fields["edge_node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_node_id"] = "EdgeNodeId"
	fields["non_authoritative_answers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NsxtDnsQueryAnswerBindingType), reflect.TypeOf([]NsxtDnsQueryAnswer{})))
	fieldNameMap["non_authoritative_answers"] = "NonAuthoritativeAnswers"
	fields["raw_answer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["raw_answer"] = "RawAnswer"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsxt_dns_answer", fields, reflect.TypeOf(NsxtDnsAnswer{}), fieldNameMap, validators)
}

func NsxtDnsQueryAnswerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["address"] = "Address"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsxt_dns_query_answer", fields, reflect.TypeOf(NsxtDnsQueryAnswer{}), fieldNameMap, validators)
}

func NsxtPerNodeUsedCacheStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cached_entries"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["cached_entries"] = "CachedEntries"
	fields["node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["node_id"] = "NodeId"
	fields["used_cache_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["used_cache_size"] = "UsedCacheSize"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsxt_per_node_used_cache_statistics", fields, reflect.TypeOf(NsxtPerNodeUsedCacheStatistics{}), fieldNameMap, validators)
}

func NsxtUpstreamServerStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["queries_failed"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["queries_failed"] = "QueriesFailed"
	fields["queries_succeeded"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["queries_succeeded"] = "QueriesSucceeded"
	fields["upstream_server"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["upstream_server"] = "UpstreamServer"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.nsxt_upstream_server_statistics", fields, reflect.TypeOf(NsxtUpstreamServerStatistics{}), fieldNameMap, validators)
}

func ObjectRolePermissionGroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["inheritance_disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inheritance_disabled"] = "InheritanceDisabled"
	fields["operation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operation"] = "Operation"
	fields["path_prefix"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path_prefix"] = "PathPrefix"
	fields["role_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["role_name"] = "RoleName"
	fields["rule_disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["rule_disabled"] = "RuleDisabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.object_role_permission_group", fields, reflect.TypeOf(ObjectRolePermissionGroup{}), fieldNameMap, validators)
}

func ObjectRolePermissionGroupListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ObjectRolePermissionGroupBindingType), reflect.TypeOf([]ObjectRolePermissionGroup{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.object_role_permission_group_list_result", fields, reflect.TypeOf(ObjectRolePermissionGroupListResult{}), fieldNameMap, validators)
}

func OpenLdapIdentitySourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["base_dn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["base_dn"] = "BaseDn"
	fields["domain_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["domain_name"] = "DomainName"
	fields["ldap_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IdentitySourceLdapServerBindingType), reflect.TypeOf([]IdentitySourceLdapServer{})))
	fieldNameMap["ldap_servers"] = "LdapServers"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.open_ldap_identity_source", fields, reflect.TypeOf(OpenLdapIdentitySource{}), fieldNameMap, validators)
}

func OverriddenResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["intent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["intent_path"] = "IntentPath"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.overridden_resource", fields, reflect.TypeOf(OverriddenResource{}), fieldNameMap, validators)
}

func OverriddenResourceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(OverriddenResourceBindingType), reflect.TypeOf([]OverriddenResource{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.overridden_resource_list_result", fields, reflect.TypeOf(OverriddenResourceListResult{}), fieldNameMap, validators)
}

func PacketDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["frame_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["frame_size"] = "FrameSize"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["routed"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["routed"] = "Routed"
	fields["transport_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_type"] = "TransportType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.packet_data", fields, reflect.TypeOf(PacketData{}), fieldNameMap, validators)
}

func PacketTypeAndCounterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["counter"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["counter"] = "Counter"
	fields["packet_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["packet_type"] = "PacketType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.packet_type_and_counter", fields, reflect.TypeOf(PacketTypeAndCounter{}), fieldNameMap, validators)
}

func PacketsDroppedBySecurityBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["bpdu_filter_dropped"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["bpdu_filter_dropped"] = "BpduFilterDropped"
	fields["dhcp_client_dropped_ipv4"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dhcp_client_dropped_ipv4"] = "DhcpClientDroppedIpv4"
	fields["dhcp_client_dropped_ipv6"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dhcp_client_dropped_ipv6"] = "DhcpClientDroppedIpv6"
	fields["dhcp_server_dropped_ipv4"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dhcp_server_dropped_ipv4"] = "DhcpServerDroppedIpv4"
	fields["dhcp_server_dropped_ipv6"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dhcp_server_dropped_ipv6"] = "DhcpServerDroppedIpv6"
	fields["spoof_guard_dropped"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PacketTypeAndCounterBindingType), reflect.TypeOf([]PacketTypeAndCounter{})))
	fieldNameMap["spoof_guard_dropped"] = "SpoofGuardDropped"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.packets_dropped_by_security", fields, reflect.TypeOf(PacketsDroppedBySecurity{}), fieldNameMap, validators)
}

func PartialPatchConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enable_partial_patch"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_partial_patch"] = "EnablePartialPatch"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.partial_patch_config", fields, reflect.TypeOf(PartialPatchConfig{}), fieldNameMap, validators)
}

func PatchResourcesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["body"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["body"] = "Body"
	fields["injections"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InjectionBindingType), reflect.TypeOf([]Injection{})))
	fieldNameMap["injections"] = "Injections"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.patch_resources", fields, reflect.TypeOf(PatchResources{}), fieldNameMap, validators)
}

func PathExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["paths"] = "Paths"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.path_expression", fields, reflect.TypeOf(PathExpression{}), fieldNameMap, validators)
}

func PathPermissionGroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["object_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["object_path"] = "ObjectPath"
	fields["operation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operation"] = "Operation"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.path_permission_group", fields, reflect.TypeOf(PathPermissionGroup{}), fieldNameMap, validators)
}

func PeerCertificateChainBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(X509CertificateBindingType), reflect.TypeOf([]X509Certificate{})))
	fieldNameMap["details"] = "Details"
	fields["pem_encoded"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pem_encoded"] = "PemEncoded"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.peer_certificate_chain", fields, reflect.TypeOf(PeerCertificateChain{}), fieldNameMap, validators)
}

func PendingChangesInfoNsxtBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["pending_changes_flag"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["pending_changes_flag"] = "PendingChangesFlag"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.pending_changes_info_nsxt", fields, reflect.TypeOf(PendingChangesInfoNsxt{}), fieldNameMap, validators)
}

func PerStepRestoreStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.per_step_restore_status", fields, reflect.TypeOf(PerStepRestoreStatus{}), fieldNameMap, validators)
}

func PointDefinitionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field"] = "Field"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["tooltip"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TooltipBindingType), reflect.TypeOf([]Tooltip{})))
	fieldNameMap["tooltip"] = "Tooltip"
	fields["x_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["x_value"] = "XValue"
	fields["y_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["y_value"] = "YValue"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.point_definition", fields, reflect.TypeOf(PointDefinition{}), fieldNameMap, validators)
}

func PolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["comments"] = "Comments"
	fields["internal_sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["internal_sequence_number"] = "InternalSequenceNumber"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["rule_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_count"] = "RuleCount"
	fields["scheduler_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheduler_path"] = "SchedulerPath"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["stateful"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateful"] = "Stateful"
	fields["tcp_strict"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_strict"] = "TcpStrict"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy", fields, reflect.TypeOf(Policy{}), fieldNameMap, validators)
}

func PolicyAlarmResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["error_details"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyApiErrorBindingType))
	fieldNameMap["error_details"] = "ErrorDetails"
	fields["message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["message"] = "Message"
	fields["source_reference"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_reference"] = "SourceReference"
	fields["source_site_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_site_id"] = "SourceSiteId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_alarm_resource", fields, reflect.TypeOf(PolicyAlarmResource{}), fieldNameMap, validators)
}

func PolicyAlarmResourceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyAlarmResourceBindingType), reflect.TypeOf([]PolicyAlarmResource{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_alarm_resource_list_result", fields, reflect.TypeOf(PolicyAlarmResourceListResult{}), fieldNameMap, validators)
}

func PolicyApiErrorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["details"] = "Details"
	fields["error_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["error_code"] = "ErrorCode"
	fields["error_data"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["error_data"] = "ErrorData"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["module_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["module_name"] = "ModuleName"
	fields["related_errors"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyRelatedApiErrorBindingType), reflect.TypeOf([]PolicyRelatedApiError{})))
	fieldNameMap["related_errors"] = "RelatedErrors"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_api_error", fields, reflect.TypeOf(PolicyApiError{}), fieldNameMap, validators)
}

func PolicyAttributesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["datatype"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["datatype"] = "Datatype"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["isALGType"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["isALGType"] = "IsALGType"
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["sub_attributes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicySubAttributesBindingType), reflect.TypeOf([]PolicySubAttributes{})))
	fieldNameMap["sub_attributes"] = "SubAttributes"
	fields["value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_attributes", fields, reflect.TypeOf(PolicyAttributes{}), fieldNameMap, validators)
}

func PolicyBasedIPSecVpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPSecVpnRuleBindingType), reflect.TypeOf([]IPSecVpnRule{})))
	fieldNameMap["rules"] = "Rules"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["authentication_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["authentication_mode"] = "AuthenticationMode"
	fields["compliance_suite"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["compliance_suite"] = "ComplianceSuite"
	fields["connection_initiation_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connection_initiation_mode"] = "ConnectionInitiationMode"
	fields["dpd_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dpd_profile_path"] = "DpdProfilePath"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ike_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_profile_path"] = "IkeProfilePath"
	fields["local_endpoint_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_endpoint_path"] = "LocalEndpointPath"
	fields["peer_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_address"] = "PeerAddress"
	fields["peer_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_id"] = "PeerId"
	fields["psk"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["psk"] = "Psk"
	fields["tcp_mss_clamping"] = bindings.NewOptionalType(bindings.NewReferenceType(TcpMaximumSegmentSizeClampingBindingType))
	fieldNameMap["tcp_mss_clamping"] = "TcpMssClamping"
	fields["tunnel_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tunnel_profile_path"] = "TunnelProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_based_IP_sec_vpn_session", fields, reflect.TypeOf(PolicyBasedIPSecVpnSession{}), fieldNameMap, validators)
}

func PolicyBasedL3VpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(L3VpnRuleBindingType), reflect.TypeOf([]L3VpnRule{})))
	fieldNameMap["rules"] = "Rules"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_based_l3_vpn_session", fields, reflect.TypeOf(PolicyBasedL3VpnSession{}), fieldNameMap, validators)
}

func PolicyBgpNeighborStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["address_families"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BgpAddressFamilyBindingType), reflect.TypeOf([]BgpAddressFamily{})))
	fieldNameMap["address_families"] = "AddressFamilies"
	fields["announced_capabilities"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["announced_capabilities"] = "AnnouncedCapabilities"
	fields["connection_drop_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["connection_drop_count"] = "ConnectionDropCount"
	fields["connection_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connection_state"] = "ConnectionState"
	fields["edge_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_path"] = "EdgePath"
	fields["established_connection_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["established_connection_count"] = "EstablishedConnectionCount"
	fields["graceful_restart_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["graceful_restart_mode"] = "GracefulRestartMode"
	fields["hold_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["hold_time"] = "HoldTime"
	fields["keep_alive_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["keep_alive_interval"] = "KeepAliveInterval"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["local_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["local_port"] = "LocalPort"
	fields["messages_received"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["messages_received"] = "MessagesReceived"
	fields["messages_sent"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["messages_sent"] = "MessagesSent"
	fields["negotiated_capability"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["negotiated_capability"] = "NegotiatedCapability"
	fields["neighbor_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["neighbor_address"] = "NeighborAddress"
	fields["neighbor_router_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["neighbor_router_id"] = "NeighborRouterId"
	fields["remote_as_number"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["remote_as_number"] = "RemoteAsNumber"
	fields["remote_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["remote_port"] = "RemotePort"
	fields["remote_site"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceReferenceBindingType))
	fieldNameMap["remote_site"] = "RemoteSite"
	fields["source_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_address"] = "SourceAddress"
	fields["tier0_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tier0_path"] = "Tier0Path"
	fields["time_since_established"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["time_since_established"] = "TimeSinceEstablished"
	fields["total_in_prefix_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_in_prefix_count"] = "TotalInPrefixCount"
	fields["total_out_prefix_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_out_prefix_count"] = "TotalOutPrefixCount"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_bgp_neighbor_status", fields, reflect.TypeOf(PolicyBgpNeighborStatus{}), fieldNameMap, validators)
}

func PolicyBgpNeighborsStatusListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyBgpNeighborStatusBindingType), reflect.TypeOf([]PolicyBgpNeighborStatus{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_bgp_neighbors_status_list_result", fields, reflect.TypeOf(PolicyBgpNeighborsStatusListResult{}), fieldNameMap, validators)
}

func PolicyComplianceStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["last_updated_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_updated_time"] = "LastUpdatedTime"
	fields["non_compliant_configs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyNonCompliantConfigBindingType), reflect.TypeOf([]PolicyNonCompliantConfig{})))
	fieldNameMap["non_compliant_configs"] = "NonCompliantConfigs"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_compliance_status", fields, reflect.TypeOf(PolicyComplianceStatus{}), fieldNameMap, validators)
}

func PolicyConfigResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_config_resource", fields, reflect.TypeOf(PolicyConfigResource{}), fieldNameMap, validators)
}

func PolicyContextProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["attributes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyAttributesBindingType), reflect.TypeOf([]PolicyAttributes{})))
	fieldNameMap["attributes"] = "Attributes"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_context_profile", fields, reflect.TypeOf(PolicyContextProfile{}), fieldNameMap, validators)
}

func PolicyContextProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyContextProfileBindingType), reflect.TypeOf([]PolicyContextProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_context_profile_list_result", fields, reflect.TypeOf(PolicyContextProfileListResult{}), fieldNameMap, validators)
}

func PolicyDnsAnswerPerEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_dns_answer_per_enforcement_point", fields, reflect.TypeOf(PolicyDnsAnswerPerEnforcementPoint{}), fieldNameMap, validators)
}

func PolicyDnsForwarderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["conditional_forwarder_zone_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["conditional_forwarder_zone_paths"] = "ConditionalForwarderZonePaths"
	fields["default_forwarder_zone_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["default_forwarder_zone_path"] = "DefaultForwarderZonePath"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["listener_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["listener_ip"] = "ListenerIp"
	fields["log_level"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["log_level"] = "LogLevel"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_dns_forwarder", fields, reflect.TypeOf(PolicyDnsForwarder{}), fieldNameMap, validators)
}

func PolicyDnsForwarderZoneBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["dns_domain_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_domain_names"] = "DnsDomainNames"
	fields["source_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_ip"] = "SourceIp"
	fields["upstream_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["upstream_servers"] = "UpstreamServers"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_dns_forwarder_zone", fields, reflect.TypeOf(PolicyDnsForwarderZone{}), fieldNameMap, validators)
}

func PolicyDnsForwarderZoneListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyDnsForwarderZoneBindingType), reflect.TypeOf([]PolicyDnsForwarderZone{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_dns_forwarder_zone_list_result", fields, reflect.TypeOf(PolicyDnsForwarderZoneListResult{}), fieldNameMap, validators)
}

func PolicyDraftBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["is_auto_draft"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_auto_draft"] = "IsAutoDraft"
	fields["lock_comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_comments"] = "LockComments"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["ref_draft_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ref_draft_path"] = "RefDraftPath"
	fields["system_area"] = bindings.NewOptionalType(bindings.NewReferenceType(InfraBindingType))
	fieldNameMap["system_area"] = "SystemArea"
	fields["user_area"] = bindings.NewOptionalType(bindings.NewReferenceType(InfraBindingType))
	fieldNameMap["user_area"] = "UserArea"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_draft", fields, reflect.TypeOf(PolicyDraft{}), fieldNameMap, validators)
}

func PolicyDraftListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyDraftBindingType), reflect.TypeOf([]PolicyDraft{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_draft_list_result", fields, reflect.TypeOf(PolicyDraftListResult{}), fieldNameMap, validators)
}

func PolicyEdgeClusterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["inter_site_forwarding_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["inter_site_forwarding_enabled"] = "InterSiteForwardingEnabled"
	fields["nsx_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nsx_id"] = "NsxId"
	fields["rtep_ips"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["rtep_ips"] = "RtepIps"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_edge_cluster", fields, reflect.TypeOf(PolicyEdgeCluster{}), fieldNameMap, validators)
}

func PolicyEdgeClusterListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyEdgeClusterBindingType), reflect.TypeOf([]PolicyEdgeCluster{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_edge_cluster_list_result", fields, reflect.TypeOf(PolicyEdgeClusterListResult{}), fieldNameMap, validators)
}

func PolicyEdgeNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["member_index"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["member_index"] = "MemberIndex"
	fields["nsx_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nsx_id"] = "NsxId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_edge_node", fields, reflect.TypeOf(PolicyEdgeNode{}), fieldNameMap, validators)
}

func PolicyEdgeNodeListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyEdgeNodeBindingType), reflect.TypeOf([]PolicyEdgeNode{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_edge_node_list_result", fields, reflect.TypeOf(PolicyEdgeNodeListResult{}), fieldNameMap, validators)
}

func PolicyExcludeListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["members"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["members"] = "Members"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_exclude_list", fields, reflect.TypeOf(PolicyExcludeList{}), fieldNameMap, validators)
}

func PolicyFineTuningResourceInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["fields"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFineTuningResourceInfoDetailBindingType), reflect.TypeOf([]PolicyFineTuningResourceInfoDetail{})))
	fieldNameMap["fields"] = "Fields"
	fields["resource_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_name"] = "ResourceName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_fine_tuning_resource_info", fields, reflect.TypeOf(PolicyFineTuningResourceInfo{}), fieldNameMap, validators)
}

func PolicyFineTuningResourceInfoDetailBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["field_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field_name"] = "FieldName"
	fields["sub_type"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyFineTuningResourceInfoBindingType))
	fieldNameMap["sub_type"] = "SubType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_fine_tuning_resource_info_detail", fields, reflect.TypeOf(PolicyFineTuningResourceInfoDetail{}), fieldNameMap, validators)
}

func PolicyFirewallCPUMemThresholdsProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["transport_nodes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyResourceReferenceBindingType), reflect.TypeOf([]PolicyResourceReference{})))
	fieldNameMap["transport_nodes"] = "TransportNodes"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_CPU_mem_thresholds_profile_binding_map", fields, reflect.TypeOf(PolicyFirewallCPUMemThresholdsProfileBindingMap{}), fieldNameMap, validators)
}

func PolicyFirewallCPUMemThresholdsProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFirewallCPUMemThresholdsProfileBindingMapBindingType), reflect.TypeOf([]PolicyFirewallCPUMemThresholdsProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_CPU_mem_thresholds_profile_binding_map_list_result", fields, reflect.TypeOf(PolicyFirewallCPUMemThresholdsProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PolicyFirewallCpuMemThresholdsProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["cpu_threshold_percentage"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["cpu_threshold_percentage"] = "CpuThresholdPercentage"
	fields["mem_threshold_percentage"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mem_threshold_percentage"] = "MemThresholdPercentage"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_cpu_mem_thresholds_profile", fields, reflect.TypeOf(PolicyFirewallCpuMemThresholdsProfile{}), fieldNameMap, validators)
}

func PolicyFirewallCpuMemThresholdsProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFirewallCpuMemThresholdsProfileBindingType), reflect.TypeOf([]PolicyFirewallCpuMemThresholdsProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_cpu_mem_thresholds_profile_list_result", fields, reflect.TypeOf(PolicyFirewallCpuMemThresholdsProfileListResult{}), fieldNameMap, validators)
}

func PolicyFirewallFloodProtectionProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_flood_protection_profile_binding_map", fields, reflect.TypeOf(PolicyFirewallFloodProtectionProfileBindingMap{}), fieldNameMap, validators)
}

func PolicyFirewallFloodProtectionProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFirewallFloodProtectionProfileBindingMapBindingType), reflect.TypeOf([]PolicyFirewallFloodProtectionProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_flood_protection_profile_binding_map_list_result", fields, reflect.TypeOf(PolicyFirewallFloodProtectionProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PolicyFirewallSchedulerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["days"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["days"] = "Days"
	fields["end_date"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["end_date"] = "EndDate"
	fields["end_time"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["end_time"] = "EndTime"
	fields["recurring"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["recurring"] = "Recurring"
	fields["start_date"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["start_date"] = "StartDate"
	fields["start_time"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["start_time"] = "StartTime"
	fields["time_interval"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyTimeIntervalValueBindingType), reflect.TypeOf([]PolicyTimeIntervalValue{})))
	fieldNameMap["time_interval"] = "TimeInterval"
	fields["timezone"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["timezone"] = "Timezone"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_scheduler", fields, reflect.TypeOf(PolicyFirewallScheduler{}), fieldNameMap, validators)
}

func PolicyFirewallSchedulerListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFirewallSchedulerBindingType), reflect.TypeOf([]PolicyFirewallScheduler{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_scheduler_list_result", fields, reflect.TypeOf(PolicyFirewallSchedulerListResult{}), fieldNameMap, validators)
}

func PolicyFirewallSessionTimerProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["icmp_error_reply"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_error_reply"] = "IcmpErrorReply"
	fields["icmp_first_packet"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["icmp_first_packet"] = "IcmpFirstPacket"
	fields["tcp_closed"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_closed"] = "TcpClosed"
	fields["tcp_closing"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_closing"] = "TcpClosing"
	fields["tcp_established"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_established"] = "TcpEstablished"
	fields["tcp_finwait"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_finwait"] = "TcpFinwait"
	fields["tcp_first_packet"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_first_packet"] = "TcpFirstPacket"
	fields["tcp_opening"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_opening"] = "TcpOpening"
	fields["udp_first_packet"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["udp_first_packet"] = "UdpFirstPacket"
	fields["udp_multiple"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["udp_multiple"] = "UdpMultiple"
	fields["udp_single"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["udp_single"] = "UdpSingle"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_session_timer_profile", fields, reflect.TypeOf(PolicyFirewallSessionTimerProfile{}), fieldNameMap, validators)
}

func PolicyFirewallSessionTimerProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["firewall_session_timer_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["firewall_session_timer_profile_path"] = "FirewallSessionTimerProfilePath"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_session_timer_profile_binding_map", fields, reflect.TypeOf(PolicyFirewallSessionTimerProfileBindingMap{}), fieldNameMap, validators)
}

func PolicyFirewallSessionTimerProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFirewallSessionTimerProfileBindingMapBindingType), reflect.TypeOf([]PolicyFirewallSessionTimerProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_session_timer_profile_binding_map_list_result", fields, reflect.TypeOf(PolicyFirewallSessionTimerProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PolicyFirewallSessionTimerProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFirewallSessionTimerProfileBindingType), reflect.TypeOf([]PolicyFirewallSessionTimerProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_firewall_session_timer_profile_list_result", fields, reflect.TypeOf(PolicyFirewallSessionTimerProfileListResult{}), fieldNameMap, validators)
}

func PolicyGroupIPMembersListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_group_IP_members_list_result", fields, reflect.TypeOf(PolicyGroupIPMembersListResult{}), fieldNameMap, validators)
}

func PolicyGroupMemberDetailsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_group_member_details", fields, reflect.TypeOf(PolicyGroupMemberDetails{}), fieldNameMap, validators)
}

func PolicyGroupMembersListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyGroupMemberDetailsBindingType), reflect.TypeOf([]PolicyGroupMemberDetails{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_group_members_list_result", fields, reflect.TypeOf(PolicyGroupMembersListResult{}), fieldNameMap, validators)
}

func PolicyIPAddressInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["address_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["address_value"] = "AddressValue"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["next_hop"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_hop"] = "NextHop"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_IP_address_info", fields, reflect.TypeOf(PolicyIPAddressInfo{}), fieldNameMap, validators)
}

func PolicyIgmpProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["last_member_query_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_member_query_interval"] = "LastMemberQueryInterval"
	fields["query_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["query_interval"] = "QueryInterval"
	fields["query_max_response_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["query_max_response_time"] = "QueryMaxResponseTime"
	fields["robustness_variable"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["robustness_variable"] = "RobustnessVariable"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_igmp_profile", fields, reflect.TypeOf(PolicyIgmpProfile{}), fieldNameMap, validators)
}

func PolicyInsertParametersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["anchor_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["anchor_path"] = "AnchorPath"
	fields["operation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operation"] = "Operation"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_insert_parameters", fields, reflect.TypeOf(PolicyInsertParameters{}), fieldNameMap, validators)
}

func PolicyInterfaceStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["logical_router_port_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_router_port_id"] = "LogicalRouterPortId"
	fields["per_node_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LogicalRouterPortStatisticsPerNodeBindingType), reflect.TypeOf([]LogicalRouterPortStatisticsPerNode{})))
	fieldNameMap["per_node_statistics"] = "PerNodeStatistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_interface_statistics", fields, reflect.TypeOf(PolicyInterfaceStatistics{}), fieldNameMap, validators)
}

func PolicyInterfaceStatisticsSummaryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["rx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["rx"] = "Rx"
	fields["tx"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterPortCountersBindingType))
	fieldNameMap["tx"] = "Tx"
	fields["logical_router_port_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_router_port_id"] = "LogicalRouterPortId"
	fields["interface_policy_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["interface_policy_path"] = "InterfacePolicyPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_interface_statistics_summary", fields, reflect.TypeOf(PolicyInterfaceStatisticsSummary{}), fieldNameMap, validators)
}

func PolicyLabelBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["refs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["refs"] = "Refs"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_label", fields, reflect.TypeOf(PolicyLabel{}), fieldNameMap, validators)
}

func PolicyLabelListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyLabelBindingType), reflect.TypeOf([]PolicyLabel{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_label_list_result", fields, reflect.TypeOf(PolicyLabelListResult{}), fieldNameMap, validators)
}

func PolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_lb_monitor_profile", fields, reflect.TypeOf(PolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func PolicyLbPersistenceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_lb_persistence_profile", fields, reflect.TypeOf(PolicyLbPersistenceProfile{}), fieldNameMap, validators)
}

func PolicyLbPoolAccessBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["algorithm"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["algorithm"] = "Algorithm"
	fields["ip_port_list"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPAddressPortPairBindingType), reflect.TypeOf([]IPAddressPortPair{})))
	fieldNameMap["ip_port_list"] = "IpPortList"
	fields["lb_monitor_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_monitor_profile"] = "LbMonitorProfile"
	fields["pool_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["pool_port"] = "PoolPort"
	fields["source_nat"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_nat"] = "SourceNat"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_lb_pool_access", fields, reflect.TypeOf(PolicyLbPoolAccess{}), fieldNameMap, validators)
}

func PolicyLbRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["host_match"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host_match"] = "HostMatch"
	fields["lb_virtual_server"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_virtual_server"] = "LbVirtualServer"
	fields["match_strategy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["match_strategy"] = "MatchStrategy"
	fields["path_match"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path_match"] = "PathMatch"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_lb_rule", fields, reflect.TypeOf(PolicyLbRule{}), fieldNameMap, validators)
}

func PolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile"] = "LbPersistenceProfile"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["traffic_source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["traffic_source"] = "TrafficSource"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_lb_virtual_server", fields, reflect.TypeOf(PolicyLbVirtualServer{}), fieldNameMap, validators)
}

func PolicyListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_list_result", fields, reflect.TypeOf(PolicyListResult{}), fieldNameMap, validators)
}

func PolicyMulticastConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["igmp_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["igmp_profile_path"] = "IgmpProfilePath"
	fields["pim_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pim_profile_path"] = "PimProfilePath"
	fields["replication_multicast_range"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["replication_multicast_range"] = "ReplicationMulticastRange"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_multicast_config", fields, reflect.TypeOf(PolicyMulticastConfig{}), fieldNameMap, validators)
}

func PolicyNATRuleCountersBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["active_sessions"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["active_sessions"] = "ActiveSessions"
	fields["total_bytes"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_bytes"] = "TotalBytes"
	fields["total_packets"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_packets"] = "TotalPackets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_NAT_rule_counters", fields, reflect.TypeOf(PolicyNATRuleCounters{}), fieldNameMap, validators)
}

func PolicyNatBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["nat_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nat_type"] = "NatType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat", fields, reflect.TypeOf(PolicyNat{}), fieldNameMap, validators)
}

func PolicyNatRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["destination_network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["destination_network"] = "DestinationNetwork"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["firewall_match"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["firewall_match"] = "FirewallMatch"
	fields["logging"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logging"] = "Logging"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["service"] = "Service"
	fields["source_network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_network"] = "SourceNetwork"
	fields["translated_network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["translated_network"] = "TranslatedNetwork"
	fields["translated_ports"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["translated_ports"] = "TranslatedPorts"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule", fields, reflect.TypeOf(PolicyNatRule{}), fieldNameMap, validators)
}

func PolicyNatRuleListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyNatRuleBindingType), reflect.TypeOf([]PolicyNatRule{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_list_result", fields, reflect.TypeOf(PolicyNatRuleListResult{}), fieldNameMap, validators)
}

func PolicyNatRuleStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["active_sessions"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["active_sessions"] = "ActiveSessions"
	fields["total_bytes"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_bytes"] = "TotalBytes"
	fields["total_packets"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_packets"] = "TotalPackets"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["warning_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["warning_message"] = "WarningMessage"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_statistics", fields, reflect.TypeOf(PolicyNatRuleStatistics{}), fieldNameMap, validators)
}

func PolicyNatRuleStatisticsListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyNatRuleStatisticsPerEnforcementPointBindingType), reflect.TypeOf([]PolicyNatRuleStatisticsPerEnforcementPoint{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_statistics_list_result", fields, reflect.TypeOf(PolicyNatRuleStatisticsListResult{}), fieldNameMap, validators)
}

func PolicyNatRuleStatisticsPerEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["rule_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rule_path"] = "RulePath"
	fields["rule_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyNatRuleStatisticsBindingType), reflect.TypeOf([]PolicyNatRuleStatistics{})))
	fieldNameMap["rule_statistics"] = "RuleStatistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_statistics_per_enforcement_point", fields, reflect.TypeOf(PolicyNatRuleStatisticsPerEnforcementPoint{}), fieldNameMap, validators)
}

func PolicyNatRuleStatisticsPerLogicalRouterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["per_node_statistics"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyNatRuleStatisticsPerTransportNodeBindingType), reflect.TypeOf([]PolicyNatRuleStatisticsPerTransportNode{})))
	fieldNameMap["per_node_statistics"] = "PerNodeStatistics"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["statistics"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyNATRuleCountersBindingType))
	fieldNameMap["statistics"] = "Statistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_statistics_per_logical_router", fields, reflect.TypeOf(PolicyNatRuleStatisticsPerLogicalRouter{}), fieldNameMap, validators)
}

func PolicyNatRuleStatisticsPerLogicalRouterListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyNatRuleStatisticsPerLogicalRouterBindingType), reflect.TypeOf([]PolicyNatRuleStatisticsPerLogicalRouter{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_statistics_per_logical_router_list_result", fields, reflect.TypeOf(PolicyNatRuleStatisticsPerLogicalRouterListResult{}), fieldNameMap, validators)
}

func PolicyNatRuleStatisticsPerTransportNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["active_sessions"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["active_sessions"] = "ActiveSessions"
	fields["total_bytes"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_bytes"] = "TotalBytes"
	fields["total_packets"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_packets"] = "TotalPackets"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["transport_node_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_node_path"] = "TransportNodePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_nat_rule_statistics_per_transport_node", fields, reflect.TypeOf(PolicyNatRuleStatisticsPerTransportNode{}), fieldNameMap, validators)
}

func PolicyNonCompliantConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["affected_resources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyResourceReferenceBindingType), reflect.TypeOf([]PolicyResourceReference{})))
	fieldNameMap["affected_resources"] = "AffectedResources"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["non_compliance_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["non_compliance_code"] = "NonComplianceCode"
	fields["reported_by"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyResourceReferenceBindingType))
	fieldNameMap["reported_by"] = "ReportedBy"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_non_compliant_config", fields, reflect.TypeOf(PolicyNonCompliantConfig{}), fieldNameMap, validators)
}

func PolicyPimProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["rp_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rp_address"] = "RpAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_pim_profile", fields, reflect.TypeOf(PolicyPimProfile{}), fieldNameMap, validators)
}

func PolicyRealizedResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["alarms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyAlarmResourceBindingType), reflect.TypeOf([]PolicyAlarmResource{})))
	fieldNameMap["alarms"] = "Alarms"
	fields["intent_reference"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["intent_reference"] = "IntentReference"
	fields["realization_api"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realization_api"] = "RealizationApi"
	fields["realization_specific_identifier"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realization_specific_identifier"] = "RealizationSpecificIdentifier"
	fields["runtime_error"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["runtime_error"] = "RuntimeError"
	fields["runtime_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["runtime_status"] = "RuntimeStatus"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_realized_resource", fields, reflect.TypeOf(PolicyRealizedResource{}), fieldNameMap, validators)
}

func PolicyRelatedApiErrorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["details"] = "Details"
	fields["error_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["error_code"] = "ErrorCode"
	fields["error_data"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["error_data"] = "ErrorData"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["module_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["module_name"] = "ModuleName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_related_api_error", fields, reflect.TypeOf(PolicyRelatedApiError{}), fieldNameMap, validators)
}

func PolicyResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_resource", fields, reflect.TypeOf(PolicyResource{}), fieldNameMap, validators)
}

func PolicyResourceReferenceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["is_valid"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_valid"] = "IsValid"
	fields["target_display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_display_name"] = "TargetDisplayName"
	fields["target_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_id"] = "TargetId"
	fields["target_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_type"] = "TargetType"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_resource_reference", fields, reflect.TypeOf(PolicyResourceReference{}), fieldNameMap, validators)
}

func PolicyResourceReferenceForEPBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["is_valid"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_valid"] = "IsValid"
	fields["target_display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_display_name"] = "TargetDisplayName"
	fields["target_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_id"] = "TargetId"
	fields["target_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_type"] = "TargetType"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_resource_reference_for_EP", fields, reflect.TypeOf(PolicyResourceReferenceForEP{}), fieldNameMap, validators)
}

func PolicyResourceReferenceForEPListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyResourceReferenceForEPBindingType), reflect.TypeOf([]PolicyResourceReferenceForEP{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_resource_reference_for_EP_list_result", fields, reflect.TypeOf(PolicyResourceReferenceForEPListResult{}), fieldNameMap, validators)
}

func PolicyResourceReferenceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyResourceReferenceBindingType), reflect.TypeOf([]PolicyResourceReference{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_resource_reference_list_result", fields, reflect.TypeOf(PolicyResourceReferenceListResult{}), fieldNameMap, validators)
}

func PolicyRuntimeAlarmBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["error_details"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyApiErrorBindingType))
	fieldNameMap["error_details"] = "ErrorDetails"
	fields["error_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_id"] = "ErrorId"
	fields["message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["message"] = "Message"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_runtime_alarm", fields, reflect.TypeOf(PolicyRuntimeAlarm{}), fieldNameMap, validators)
}

func PolicyRuntimeInfoPerEPBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alarm"] = bindings.NewOptionalType(bindings.NewReferenceType(PolicyRuntimeAlarmBindingType))
	fieldNameMap["alarm"] = "Alarm"
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_runtime_info_per_EP", fields, reflect.TypeOf(PolicyRuntimeInfoPerEP{}), fieldNameMap, validators)
}

func PolicyServiceChainBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["failure_policy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_policy"] = "FailurePolicy"
	fields["forward_path_service_profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["forward_path_service_profiles"] = "ForwardPathServiceProfiles"
	fields["path_selection_policy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path_selection_policy"] = "PathSelectionPolicy"
	fields["reverse_path_service_profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["reverse_path_service_profiles"] = "ReversePathServiceProfiles"
	fields["service_segment_path"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["service_segment_path"] = "ServiceSegmentPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_service_chain", fields, reflect.TypeOf(PolicyServiceChain{}), fieldNameMap, validators)
}

func PolicyServiceInstanceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["deployment_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["deployment_mode"] = "DeploymentMode"
	fields["partner_service_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["partner_service_name"] = "PartnerServiceName"
	fields["transport_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_type"] = "TransportType"
	fields["attributes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(AttributeBindingType), reflect.TypeOf([]Attribute{})))
	fieldNameMap["attributes"] = "Attributes"
	fields["compute_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["compute_id"] = "ComputeId"
	fields["context_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["context_id"] = "ContextId"
	fields["deployment_spec_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["deployment_spec_name"] = "DeploymentSpecName"
	fields["deployment_template_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["deployment_template_name"] = "DeploymentTemplateName"
	fields["failure_policy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_policy"] = "FailurePolicy"
	fields["primary_gateway_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["primary_gateway_address"] = "PrimaryGatewayAddress"
	fields["primary_interface_mgmt_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["primary_interface_mgmt_ip"] = "PrimaryInterfaceMgmtIp"
	fields["primary_interface_network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["primary_interface_network"] = "PrimaryInterfaceNetwork"
	fields["primary_portgroup_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["primary_portgroup_id"] = "PrimaryPortgroupId"
	fields["primary_subnet_mask"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["primary_subnet_mask"] = "PrimarySubnetMask"
	fields["secondary_gateway_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["secondary_gateway_address"] = "SecondaryGatewayAddress"
	fields["secondary_interface_mgmt_ip"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["secondary_interface_mgmt_ip"] = "SecondaryInterfaceMgmtIp"
	fields["secondary_interface_network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["secondary_interface_network"] = "SecondaryInterfaceNetwork"
	fields["secondary_portgroup_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["secondary_portgroup_id"] = "SecondaryPortgroupId"
	fields["secondary_subnet_mask"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["secondary_subnet_mask"] = "SecondarySubnetMask"
	fields["storage_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["storage_id"] = "StorageId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_service_instance", fields, reflect.TypeOf(PolicyServiceInstance{}), fieldNameMap, validators)
}

func PolicyServiceProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["attributes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(AttributeBindingType), reflect.TypeOf([]Attribute{})))
	fieldNameMap["attributes"] = "Attributes"
	fields["redirection_action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["redirection_action"] = "RedirectionAction"
	fields["vendor_template_key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["vendor_template_key"] = "VendorTemplateKey"
	fields["vendor_template_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["vendor_template_name"] = "VendorTemplateName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_service_profile", fields, reflect.TypeOf(PolicyServiceProfile{}), fieldNameMap, validators)
}

func PolicySubAttributesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["datatype"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["datatype"] = "Datatype"
	fields["key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key"] = "Key"
	fields["value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_sub_attributes", fields, reflect.TypeOf(PolicySubAttributes{}), fieldNameMap, validators)
}

func PolicyTimeIntervalValueBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["end_interval"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["end_interval"] = "EndInterval"
	fields["start_interval"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["start_interval"] = "StartInterval"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_time_interval_value", fields, reflect.TypeOf(PolicyTimeIntervalValue{}), fieldNameMap, validators)
}

func PolicyTransportZoneBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["nsx_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["nsx_id"] = "NsxId"
	fields["tz_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tz_type"] = "TzType"
	fields["uplink_teaming_policy_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["uplink_teaming_policy_names"] = "UplinkTeamingPolicyNames"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_transport_zone", fields, reflect.TypeOf(PolicyTransportZone{}), fieldNameMap, validators)
}

func PolicyTransportZoneListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyTransportZoneBindingType), reflect.TypeOf([]PolicyTransportZone{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_transport_zone_list_result", fields, reflect.TypeOf(PolicyTransportZoneListResult{}), fieldNameMap, validators)
}

func PolicyUrlCategorizationConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["context_profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["context_profiles"] = "ContextProfiles"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["update_frequency"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["update_frequency"] = "UpdateFrequency"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.policy_url_categorization_config", fields, reflect.TypeOf(PolicyUrlCategorizationConfig{}), fieldNameMap, validators)
}

func PoolMemberSettingBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["admin_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["admin_state"] = "AdminState"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["port"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["port"] = "Port"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.pool_member_setting", fields, reflect.TypeOf(PoolMemberSetting{}), fieldNameMap, validators)
}

func PortAddressBindingEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	fields["vlan_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["vlan_id"] = "VlanId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_address_binding_entry", fields, reflect.TypeOf(PortAddressBindingEntry{}), fieldNameMap, validators)
}

func PortAttachmentBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["allocate_addresses"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["allocate_addresses"] = "AllocateAddresses"
	fields["app_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["app_id"] = "AppId"
	fields["context_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["context_id"] = "ContextId"
	fields["context_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["context_type"] = "ContextType"
	fields["hyperbus_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["hyperbus_mode"] = "HyperbusMode"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["traffic_tag"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["traffic_tag"] = "TrafficTag"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_attachment", fields, reflect.TypeOf(PortAttachment{}), fieldNameMap, validators)
}

func PortDiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ip_discovery_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_discovery_profile_path"] = "IpDiscoveryProfilePath"
	fields["mac_discovery_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_discovery_profile_path"] = "MacDiscoveryProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_discovery_profile_binding_map", fields, reflect.TypeOf(PortDiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func PortDiscoveryProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortDiscoveryProfileBindingMapBindingType), reflect.TypeOf([]PortDiscoveryProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_discovery_profile_binding_map_list_result", fields, reflect.TypeOf(PortDiscoveryProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PortMirroringProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["destination_group"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["destination_group"] = "DestinationGroup"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["encapsulation_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["encapsulation_type"] = "EncapsulationType"
	fields["erspan_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["erspan_id"] = "ErspanId"
	fields["gre_key"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["gre_key"] = "GreKey"
	fields["profile_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_type"] = "ProfileType"
	fields["snap_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["snap_length"] = "SnapLength"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_mirroring_profile", fields, reflect.TypeOf(PortMirroringProfile{}), fieldNameMap, validators)
}

func PortMirroringProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortMirroringProfileBindingType), reflect.TypeOf([]PortMirroringProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_mirroring_profile_list_result", fields, reflect.TypeOf(PortMirroringProfileListResult{}), fieldNameMap, validators)
}

func PortMonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ipfix_l2_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ipfix_l2_profile_path"] = "IpfixL2ProfilePath"
	fields["port_mirroring_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["port_mirroring_profile_path"] = "PortMirroringProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_monitoring_profile_binding_map", fields, reflect.TypeOf(PortMonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func PortMonitoringProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortMonitoringProfileBindingMapBindingType), reflect.TypeOf([]PortMonitoringProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_monitoring_profile_binding_map_list_result", fields, reflect.TypeOf(PortMonitoringProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PortQosProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["qos_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["qos_profile_path"] = "QosProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_qos_profile_binding_map", fields, reflect.TypeOf(PortQosProfileBindingMap{}), fieldNameMap, validators)
}

func PortQosProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortQosProfileBindingMapBindingType), reflect.TypeOf([]PortQosProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_qos_profile_binding_map_list_result", fields, reflect.TypeOf(PortQosProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PortSecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["segment_security_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["segment_security_profile_path"] = "SegmentSecurityProfilePath"
	fields["spoofguard_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["spoofguard_profile_path"] = "SpoofguardProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_security_profile_binding_map", fields, reflect.TypeOf(PortSecurityProfileBindingMap{}), fieldNameMap, validators)
}

func PortSecurityProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortSecurityProfileBindingMapBindingType), reflect.TypeOf([]PortSecurityProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.port_security_profile_binding_map_list_result", fields, reflect.TypeOf(PortSecurityProfileBindingMapListResult{}), fieldNameMap, validators)
}

func PrefixEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["ge"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ge"] = "Ge"
	fields["le"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["le"] = "Le"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.prefix_entry", fields, reflect.TypeOf(PrefixEntry{}), fieldNameMap, validators)
}

func PrefixListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["prefixes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PrefixEntryBindingType), reflect.TypeOf([]PrefixEntry{})))
	fieldNameMap["prefixes"] = "Prefixes"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.prefix_list", fields, reflect.TypeOf(PrefixList{}), fieldNameMap, validators)
}

func PrefixListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PrefixListBindingType), reflect.TypeOf([]PrefixList{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.prefix_list_result", fields, reflect.TypeOf(PrefixListResult{}), fieldNameMap, validators)
}

func ProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.profile_binding_map", fields, reflect.TypeOf(ProfileBindingMap{}), fieldNameMap, validators)
}

func PropertyItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	fields["field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field"] = "Field"
	fields["heading"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["heading"] = "Heading"
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["render_configuration"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RenderConfigurationBindingType), reflect.TypeOf([]RenderConfiguration{})))
	fieldNameMap["render_configuration"] = "RenderConfiguration"
	fields["separator"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["separator"] = "Separator"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.property_item", fields, reflect.TypeOf(PropertyItem{}), fieldNameMap, validators)
}

func QosBaseRateLimiterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.qos_base_rate_limiter", fields, reflect.TypeOf(QosBaseRateLimiter{}), fieldNameMap, validators)
}

func QosDscpBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mode"] = "Mode"
	fields["priority"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["priority"] = "Priority"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.qos_dscp", fields, reflect.TypeOf(QosDscp{}), fieldNameMap, validators)
}

func QosProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["class_of_service"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["class_of_service"] = "ClassOfService"
	fields["dscp"] = bindings.NewOptionalType(bindings.NewReferenceType(QosDscpBindingType))
	fieldNameMap["dscp"] = "Dscp"
	fields["shaper_configurations"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(QosBaseRateLimiterBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["shaper_configurations"] = "ShaperConfigurations"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.qos_profile", fields, reflect.TypeOf(QosProfile{}), fieldNameMap, validators)
}

func QosProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.qos_profile_binding_map", fields, reflect.TypeOf(QosProfileBindingMap{}), fieldNameMap, validators)
}

func QosProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(QosProfileBindingType), reflect.TypeOf([]QosProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.qos_profile_list_result", fields, reflect.TypeOf(QosProfileListResult{}), fieldNameMap, validators)
}

func RAConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["hop_limit"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["hop_limit"] = "HopLimit"
	fields["prefix_lifetime"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_lifetime"] = "PrefixLifetime"
	fields["prefix_preferred_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_preferred_time"] = "PrefixPreferredTime"
	fields["ra_interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ra_interval"] = "RaInterval"
	fields["router_lifetime"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["router_lifetime"] = "RouterLifetime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.RA_config", fields, reflect.TypeOf(RAConfig{}), fieldNameMap, validators)
}

func RaDNSConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dns_server"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_server"] = "DnsServer"
	fields["dns_server_lifetime"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dns_server_lifetime"] = "DnsServerLifetime"
	fields["domain_name"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["domain_name"] = "DomainName"
	fields["domain_name_lifetime"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["domain_name_lifetime"] = "DomainNameLifetime"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ra_DNS_config", fields, reflect.TypeOf(RaDNSConfig{}), fieldNameMap, validators)
}

func ReactionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["actions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ActionBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["actions"] = "Actions"
	fields["events"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(EventBindingType), reflect.TypeOf([]Event{})))
	fieldNameMap["events"] = "Events"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.reaction", fields, reflect.TypeOf(Reaction{}), fieldNameMap, validators)
}

func RealizedVirtualMachineBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["alarms"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyAlarmResourceBindingType), reflect.TypeOf([]PolicyAlarmResource{})))
	fieldNameMap["alarms"] = "Alarms"
	fields["intent_reference"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["intent_reference"] = "IntentReference"
	fields["realization_api"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realization_api"] = "RealizationApi"
	fields["realization_specific_identifier"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["realization_specific_identifier"] = "RealizationSpecificIdentifier"
	fields["runtime_error"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["runtime_error"] = "RuntimeError"
	fields["runtime_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["runtime_status"] = "RuntimeStatus"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	fields["compute_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["compute_ids"] = "ComputeIds"
	fields["host_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host_id"] = "HostId"
	fields["local_id_on_host"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_id_on_host"] = "LocalIdOnHost"
	fields["power_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["power_state"] = "PowerState"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.realized_virtual_machine", fields, reflect.TypeOf(RealizedVirtualMachine{}), fieldNameMap, validators)
}

func RealizedVirtualMachineListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RealizedVirtualMachineBindingType), reflect.TypeOf([]RealizedVirtualMachine{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.realized_virtual_machine_list_result", fields, reflect.TypeOf(RealizedVirtualMachineListResult{}), fieldNameMap, validators)
}

func RedirectionPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["comments"] = "Comments"
	fields["internal_sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["internal_sequence_number"] = "InternalSequenceNumber"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["rule_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_count"] = "RuleCount"
	fields["scheduler_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheduler_path"] = "SchedulerPath"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["stateful"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateful"] = "Stateful"
	fields["tcp_strict"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_strict"] = "TcpStrict"
	fields["north_south"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["north_south"] = "NorthSouth"
	fields["redirect_to"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["redirect_to"] = "RedirectTo"
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RedirectionRuleBindingType), reflect.TypeOf([]RedirectionRule{})))
	fieldNameMap["rules"] = "Rules"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.redirection_policy", fields, reflect.TypeOf(RedirectionPolicy{}), fieldNameMap, validators)
}

func RedirectionRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["destination_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_groups"] = "DestinationGroups"
	fields["destinations_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["destinations_excluded"] = "DestinationsExcluded"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disabled"] = "Disabled"
	fields["ip_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_protocol"] = "IpProtocol"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["notes"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["notes"] = "Notes"
	fields["profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["profiles"] = "Profiles"
	fields["rule_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_id"] = "RuleId"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["service_entries"] = "ServiceEntries"
	fields["services"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["services"] = "Services"
	fields["source_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_groups"] = "SourceGroups"
	fields["sources_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sources_excluded"] = "SourcesExcluded"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.redirection_rule", fields, reflect.TypeOf(RedirectionRule{}), fieldNameMap, validators)
}

func RegistrationTokenBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["roles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["roles"] = "Roles"
	fields["token"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["token"] = "Token"
	fields["user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["user"] = "User"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.registration_token", fields, reflect.TypeOf(RegistrationToken{}), fieldNameMap, validators)
}

func RelatedApiErrorBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["details"] = "Details"
	fields["error_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["error_code"] = "ErrorCode"
	fields["error_data"] = bindings.NewOptionalType(bindings.NewDynamicStructType(nil, bindings.REST))
	fieldNameMap["error_data"] = "ErrorData"
	fields["error_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["error_message"] = "ErrorMessage"
	fields["module_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["module_name"] = "ModuleName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.related_api_error", fields, reflect.TypeOf(RelatedApiError{}), fieldNameMap, validators)
}

func RelatedAttributeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["attribute"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["attribute"] = "Attribute"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.related_attribute", fields, reflect.TypeOf(RelatedAttribute{}), fieldNameMap, validators)
}

func RelatedAttributeConditionalExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["condition"] = bindings.NewOptionalType(bindings.NewReferenceType(ConditionalValueConstraintExpressionBindingType))
	fieldNameMap["condition"] = "Condition"
	fields["related_attribute"] = bindings.NewOptionalType(bindings.NewReferenceType(RelatedAttributeBindingType))
	fieldNameMap["related_attribute"] = "RelatedAttribute"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.related_attribute_conditional_expression", fields, reflect.TypeOf(RelatedAttributeConditionalExpression{}), fieldNameMap, validators)
}

func RemoteFileServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["directory_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["directory_path"] = "DirectoryPath"
	fields["port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["port"] = "Port"
	fields["protocol"] = bindings.NewOptionalType(bindings.NewReferenceType(FileTransferProtocolBindingType))
	fieldNameMap["protocol"] = "Protocol"
	fields["server"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server"] = "Server"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.remote_file_server", fields, reflect.TypeOf(RemoteFileServer{}), fieldNameMap, validators)
}

func RemoteServerFingerprintBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["port"] = "Port"
	fields["server"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server"] = "Server"
	fields["ssh_fingerprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ssh_fingerprint"] = "SshFingerprint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.remote_server_fingerprint", fields, reflect.TypeOf(RemoteServerFingerprint{}), fieldNameMap, validators)
}

func RemoteServerFingerprintRequestBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["port"] = "Port"
	fields["server"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server"] = "Server"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.remote_server_fingerprint_request", fields, reflect.TypeOf(RemoteServerFingerprintRequest{}), fieldNameMap, validators)
}

func RenderConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["color"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["color"] = "Color"
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	fields["display_value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_value"] = "DisplayValue"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["tooltip"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TooltipBindingType), reflect.TypeOf([]Tooltip{})))
	fieldNameMap["tooltip"] = "Tooltip"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.render_configuration", fields, reflect.TypeOf(RenderConfiguration{}), fieldNameMap, validators)
}

func ResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource", fields, reflect.TypeOf(Resource{}), fieldNameMap, validators)
}

func ResourceFieldPointerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["field_pointer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field_pointer"] = "FieldPointer"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_field_pointer", fields, reflect.TypeOf(ResourceFieldPointer{}), fieldNameMap, validators)
}

func ResourceInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["resource_ids"] = "ResourceIds"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_info", fields, reflect.TypeOf(ResourceInfo{}), fieldNameMap, validators)
}

func ResourceInfoListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PolicyFineTuningResourceInfoBindingType), reflect.TypeOf([]PolicyFineTuningResourceInfo{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_info_list_result", fields, reflect.TypeOf(ResourceInfoListResult{}), fieldNameMap, validators)
}

func ResourceLinkBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["href"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["href"] = "Href"
	fields["rel"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rel"] = "Rel"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_link", fields, reflect.TypeOf(ResourceLink{}), fieldNameMap, validators)
}

func ResourceOperationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["operation_types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["operation_types"] = "OperationTypes"
	fields["resource_pointer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_pointer"] = "ResourcePointer"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_operation", fields, reflect.TypeOf(ResourceOperation{}), fieldNameMap, validators)
}

func ResourceReferenceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["is_valid"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_valid"] = "IsValid"
	fields["target_display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_display_name"] = "TargetDisplayName"
	fields["target_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_id"] = "TargetId"
	fields["target_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_type"] = "TargetType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_reference", fields, reflect.TypeOf(ResourceReference{}), fieldNameMap, validators)
}

func ResourceTagStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["details"] = "Details"
	fields["resource_display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_display_name"] = "ResourceDisplayName"
	fields["resource_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_id"] = "ResourceId"
	fields["tag_status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag_status"] = "TagStatus"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_tag_status", fields, reflect.TypeOf(ResourceTagStatus{}), fieldNameMap, validators)
}

func ResourceTypeTagStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_tag_status"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceTagStatusBindingType), reflect.TypeOf([]ResourceTagStatus{})))
	fieldNameMap["resource_tag_status"] = "ResourceTagStatus"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.resource_type_tag_status", fields, reflect.TypeOf(ResourceTypeTagStatus{}), fieldNameMap, validators)
}

func RestoreConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["passphrase"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["passphrase"] = "Passphrase"
	fields["remote_file_server"] = bindings.NewOptionalType(bindings.NewReferenceType(RemoteFileServerBindingType))
	fieldNameMap["remote_file_server"] = "RemoteFileServer"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.restore_configuration", fields, reflect.TypeOf(RestoreConfiguration{}), fieldNameMap, validators)
}

func RestoreStepBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["status"] = bindings.NewOptionalType(bindings.NewReferenceType(PerStepRestoreStatusBindingType))
	fieldNameMap["status"] = "Status"
	fields["step_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["step_number"] = "StepNumber"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.restore_step", fields, reflect.TypeOf(RestoreStep{}), fieldNameMap, validators)
}

func RevisionedResourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.revisioned_resource", fields, reflect.TypeOf(RevisionedResource{}), fieldNameMap, validators)
}

func RoleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["role"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["role"] = "Role"
	fields["role_display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["role_display_name"] = "RoleDisplayName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.role", fields, reflect.TypeOf(Role{}), fieldNameMap, validators)
}

func RoleBindingBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["identity_source_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["identity_source_id"] = "IdentitySourceId"
	fields["identity_source_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["identity_source_type"] = "IdentitySourceType"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["roles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoleBindingType), reflect.TypeOf([]Role{})))
	fieldNameMap["roles"] = "Roles"
	fields["stale"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["stale"] = "Stale"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.role_binding", fields, reflect.TypeOf(RoleBinding{}), fieldNameMap, validators)
}

func RoleBindingListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoleBindingBindingType), reflect.TypeOf([]RoleBinding{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.role_binding_list_result", fields, reflect.TypeOf(RoleBindingListResult{}), fieldNameMap, validators)
}

func RoleListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoleBindingType), reflect.TypeOf([]Role{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.role_list_result", fields, reflect.TypeOf(RoleListResult{}), fieldNameMap, validators)
}

func RoleWithFeaturesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["features"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FeaturePermissionBindingType), reflect.TypeOf([]FeaturePermission{})))
	fieldNameMap["features"] = "Features"
	fields["role"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["role"] = "Role"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.role_with_features", fields, reflect.TypeOf(RoleWithFeatures{}), fieldNameMap, validators)
}

func RoleWithFeaturesListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoleWithFeaturesBindingType), reflect.TypeOf([]RoleWithFeatures{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.role_with_features_list_result", fields, reflect.TypeOf(RoleWithFeaturesListResult{}), fieldNameMap, validators)
}

func RouteAdvertisementRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["prefix_operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["prefix_operator"] = "PrefixOperator"
	fields["route_advertisement_types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["route_advertisement_types"] = "RouteAdvertisementTypes"
	fields["subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["subnets"] = "Subnets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_advertisement_rule", fields, reflect.TypeOf(RouteAdvertisementRule{}), fieldNameMap, validators)
}

func RouteAggregationEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["prefix"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["prefix"] = "Prefix"
	fields["summary_only"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["summary_only"] = "SummaryOnly"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_aggregation_entry", fields, reflect.TypeOf(RouteAggregationEntry{}), fieldNameMap, validators)
}

func RouteBasedIPSecVpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["force_whitelisting"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["force_whitelisting"] = "ForceWhitelisting"
	fields["tunnel_interfaces"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPSecVpnTunnelInterfaceBindingType), reflect.TypeOf([]IPSecVpnTunnelInterface{})))
	fieldNameMap["tunnel_interfaces"] = "TunnelInterfaces"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["authentication_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["authentication_mode"] = "AuthenticationMode"
	fields["compliance_suite"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["compliance_suite"] = "ComplianceSuite"
	fields["connection_initiation_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connection_initiation_mode"] = "ConnectionInitiationMode"
	fields["dpd_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dpd_profile_path"] = "DpdProfilePath"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["ike_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ike_profile_path"] = "IkeProfilePath"
	fields["local_endpoint_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_endpoint_path"] = "LocalEndpointPath"
	fields["peer_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_address"] = "PeerAddress"
	fields["peer_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_id"] = "PeerId"
	fields["psk"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["psk"] = "Psk"
	fields["tcp_mss_clamping"] = bindings.NewOptionalType(bindings.NewReferenceType(TcpMaximumSegmentSizeClampingBindingType))
	fieldNameMap["tcp_mss_clamping"] = "TcpMssClamping"
	fields["tunnel_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tunnel_profile_path"] = "TunnelProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_based_IP_sec_vpn_session", fields, reflect.TypeOf(RouteBasedIPSecVpnSession{}), fieldNameMap, validators)
}

func RouteBasedL3VpnSessionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["default_rule_logging"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["default_rule_logging"] = "DefaultRuleLogging"
	fields["force_whitelisting"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["force_whitelisting"] = "ForceWhitelisting"
	fields["routing_config_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["routing_config_path"] = "RoutingConfigPath"
	fields["tunnel_subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TunnelSubnetBindingType), reflect.TypeOf([]TunnelSubnet{})))
	fieldNameMap["tunnel_subnets"] = "TunnelSubnets"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_based_l3_vpn_session", fields, reflect.TypeOf(RouteBasedL3VpnSession{}), fieldNameMap, validators)
}

func RouteDetailsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["as_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["as_path"] = "AsPath"
	fields["local_pref"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["local_pref"] = "LocalPref"
	fields["med"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["med"] = "Med"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	fields["next_hop"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_hop"] = "NextHop"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_details", fields, reflect.TypeOf(RouteDetails{}), fieldNameMap, validators)
}

func RouteMapEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["community_list_matches"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(CommunityMatchCriteriaBindingType), reflect.TypeOf([]CommunityMatchCriteria{})))
	fieldNameMap["community_list_matches"] = "CommunityListMatches"
	fields["prefix_list_matches"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["prefix_list_matches"] = "PrefixListMatches"
	fields["set"] = bindings.NewOptionalType(bindings.NewReferenceType(RouteMapEntrySetBindingType))
	fieldNameMap["set"] = "Set"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_map_entry", fields, reflect.TypeOf(RouteMapEntry{}), fieldNameMap, validators)
}

func RouteMapEntrySetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["as_path_prepend"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["as_path_prepend"] = "AsPathPrepend"
	fields["community"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["community"] = "Community"
	fields["local_preference"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["local_preference"] = "LocalPreference"
	fields["med"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["med"] = "Med"
	fields["prefer_global_v6_next_hop"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["prefer_global_v6_next_hop"] = "PreferGlobalV6NextHop"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.route_map_entry_set", fields, reflect.TypeOf(RouteMapEntrySet{}), fieldNameMap, validators)
}

func RouterNexthopBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["admin_distance"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["admin_distance"] = "AdminDistance"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.router_nexthop", fields, reflect.TypeOf(RouterNexthop{}), fieldNameMap, validators)
}

func RoutesPerTransportNodeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["routes"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RouteDetailsBindingType), reflect.TypeOf([]RouteDetails{})))
	fieldNameMap["routes"] = "Routes"
	fields["source_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_address"] = "SourceAddress"
	fields["transport_node_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_node_id"] = "TransportNodeId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.routes_per_transport_node", fields, reflect.TypeOf(RoutesPerTransportNode{}), fieldNameMap, validators)
}

func RoutingEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["admin_distance"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["admin_distance"] = "AdminDistance"
	fields["interface"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["interface"] = "_Interface"
	fields["lr_component_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lr_component_id"] = "LrComponentId"
	fields["lr_component_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lr_component_type"] = "LrComponentType"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	fields["next_hop"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_hop"] = "NextHop"
	fields["route_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["route_type"] = "RouteType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.routing_entry", fields, reflect.TypeOf(RoutingEntry{}), fieldNameMap, validators)
}

func RoutingTableBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["count"] = "Count"
	fields["edge_node"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_node"] = "EdgeNode"
	fields["route_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoutingEntryBindingType), reflect.TypeOf([]RoutingEntry{})))
	fieldNameMap["route_entries"] = "RouteEntries"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.routing_table", fields, reflect.TypeOf(RoutingTable{}), fieldNameMap, validators)
}

func RoutingTableListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RoutingTableBindingType), reflect.TypeOf([]RoutingTable{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.routing_table_list_result", fields, reflect.TypeOf(RoutingTableListResult{}), fieldNameMap, validators)
}

func RowListFieldBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alias"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alias"] = "Alias"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.row_list_field", fields, reflect.TypeOf(RowListField{}), fieldNameMap, validators)
}

func RuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["destination_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["destination_groups"] = "DestinationGroups"
	fields["destinations_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["destinations_excluded"] = "DestinationsExcluded"
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["disabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disabled"] = "Disabled"
	fields["ip_protocol"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_protocol"] = "IpProtocol"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["logged"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["logged"] = "Logged"
	fields["notes"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["notes"] = "Notes"
	fields["profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["profiles"] = "Profiles"
	fields["rule_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_id"] = "RuleId"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["service_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["service_entries"] = "ServiceEntries"
	fields["services"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["services"] = "Services"
	fields["source_groups"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_groups"] = "SourceGroups"
	fields["sources_excluded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sources_excluded"] = "SourcesExcluded"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.rule", fields, reflect.TypeOf(Rule{}), fieldNameMap, validators)
}

func RuleListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RuleBindingType), reflect.TypeOf([]Rule{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.rule_list_result", fields, reflect.TypeOf(RuleListResult{}), fieldNameMap, validators)
}

func RuleStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["byte_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["byte_count"] = "ByteCount"
	fields["hit_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["hit_count"] = "HitCount"
	fields["internal_rule_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["internal_rule_id"] = "InternalRuleId"
	fields["lr_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lr_path"] = "LrPath"
	fields["max_popularity_index"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_popularity_index"] = "MaxPopularityIndex"
	fields["max_session_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_session_count"] = "MaxSessionCount"
	fields["packet_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["packet_count"] = "PacketCount"
	fields["popularity_index"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["popularity_index"] = "PopularityIndex"
	fields["rule"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rule"] = "Rule"
	fields["session_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["session_count"] = "SessionCount"
	fields["total_session_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["total_session_count"] = "TotalSessionCount"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.rule_statistics", fields, reflect.TypeOf(RuleStatistics{}), fieldNameMap, validators)
}

func RuleStatisticsForEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point"] = "EnforcementPoint"
	fields["statistics"] = bindings.NewOptionalType(bindings.NewReferenceType(RuleStatisticsBindingType))
	fieldNameMap["statistics"] = "Statistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.rule_statistics_for_enforcement_point", fields, reflect.TypeOf(RuleStatisticsForEnforcementPoint{}), fieldNameMap, validators)
}

func RuleStatisticsListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RuleStatisticsForEnforcementPointBindingType), reflect.TypeOf([]RuleStatisticsForEnforcementPoint{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.rule_statistics_list_result", fields, reflect.TypeOf(RuleStatisticsListResult{}), fieldNameMap, validators)
}

func SearchResponseBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType(nil, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.search_response", fields, reflect.TypeOf(SearchResponse{}), fieldNameMap, validators)
}

func SecurityPolicyBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["category"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["category"] = "Category"
	fields["comments"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["comments"] = "Comments"
	fields["internal_sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["internal_sequence_number"] = "InternalSequenceNumber"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["lock_modified_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lock_modified_by"] = "LockModifiedBy"
	fields["lock_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lock_modified_time"] = "LockModifiedTime"
	fields["locked"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["locked"] = "Locked"
	fields["rule_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rule_count"] = "RuleCount"
	fields["scheduler_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scheduler_path"] = "SchedulerPath"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["sequence_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["sequence_number"] = "SequenceNumber"
	fields["stateful"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["stateful"] = "Stateful"
	fields["tcp_strict"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["tcp_strict"] = "TcpStrict"
	fields["connectivity_strategy"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity_strategy"] = "ConnectivityStrategy"
	fields["default_rule_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["default_rule_id"] = "DefaultRuleId"
	fields["rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RuleBindingType), reflect.TypeOf([]Rule{})))
	fieldNameMap["rules"] = "Rules"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.security_policy", fields, reflect.TypeOf(SecurityPolicy{}), fieldNameMap, validators)
}

func SecurityPolicyListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SecurityPolicyBindingType), reflect.TypeOf([]SecurityPolicy{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.security_policy_list_result", fields, reflect.TypeOf(SecurityPolicyListResult{}), fieldNameMap, validators)
}

func SecurityPolicyStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["internal_section_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["internal_section_id"] = "InternalSectionId"
	fields["lr_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lr_path"] = "LrPath"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RuleStatisticsBindingType), reflect.TypeOf([]RuleStatistics{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.security_policy_statistics", fields, reflect.TypeOf(SecurityPolicyStatistics{}), fieldNameMap, validators)
}

func SecurityPolicyStatisticsForEnforcementPointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point"] = "EnforcementPoint"
	fields["statistics"] = bindings.NewOptionalType(bindings.NewReferenceType(SecurityPolicyStatisticsBindingType))
	fieldNameMap["statistics"] = "Statistics"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.security_policy_statistics_for_enforcement_point", fields, reflect.TypeOf(SecurityPolicyStatisticsForEnforcementPoint{}), fieldNameMap, validators)
}

func SecurityPolicyStatisticsListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SecurityPolicyStatisticsForEnforcementPointBindingType), reflect.TypeOf([]SecurityPolicyStatisticsForEnforcementPoint{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.security_policy_statistics_list_result", fields, reflect.TypeOf(SecurityPolicyStatisticsListResult{}), fieldNameMap, validators)
}

func SecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.security_profile_binding_map", fields, reflect.TypeOf(SecurityProfileBindingMap{}), fieldNameMap, validators)
}

func SegmentBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["address_bindings"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortAddressBindingEntryBindingType), reflect.TypeOf([]PortAddressBindingEntry{})))
	fieldNameMap["address_bindings"] = "AddressBindings"
	fields["admin_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["admin_state"] = "AdminState"
	fields["advanced_config"] = bindings.NewOptionalType(bindings.NewReferenceType(SegmentAdvancedConfigBindingType))
	fieldNameMap["advanced_config"] = "AdvancedConfig"
	fields["bridge_profiles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(BridgeProfileConfigBindingType), reflect.TypeOf([]BridgeProfileConfig{})))
	fieldNameMap["bridge_profiles"] = "BridgeProfiles"
	fields["connectivity_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity_path"] = "ConnectivityPath"
	fields["dhcp_config_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dhcp_config_path"] = "DhcpConfigPath"
	fields["domain_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["domain_name"] = "DomainName"
	fields["extra_configs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentExtraConfigBindingType), reflect.TypeOf([]SegmentExtraConfig{})))
	fieldNameMap["extra_configs"] = "ExtraConfigs"
	fields["federation_config"] = bindings.NewOptionalType(bindings.NewReferenceType(FederationConnectivityConfigBindingType))
	fieldNameMap["federation_config"] = "FederationConfig"
	fields["l2_extension"] = bindings.NewOptionalType(bindings.NewReferenceType(L2ExtensionBindingType))
	fieldNameMap["l2_extension"] = "L2Extension"
	fields["ls_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ls_id"] = "LsId"
	fields["mac_pool_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_pool_id"] = "MacPoolId"
	fields["metadata_proxy_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["metadata_proxy_paths"] = "MetadataProxyPaths"
	fields["overlay_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["overlay_id"] = "OverlayId"
	fields["replication_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["replication_mode"] = "ReplicationMode"
	fields["subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentSubnetBindingType), reflect.TypeOf([]SegmentSubnet{})))
	fieldNameMap["subnets"] = "Subnets"
	fields["transport_zone_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_zone_path"] = "TransportZonePath"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	fields["vlan_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["vlan_ids"] = "VlanIds"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment", fields, reflect.TypeOf(Segment{}), fieldNameMap, validators)
}

func SegmentAdvancedConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["connectivity"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["connectivity"] = "Connectivity"
	fields["address_pool_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["address_pool_paths"] = "AddressPoolPaths"
	fields["hybrid"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["hybrid"] = "Hybrid"
	fields["local_egress"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["local_egress"] = "LocalEgress"
	fields["local_egress_routing_policies"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(LocalEgressRoutingEntryBindingType), reflect.TypeOf([]LocalEgressRoutingEntry{})))
	fieldNameMap["local_egress_routing_policies"] = "LocalEgressRoutingPolicies"
	fields["multicast"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["multicast"] = "Multicast"
	fields["uplink_teaming_policy_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["uplink_teaming_policy_name"] = "UplinkTeamingPolicyName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_advanced_config", fields, reflect.TypeOf(SegmentAdvancedConfig{}), fieldNameMap, validators)
}

func SegmentConfigurationStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ConfigurationStateElementBindingType), reflect.TypeOf([]ConfigurationStateElement{})))
	fieldNameMap["details"] = "Details"
	fields["failure_code"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["failure_code"] = "FailureCode"
	fields["failure_message"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failure_message"] = "FailureMessage"
	fields["state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["state"] = "State"
	fields["segment_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["segment_path"] = "SegmentPath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_configuration_state", fields, reflect.TypeOf(SegmentConfigurationState{}), fieldNameMap, validators)
}

func SegmentDhcpConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dns_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_servers"] = "DnsServers"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["server_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_address"] = "ServerAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_dhcp_config", fields, reflect.TypeOf(SegmentDhcpConfig{}), fieldNameMap, validators)
}

func SegmentDhcpV4ConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["options"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpV4OptionsBindingType))
	fieldNameMap["options"] = "Options"
	fields["dns_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_servers"] = "DnsServers"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["server_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_address"] = "ServerAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_dhcp_v4_config", fields, reflect.TypeOf(SegmentDhcpV4Config{}), fieldNameMap, validators)
}

func SegmentDhcpV6ConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["domain_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["domain_names"] = "DomainNames"
	fields["excluded_ranges"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["excluded_ranges"] = "ExcludedRanges"
	fields["options"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpV6OptionsBindingType))
	fieldNameMap["options"] = "Options"
	fields["preferred_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["preferred_time"] = "PreferredTime"
	fields["sntp_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["sntp_servers"] = "SntpServers"
	fields["dns_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dns_servers"] = "DnsServers"
	fields["lease_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["lease_time"] = "LeaseTime"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["server_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["server_address"] = "ServerAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_dhcp_v6_config", fields, reflect.TypeOf(SegmentDhcpV6Config{}), fieldNameMap, validators)
}

func SegmentDiscoveryProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ip_discovery_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_discovery_profile_path"] = "IpDiscoveryProfilePath"
	fields["mac_discovery_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_discovery_profile_path"] = "MacDiscoveryProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_discovery_profile_binding_map", fields, reflect.TypeOf(SegmentDiscoveryProfileBindingMap{}), fieldNameMap, validators)
}

func SegmentDiscoveryProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentDiscoveryProfileBindingMapBindingType), reflect.TypeOf([]SegmentDiscoveryProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_discovery_profile_binding_map_list_result", fields, reflect.TypeOf(SegmentDiscoveryProfileBindingMapListResult{}), fieldNameMap, validators)
}

func SegmentExtraConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["config_pair"] = bindings.NewOptionalType(bindings.NewReferenceType(KeyValuePairBindingType))
	fieldNameMap["config_pair"] = "ConfigPair"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_extra_config", fields, reflect.TypeOf(SegmentExtraConfig{}), fieldNameMap, validators)
}

func SegmentListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentBindingType), reflect.TypeOf([]Segment{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_list_result", fields, reflect.TypeOf(SegmentListResult{}), fieldNameMap, validators)
}

func SegmentMonitoringProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ipfix_l2_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ipfix_l2_profile_path"] = "IpfixL2ProfilePath"
	fields["port_mirroring_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["port_mirroring_profile_path"] = "PortMirroringProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_monitoring_profile_binding_map", fields, reflect.TypeOf(SegmentMonitoringProfileBindingMap{}), fieldNameMap, validators)
}

func SegmentMonitoringProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentMonitoringProfileBindingMapBindingType), reflect.TypeOf([]SegmentMonitoringProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_monitoring_profile_binding_map_list_result", fields, reflect.TypeOf(SegmentMonitoringProfileBindingMapListResult{}), fieldNameMap, validators)
}

func SegmentPortBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["address_bindings"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortAddressBindingEntryBindingType), reflect.TypeOf([]PortAddressBindingEntry{})))
	fieldNameMap["address_bindings"] = "AddressBindings"
	fields["admin_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["admin_state"] = "AdminState"
	fields["attachment"] = bindings.NewOptionalType(bindings.NewReferenceType(PortAttachmentBindingType))
	fieldNameMap["attachment"] = "Attachment"
	fields["extra_configs"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentExtraConfigBindingType), reflect.TypeOf([]SegmentExtraConfig{})))
	fieldNameMap["extra_configs"] = "ExtraConfigs"
	fields["ignored_address_bindings"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(PortAddressBindingEntryBindingType), reflect.TypeOf([]PortAddressBindingEntry{})))
	fieldNameMap["ignored_address_bindings"] = "IgnoredAddressBindings"
	fields["init_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["init_state"] = "InitState"
	fields["source_site_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["source_site_id"] = "SourceSiteId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_port", fields, reflect.TypeOf(SegmentPort{}), fieldNameMap, validators)
}

func SegmentPortListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentPortBindingType), reflect.TypeOf([]SegmentPort{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_port_list_result", fields, reflect.TypeOf(SegmentPortListResult{}), fieldNameMap, validators)
}

func SegmentPortStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_bytes"] = "RxBytes"
	fields["rx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_packets"] = "RxPackets"
	fields["tx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_bytes"] = "TxBytes"
	fields["tx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_packets"] = "TxPackets"
	fields["dropped_by_security_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(PacketsDroppedBySecurityBindingType))
	fieldNameMap["dropped_by_security_packets"] = "DroppedBySecurityPackets"
	fields["mac_learning"] = bindings.NewOptionalType(bindings.NewReferenceType(MacLearningCountersBindingType))
	fieldNameMap["mac_learning"] = "MacLearning"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["logical_port_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_port_id"] = "LogicalPortId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_port_statistics", fields, reflect.TypeOf(SegmentPortStatistics{}), fieldNameMap, validators)
}

func SegmentQosProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["qos_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["qos_profile_path"] = "QosProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_qos_profile_binding_map", fields, reflect.TypeOf(SegmentQosProfileBindingMap{}), fieldNameMap, validators)
}

func SegmentQosProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentQosProfileBindingMapBindingType), reflect.TypeOf([]SegmentQosProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_qos_profile_binding_map_list_result", fields, reflect.TypeOf(SegmentQosProfileBindingMapListResult{}), fieldNameMap, validators)
}

func SegmentSecurityProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["bpdu_filter_allow"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["bpdu_filter_allow"] = "BpduFilterAllow"
	fields["bpdu_filter_enable"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["bpdu_filter_enable"] = "BpduFilterEnable"
	fields["dhcp_client_block_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dhcp_client_block_enabled"] = "DhcpClientBlockEnabled"
	fields["dhcp_client_block_v6_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dhcp_client_block_v6_enabled"] = "DhcpClientBlockV6Enabled"
	fields["dhcp_server_block_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dhcp_server_block_enabled"] = "DhcpServerBlockEnabled"
	fields["dhcp_server_block_v6_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["dhcp_server_block_v6_enabled"] = "DhcpServerBlockV6Enabled"
	fields["non_ip_traffic_block_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["non_ip_traffic_block_enabled"] = "NonIpTrafficBlockEnabled"
	fields["ra_guard_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["ra_guard_enabled"] = "RaGuardEnabled"
	fields["rate_limits"] = bindings.NewOptionalType(bindings.NewReferenceType(TrafficRateLimitsBindingType))
	fieldNameMap["rate_limits"] = "RateLimits"
	fields["rate_limits_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["rate_limits_enabled"] = "RateLimitsEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_security_profile", fields, reflect.TypeOf(SegmentSecurityProfile{}), fieldNameMap, validators)
}

func SegmentSecurityProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["segment_security_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["segment_security_profile_path"] = "SegmentSecurityProfilePath"
	fields["spoofguard_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["spoofguard_profile_path"] = "SpoofguardProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_security_profile_binding_map", fields, reflect.TypeOf(SegmentSecurityProfileBindingMap{}), fieldNameMap, validators)
}

func SegmentSecurityProfileBindingMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentSecurityProfileBindingMapBindingType), reflect.TypeOf([]SegmentSecurityProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_security_profile_binding_map_list_result", fields, reflect.TypeOf(SegmentSecurityProfileBindingMapListResult{}), fieldNameMap, validators)
}

func SegmentSecurityProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SegmentSecurityProfileBindingType), reflect.TypeOf([]SegmentSecurityProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_security_profile_list_result", fields, reflect.TypeOf(SegmentSecurityProfileListResult{}), fieldNameMap, validators)
}

func SegmentStatisticsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_bytes"] = "RxBytes"
	fields["rx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["rx_packets"] = "RxPackets"
	fields["tx_bytes"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_bytes"] = "TxBytes"
	fields["tx_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(DataCounterBindingType))
	fieldNameMap["tx_packets"] = "TxPackets"
	fields["dropped_by_security_packets"] = bindings.NewOptionalType(bindings.NewReferenceType(PacketsDroppedBySecurityBindingType))
	fieldNameMap["dropped_by_security_packets"] = "DroppedBySecurityPackets"
	fields["mac_learning"] = bindings.NewOptionalType(bindings.NewReferenceType(MacLearningCountersBindingType))
	fieldNameMap["mac_learning"] = "MacLearning"
	fields["last_update_timestamp"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["last_update_timestamp"] = "LastUpdateTimestamp"
	fields["logical_switch_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["logical_switch_id"] = "LogicalSwitchId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_statistics", fields, reflect.TypeOf(SegmentStatistics{}), fieldNameMap, validators)
}

func SegmentSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dhcp_config"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(SegmentDhcpConfigBindingType),}, bindings.REST))
	fieldNameMap["dhcp_config"] = "DhcpConfig"
	fields["dhcp_ranges"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dhcp_ranges"] = "DhcpRanges"
	fields["gateway_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["gateway_address"] = "GatewayAddress"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.segment_subnet", fields, reflect.TypeOf(SegmentSubnet{}), fieldNameMap, validators)
}

func SelectableResourceReferenceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["is_valid"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_valid"] = "IsValid"
	fields["target_display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_display_name"] = "TargetDisplayName"
	fields["target_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_id"] = "TargetId"
	fields["target_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_type"] = "TargetType"
	fields["selected"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["selected"] = "Selected"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.selectable_resource_reference", fields, reflect.TypeOf(SelectableResourceReference{}), fieldNameMap, validators)
}

func SelfResourceLinkBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["action"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["action"] = "Action"
	fields["href"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["href"] = "Href"
	fields["rel"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rel"] = "Rel"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.self_resource_link", fields, reflect.TypeOf(SelfResourceLink{}), fieldNameMap, validators)
}

func ServiceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["is_default"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_default"] = "IsDefault"
	fields["service_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["service_entries"] = "ServiceEntries"
	fields["service_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["service_type"] = "ServiceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service", fields, reflect.TypeOf(Service{}), fieldNameMap, validators)
}

func ServiceEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_entry", fields, reflect.TypeOf(ServiceEntry{}), fieldNameMap, validators)
}

func ServiceEntryListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ServiceEntryBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_entry_list_result", fields, reflect.TypeOf(ServiceEntryListResult{}), fieldNameMap, validators)
}

func ServiceInstanceEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["service_interface_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["service_interface_path"] = "ServiceInterfacePath"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["target_ips"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPInfoBindingType), reflect.TypeOf([]IPInfo{})))
	fieldNameMap["target_ips"] = "TargetIps"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_instance_endpoint", fields, reflect.TypeOf(ServiceInstanceEndpoint{}), fieldNameMap, validators)
}

func ServiceInterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceSubnetBindingType), reflect.TypeOf([]InterfaceSubnet{})))
	fieldNameMap["subnets"] = "Subnets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_interface", fields, reflect.TypeOf(ServiceInterface{}), fieldNameMap, validators)
}

func ServiceInterfaceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ServiceInterfaceBindingType), reflect.TypeOf([]ServiceInterface{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_interface_list_result", fields, reflect.TypeOf(ServiceInterfaceListResult{}), fieldNameMap, validators)
}

func ServiceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ServiceBindingType), reflect.TypeOf([]Service{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_list_result", fields, reflect.TypeOf(ServiceListResult{}), fieldNameMap, validators)
}

func ServiceReferenceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["partner_service_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["partner_service_name"] = "PartnerServiceName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_reference", fields, reflect.TypeOf(ServiceReference{}), fieldNameMap, validators)
}

func ServiceSegmentBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["lr_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["lr_paths"] = "LrPaths"
	fields["transport_zone_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["transport_zone_path"] = "TransportZonePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.service_segment", fields, reflect.TypeOf(ServiceSegment{}), fieldNameMap, validators)
}

func SessionTimerProfileBindingListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SessionTimerProfileBindingMapBindingType), reflect.TypeOf([]SessionTimerProfileBindingMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.session_timer_profile_binding_list_result", fields, reflect.TypeOf(SessionTimerProfileBindingListResult{}), fieldNameMap, validators)
}

func SessionTimerProfileBindingMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["profile_path"] = "ProfilePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.session_timer_profile_binding_map", fields, reflect.TypeOf(SessionTimerProfileBindingMap{}), fieldNameMap, validators)
}

func SetFieldsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["field_settings"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(FieldSettingBindingType), reflect.TypeOf([]FieldSetting{})))
	fieldNameMap["field_settings"] = "FieldSettings"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.set_fields", fields, reflect.TypeOf(SetFields{}), fieldNameMap, validators)
}

func SiteBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fail_if_rtep_misconfigured"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["fail_if_rtep_misconfigured"] = "FailIfRtepMisconfigured"
	fields["fail_if_rtt_exceeded"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["fail_if_rtt_exceeded"] = "FailIfRttExceeded"
	fields["federation_config"] = bindings.NewOptionalType(bindings.NewReferenceType(GmFederationSiteConfigBindingType))
	fieldNameMap["federation_config"] = "FederationConfig"
	fields["maximum_rtt"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["maximum_rtt"] = "MaximumRtt"
	fields["site_connection_info"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SiteNodeConnectionInfoBindingType), reflect.TypeOf([]SiteNodeConnectionInfo{})))
	fieldNameMap["site_connection_info"] = "SiteConnectionInfo"
	fields["site_number"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["site_number"] = "SiteNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.site", fields, reflect.TypeOf(Site{}), fieldNameMap, validators)
}

func SiteAllocationIndexForEdgeBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["index"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["index"] = "Index"
	fields["target_resource_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["target_resource_path"] = "TargetResourcePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.site_allocation_index_for_edge", fields, reflect.TypeOf(SiteAllocationIndexForEdge{}), fieldNameMap, validators)
}

func SiteFederationConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rtep_ips"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["rtep_ips"] = "RtepIps"
	fields["site_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_id"] = "SiteId"
	fields["site_index"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["site_index"] = "SiteIndex"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.site_federation_config", fields, reflect.TypeOf(SiteFederationConfig{}), fieldNameMap, validators)
}

func SiteListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SiteBindingType), reflect.TypeOf([]Site{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.site_list_result", fields, reflect.TypeOf(SiteListResult{}), fieldNameMap, validators)
}

func SiteNodeConnectionInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["fqdn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["fqdn"] = "Fqdn"
	fields["password"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["password"] = "Password"
	fields["thumbprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["thumbprint"] = "Thumbprint"
	fields["username"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["username"] = "Username"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.site_node_connection_info", fields, reflect.TypeOf(SiteNodeConnectionInfo{}), fieldNameMap, validators)
}

func SourceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.source", fields, reflect.TypeOf(Source{}), fieldNameMap, validators)
}

func SourceFieldEvaluationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["expected"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["expected"] = "Expected"
	fields["field_pointer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["field_pointer"] = "FieldPointer"
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.source_field_evaluation", fields, reflect.TypeOf(SourceFieldEvaluation{}), fieldNameMap, validators)
}

func SpanBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["sites"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SpanSiteInfoBindingType), reflect.TypeOf([]SpanSiteInfo{})))
	fieldNameMap["sites"] = "Sites"
	fields["span_leader"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["span_leader"] = "SpanLeader"
	fields["span_resource"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["span_resource"] = "SpanResource"
	fields["span_resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["span_resource_type"] = "SpanResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.span", fields, reflect.TypeOf(Span{}), fieldNameMap, validators)
}

func SpanSiteInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["site_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_id"] = "SiteId"
	fields["site_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["site_path"] = "SitePath"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.span_site_info", fields, reflect.TypeOf(SpanSiteInfo{}), fieldNameMap, validators)
}

func SpoofGuardProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["address_binding_whitelist"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["address_binding_whitelist"] = "AddressBindingWhitelist"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.spoof_guard_profile", fields, reflect.TypeOf(SpoofGuardProfile{}), fieldNameMap, validators)
}

func SpoofGuardProfileListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(SpoofGuardProfileBindingType), reflect.TypeOf([]SpoofGuardProfile{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.spoof_guard_profile_list_result", fields, reflect.TypeOf(SpoofGuardProfileListResult{}), fieldNameMap, validators)
}

func SslTrustObjectDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["key_algo"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key_algo"] = "KeyAlgo"
	fields["passphrase"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["passphrase"] = "Passphrase"
	fields["pem_encoded"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pem_encoded"] = "PemEncoded"
	fields["private_key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["private_key"] = "PrivateKey"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.ssl_trust_object_data", fields, reflect.TypeOf(SslTrustObjectData{}), fieldNameMap, validators)
}

func StandaloneHostIdfwConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["idfw_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["idfw_enabled"] = "IdfwEnabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.standalone_host_idfw_configuration", fields, reflect.TypeOf(StandaloneHostIdfwConfiguration{}), fieldNameMap, validators)
}

func StatItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["tooltip"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TooltipBindingType), reflect.TypeOf([]Tooltip{})))
	fieldNameMap["tooltip"] = "Tooltip"
	fields["total"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["total"] = "Total"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.stat_item", fields, reflect.TypeOf(StatItem{}), fieldNameMap, validators)
}

func StaticARPConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.static_ARP_config", fields, reflect.TypeOf(StaticARPConfig{}), fieldNameMap, validators)
}

func StaticFilterBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["value"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["value"] = "Value"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.static_filter", fields, reflect.TypeOf(StaticFilter{}), fieldNameMap, validators)
}

func StaticRouteBfdPeerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["bfd_profile_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["bfd_profile_path"] = "BfdProfilePath"
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["peer_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["peer_address"] = "PeerAddress"
	fields["scope"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["scope"] = "Scope"
	fields["source_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["source_addresses"] = "SourceAddresses"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.static_route_bfd_peer", fields, reflect.TypeOf(StaticRouteBfdPeer{}), fieldNameMap, validators)
}

func StaticRouteBfdPeerListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(StaticRouteBfdPeerBindingType), reflect.TypeOf([]StaticRouteBfdPeer{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.static_route_bfd_peer_list_result", fields, reflect.TypeOf(StaticRouteBfdPeerListResult{}), fieldNameMap, validators)
}

func StaticRoutesBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enabled_on_secondary"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled_on_secondary"] = "EnabledOnSecondary"
	fields["network"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network"] = "Network"
	fields["next_hops"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RouterNexthopBindingType), reflect.TypeOf([]RouterNexthop{})))
	fieldNameMap["next_hops"] = "NextHops"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.static_routes", fields, reflect.TypeOf(StaticRoutes{}), fieldNameMap, validators)
}

func StaticRoutesListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(StaticRoutesBindingType), reflect.TypeOf([]StaticRoutes{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.static_routes_list_result", fields, reflect.TypeOf(StaticRoutesListResult{}), fieldNameMap, validators)
}

func StatsConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["navigation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["navigation"] = "Navigation"
	fields["sections"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DonutSectionBindingType), reflect.TypeOf([]DonutSection{})))
	fieldNameMap["sections"] = "Sections"
	fields["stat"] = bindings.NewOptionalType(bindings.NewReferenceType(StatItemBindingType))
	fieldNameMap["stat"] = "Stat"
	fields["sub_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sub_type"] = "SubType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.stats_configuration", fields, reflect.TypeOf(StatsConfiguration{}), fieldNameMap, validators)
}

func TagBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["scope"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scope"] = "Scope"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tag", fields, reflect.TypeOf(Tag{}), fieldNameMap, validators)
}

func TagBulkOperationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["apply_to"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceInfoBindingType), reflect.TypeOf([]ResourceInfo{})))
	fieldNameMap["apply_to"] = "ApplyTo"
	fields["remove_from"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceInfoBindingType), reflect.TypeOf([]ResourceInfo{})))
	fieldNameMap["remove_from"] = "RemoveFrom"
	fields["tag"] = bindings.NewOptionalType(bindings.NewReferenceType(TagBindingType))
	fieldNameMap["tag"] = "Tag"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tag_bulk_operation", fields, reflect.TypeOf(TagBulkOperation{}), fieldNameMap, validators)
}

func TagBulkOperationStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["apply_to"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceTypeTagStatusBindingType), reflect.TypeOf([]ResourceTypeTagStatus{})))
	fieldNameMap["apply_to"] = "ApplyTo"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["remove_from"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceTypeTagStatusBindingType), reflect.TypeOf([]ResourceTypeTagStatus{})))
	fieldNameMap["remove_from"] = "RemoveFrom"
	fields["status"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["status"] = "Status"
	fields["tag"] = bindings.NewOptionalType(bindings.NewReferenceType(TagBindingType))
	fieldNameMap["tag"] = "Tag"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tag_bulk_operation_status", fields, reflect.TypeOf(TagBulkOperationStatus{}), fieldNameMap, validators)
}

func TagInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["scope"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["scope"] = "Scope"
	fields["tag"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tag"] = "Tag"
	fields["tagged_objects_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tagged_objects_count"] = "TaggedObjectsCount"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tag_info", fields, reflect.TypeOf(TagInfo{}), fieldNameMap, validators)
}

func TagInfoListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagInfoBindingType), reflect.TypeOf([]TagInfo{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tag_info_list_result", fields, reflect.TypeOf(TagInfoListResult{}), fieldNameMap, validators)
}

func TcpHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dst_port"] = "DstPort"
	fields["src_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["src_port"] = "SrcPort"
	fields["tcp_flags"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tcp_flags"] = "TcpFlags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tcp_header", fields, reflect.TypeOf(TcpHeader{}), fieldNameMap, validators)
}

func TcpMaximumSegmentSizeClampingBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["direction"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["direction"] = "Direction"
	fields["max_segment_size"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["max_segment_size"] = "MaxSegmentSize"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tcp_maximum_segment_size_clamping", fields, reflect.TypeOf(TcpMaximumSegmentSizeClamping{}), fieldNameMap, validators)
}

func TcpPolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tcp_policy_lb_monitor_profile", fields, reflect.TypeOf(TcpPolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func TcpPolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile"] = "LbPersistenceProfile"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["traffic_source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["traffic_source"] = "TrafficSource"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tcp_policy_lb_virtual_server", fields, reflect.TypeOf(TcpPolicyLbVirtualServer{}), fieldNameMap, validators)
}

func Tier0BindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["default_rule_logging"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["default_rule_logging"] = "DefaultRuleLogging"
	fields["dhcp_config_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dhcp_config_paths"] = "DhcpConfigPaths"
	fields["disable_firewall"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disable_firewall"] = "DisableFirewall"
	fields["failover_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failover_mode"] = "FailoverMode"
	fields["federation_config"] = bindings.NewOptionalType(bindings.NewReferenceType(FederationGatewayConfigBindingType))
	fieldNameMap["federation_config"] = "FederationConfig"
	fields["force_whitelisting"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["force_whitelisting"] = "ForceWhitelisting"
	fields["ha_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ha_mode"] = "HaMode"
	fields["internal_transit_subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["internal_transit_subnets"] = "InternalTransitSubnets"
	fields["intersite_config"] = bindings.NewOptionalType(bindings.NewReferenceType(IntersiteGatewayConfigBindingType))
	fieldNameMap["intersite_config"] = "IntersiteConfig"
	fields["ipv6_profile_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ipv6_profile_paths"] = "Ipv6ProfilePaths"
	fields["rd_admin_field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rd_admin_field"] = "RdAdminField"
	fields["transit_subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["transit_subnets"] = "TransitSubnets"
	fields["vrf_config"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0VrfConfigBindingType))
	fieldNameMap["vrf_config"] = "VrfConfig"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0", fields, reflect.TypeOf(Tier0{}), fieldNameMap, validators)
}

func Tier0DeploymentMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enforcement_point"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point"] = "EnforcementPoint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_deployment_map", fields, reflect.TypeOf(Tier0DeploymentMap{}), fieldNameMap, validators)
}

func Tier0DeploymentMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier0DeploymentMapBindingType), reflect.TypeOf([]Tier0DeploymentMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_deployment_map_list_result", fields, reflect.TypeOf(Tier0DeploymentMapListResult{}), fieldNameMap, validators)
}

func Tier0GatewayStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["ipv6_status"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPv6StatusBindingType), reflect.TypeOf([]IPv6Status{})))
	fieldNameMap["ipv6_status"] = "Ipv6Status"
	fields["tier0_state"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterStateBindingType))
	fieldNameMap["tier0_state"] = "Tier0State"
	fields["tier0_status"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterStatusBindingType))
	fieldNameMap["tier0_status"] = "Tier0Status"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_gateway_state", fields, reflect.TypeOf(Tier0GatewayState{}), fieldNameMap, validators)
}

func Tier0HaVipConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	fields["external_interface_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["external_interface_paths"] = "ExternalInterfacePaths"
	fields["vip_subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceSubnetBindingType), reflect.TypeOf([]InterfaceSubnet{})))
	fieldNameMap["vip_subnets"] = "VipSubnets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_ha_vip_config", fields, reflect.TypeOf(Tier0HaVipConfig{}), fieldNameMap, validators)
}

func Tier0InterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceSubnetBindingType), reflect.TypeOf([]InterfaceSubnet{})))
	fieldNameMap["subnets"] = "Subnets"
	fields["access_vlan_id"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["access_vlan_id"] = "AccessVlanId"
	fields["edge_cluster_member_index"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["edge_cluster_member_index"] = "EdgeClusterMemberIndex"
	fields["edge_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["edge_path"] = "EdgePath"
	fields["ipv6_profile_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ipv6_profile_paths"] = "Ipv6ProfilePaths"
	fields["ls_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ls_id"] = "LsId"
	fields["mtu"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mtu"] = "Mtu"
	fields["multicast"] = bindings.NewOptionalType(bindings.NewReferenceType(Tier0InterfacePimConfigBindingType))
	fieldNameMap["multicast"] = "Multicast"
	fields["segment_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["segment_path"] = "SegmentPath"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	fields["urpf_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["urpf_mode"] = "UrpfMode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_interface", fields, reflect.TypeOf(Tier0Interface{}), fieldNameMap, validators)
}

func Tier0InterfaceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier0InterfaceBindingType), reflect.TypeOf([]Tier0Interface{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_interface_list_result", fields, reflect.TypeOf(Tier0InterfaceListResult{}), fieldNameMap, validators)
}

func Tier0InterfacePimConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enabled"] = "Enabled"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_interface_pim_config", fields, reflect.TypeOf(Tier0InterfacePimConfig{}), fieldNameMap, validators)
}

func Tier0ListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier0BindingType), reflect.TypeOf([]Tier0{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_list_result", fields, reflect.TypeOf(Tier0ListResult{}), fieldNameMap, validators)
}

func Tier0RouteMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RouteMapEntryBindingType), reflect.TypeOf([]RouteMapEntry{})))
	fieldNameMap["entries"] = "Entries"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_route_map", fields, reflect.TypeOf(Tier0RouteMap{}), fieldNameMap, validators)
}

func Tier0RouteMapListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier0RouteMapBindingType), reflect.TypeOf([]Tier0RouteMap{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_route_map_list_result", fields, reflect.TypeOf(Tier0RouteMapListResult{}), fieldNameMap, validators)
}

func Tier0RouteRedistributionConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["bgp_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["bgp_enabled"] = "BgpEnabled"
	fields["redistribution_rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier0RouteRedistributionRuleBindingType), reflect.TypeOf([]Tier0RouteRedistributionRule{})))
	fieldNameMap["redistribution_rules"] = "RedistributionRules"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_route_redistribution_config", fields, reflect.TypeOf(Tier0RouteRedistributionConfig{}), fieldNameMap, validators)
}

func Tier0RouteRedistributionRuleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["route_map_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["route_map_path"] = "RouteMapPath"
	fields["route_redistribution_types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["route_redistribution_types"] = "RouteRedistributionTypes"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_route_redistribution_rule", fields, reflect.TypeOf(Tier0RouteRedistributionRule{}), fieldNameMap, validators)
}

func Tier0VrfConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["evpn_transit_vni"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["evpn_transit_vni"] = "EvpnTransitVni"
	fields["route_distinguisher"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["route_distinguisher"] = "RouteDistinguisher"
	fields["route_targets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(VrfRouteTargetsBindingType), reflect.TypeOf([]VrfRouteTargets{})))
	fieldNameMap["route_targets"] = "RouteTargets"
	fields["tier0_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tier0_path"] = "Tier0Path"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier0_vrf_config", fields, reflect.TypeOf(Tier0VrfConfig{}), fieldNameMap, validators)
}

func Tier1BindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["default_rule_logging"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["default_rule_logging"] = "DefaultRuleLogging"
	fields["dhcp_config_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["dhcp_config_paths"] = "DhcpConfigPaths"
	fields["disable_firewall"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["disable_firewall"] = "DisableFirewall"
	fields["enable_standby_relocation"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["enable_standby_relocation"] = "EnableStandbyRelocation"
	fields["failover_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["failover_mode"] = "FailoverMode"
	fields["federation_config"] = bindings.NewOptionalType(bindings.NewReferenceType(FederationGatewayConfigBindingType))
	fieldNameMap["federation_config"] = "FederationConfig"
	fields["force_whitelisting"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["force_whitelisting"] = "ForceWhitelisting"
	fields["intersite_config"] = bindings.NewOptionalType(bindings.NewReferenceType(IntersiteGatewayConfigBindingType))
	fieldNameMap["intersite_config"] = "IntersiteConfig"
	fields["ipv6_profile_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ipv6_profile_paths"] = "Ipv6ProfilePaths"
	fields["pool_allocation"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pool_allocation"] = "PoolAllocation"
	fields["qos_profile"] = bindings.NewOptionalType(bindings.NewReferenceType(GatewayQosProfileConfigBindingType))
	fieldNameMap["qos_profile"] = "QosProfile"
	fields["route_advertisement_rules"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(RouteAdvertisementRuleBindingType), reflect.TypeOf([]RouteAdvertisementRule{})))
	fieldNameMap["route_advertisement_rules"] = "RouteAdvertisementRules"
	fields["route_advertisement_types"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["route_advertisement_types"] = "RouteAdvertisementTypes"
	fields["tier0_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tier0_path"] = "Tier0Path"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier1", fields, reflect.TypeOf(Tier1{}), fieldNameMap, validators)
}

func Tier1DeploymentMapBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["enforcement_point"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point"] = "EnforcementPoint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier1_deployment_map", fields, reflect.TypeOf(Tier1DeploymentMap{}), fieldNameMap, validators)
}

func Tier1GatewayStateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforcement_point_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["enforcement_point_path"] = "EnforcementPointPath"
	fields["ipv6_status"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPv6StatusBindingType), reflect.TypeOf([]IPv6Status{})))
	fieldNameMap["ipv6_status"] = "Ipv6Status"
	fields["tier1_state"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterStateBindingType))
	fieldNameMap["tier1_state"] = "Tier1State"
	fields["tier1_status"] = bindings.NewOptionalType(bindings.NewReferenceType(LogicalRouterStatusBindingType))
	fieldNameMap["tier1_status"] = "Tier1Status"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier1_gateway_state", fields, reflect.TypeOf(Tier1GatewayState{}), fieldNameMap, validators)
}

func Tier1InterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["subnets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(InterfaceSubnetBindingType), reflect.TypeOf([]InterfaceSubnet{})))
	fieldNameMap["subnets"] = "Subnets"
	fields["ipv6_profile_paths"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ipv6_profile_paths"] = "Ipv6ProfilePaths"
	fields["mtu"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["mtu"] = "Mtu"
	fields["segment_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["segment_path"] = "SegmentPath"
	fields["urpf_mode"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["urpf_mode"] = "UrpfMode"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier1_interface", fields, reflect.TypeOf(Tier1Interface{}), fieldNameMap, validators)
}

func Tier1InterfaceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier1InterfaceBindingType), reflect.TypeOf([]Tier1Interface{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier1_interface_list_result", fields, reflect.TypeOf(Tier1InterfaceListResult{}), fieldNameMap, validators)
}

func Tier1ListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Tier1BindingType), reflect.TypeOf([]Tier1{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tier1_list_result", fields, reflect.TypeOf(Tier1ListResult{}), fieldNameMap, validators)
}

func TlsCertificateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["details"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(X509CertificateBindingType), reflect.TypeOf([]X509Certificate{})))
	fieldNameMap["details"] = "Details"
	fields["pem_encoded"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pem_encoded"] = "PemEncoded"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tls_certificate", fields, reflect.TypeOf(TlsCertificate{}), fieldNameMap, validators)
}

func TlsCertificateListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TlsCertificateBindingType), reflect.TypeOf([]TlsCertificate{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tls_certificate_list", fields, reflect.TypeOf(TlsCertificateList{}), fieldNameMap, validators)
}

func TlsCrlBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["details"] = bindings.NewOptionalType(bindings.NewReferenceType(X509CrlBindingType))
	fieldNameMap["details"] = "Details"
	fields["pem_encoded"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pem_encoded"] = "PemEncoded"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tls_crl", fields, reflect.TypeOf(TlsCrl{}), fieldNameMap, validators)
}

func TlsCrlListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TlsCrlBindingType), reflect.TypeOf([]TlsCrl{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tls_crl_list_result", fields, reflect.TypeOf(TlsCrlListResult{}), fieldNameMap, validators)
}

func TlsListenerCertificateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["certificate"] = bindings.NewOptionalType(bindings.NewReferenceType(X509CertificateBindingType))
	fieldNameMap["certificate"] = "Certificate"
	fields["result"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["result"] = "Result"
	fields["thumbprint"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["thumbprint"] = "Thumbprint"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tls_listener_certificate", fields, reflect.TypeOf(TlsListenerCertificate{}), fieldNameMap, validators)
}

func TlsTrustDataBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["key_algo"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["key_algo"] = "KeyAlgo"
	fields["passphrase"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["passphrase"] = "Passphrase"
	fields["pem_encoded"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["pem_encoded"] = "PemEncoded"
	fields["private_key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["private_key"] = "PrivateKey"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tls_trust_data", fields, reflect.TypeOf(TlsTrustData{}), fieldNameMap, validators)
}

func TooltipBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["condition"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["condition"] = "Condition"
	fields["heading"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["heading"] = "Heading"
	fields["text"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["text"] = "Text"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tooltip", fields, reflect.TypeOf(Tooltip{}), fieldNameMap, validators)
}

func TraceflowConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["is_transient"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_transient"] = "IsTransient"
	fields["packet"] = bindings.NewOptionalType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(PacketDataBindingType),}, bindings.REST))
	fieldNameMap["packet"] = "Packet"
	fields["segment_port_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["segment_port_path"] = "SegmentPortPath"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.traceflow_config", fields, reflect.TypeOf(TraceflowConfig{}), fieldNameMap, validators)
}

func TrafficRateLimitsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["rx_broadcast"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rx_broadcast"] = "RxBroadcast"
	fields["rx_multicast"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rx_multicast"] = "RxMulticast"
	fields["tx_broadcast"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tx_broadcast"] = "TxBroadcast"
	fields["tx_multicast"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["tx_multicast"] = "TxMulticast"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.traffic_rate_limits", fields, reflect.TypeOf(TrafficRateLimits{}), fieldNameMap, validators)
}

func TransportNodeSpanEnforcedStatusBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["enforced_status_per_transport_node"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(EnforcedStatusPerTransportNodeBindingType), reflect.TypeOf([]EnforcedStatusPerTransportNode{})))
	fieldNameMap["enforced_status_per_transport_node"] = "EnforcedStatusPerTransportNode"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.transport_node_span_enforced_status", fields, reflect.TypeOf(TransportNodeSpanEnforcedStatus{}), fieldNameMap, validators)
}

func TransportProtocolHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dhcp_header"] = bindings.NewOptionalType(bindings.NewReferenceType(DhcpHeaderBindingType))
	fieldNameMap["dhcp_header"] = "DhcpHeader"
	fields["dhcpv6_header"] = bindings.NewOptionalType(bindings.NewReferenceType(Dhcpv6HeaderBindingType))
	fieldNameMap["dhcpv6_header"] = "Dhcpv6Header"
	fields["dns_header"] = bindings.NewOptionalType(bindings.NewReferenceType(DnsHeaderBindingType))
	fieldNameMap["dns_header"] = "DnsHeader"
	fields["icmp_echo_request_header"] = bindings.NewOptionalType(bindings.NewReferenceType(IcmpEchoRequestHeaderBindingType))
	fieldNameMap["icmp_echo_request_header"] = "IcmpEchoRequestHeader"
	fields["ndp_header"] = bindings.NewOptionalType(bindings.NewReferenceType(NdpHeaderBindingType))
	fieldNameMap["ndp_header"] = "NdpHeader"
	fields["tcp_header"] = bindings.NewOptionalType(bindings.NewReferenceType(TcpHeaderBindingType))
	fieldNameMap["tcp_header"] = "TcpHeader"
	fields["udp_header"] = bindings.NewOptionalType(bindings.NewReferenceType(UdpHeaderBindingType))
	fieldNameMap["udp_header"] = "UdpHeader"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.transport_protocol_header", fields, reflect.TypeOf(TransportProtocolHeader{}), fieldNameMap, validators)
}

func TunnelInterfaceIPSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["prefix_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_length"] = "PrefixLength"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tunnel_interface_IP_subnet", fields, reflect.TypeOf(TunnelInterfaceIPSubnet{}), fieldNameMap, validators)
}

func TunnelSubnetBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["ip_addresses"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ip_addresses"] = "IpAddresses"
	fields["prefix_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["prefix_length"] = "PrefixLength"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.tunnel_subnet", fields, reflect.TypeOf(TunnelSubnet{}), fieldNameMap, validators)
}

func UdpHeaderBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dst_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["dst_port"] = "DstPort"
	fields["src_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["src_port"] = "SrcPort"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.udp_header", fields, reflect.TypeOf(UdpHeader{}), fieldNameMap, validators)
}

func UdpPolicyLbMonitorProfileBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["receive"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["receive"] = "Receive"
	fields["send"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["send"] = "Send"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["fall_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["fall_count"] = "FallCount"
	fields["interval"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["interval"] = "Interval"
	fields["monitor_port"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["monitor_port"] = "MonitorPort"
	fields["rise_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["rise_count"] = "RiseCount"
	fields["timeout"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["timeout"] = "Timeout"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.udp_policy_lb_monitor_profile", fields, reflect.TypeOf(UdpPolicyLbMonitorProfile{}), fieldNameMap, validators)
}

func UdpPolicyLbVirtualServerBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["access_log_enabled"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["access_log_enabled"] = "AccessLogEnabled"
	fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ip_address"] = "IpAddress"
	fields["lb_persistence_profile"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lb_persistence_profile"] = "LbPersistenceProfile"
	fields["ports"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ports"] = "Ports"
	fields["router_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["router_path"] = "RouterPath"
	fields["traffic_source"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["traffic_source"] = "TrafficSource"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.udp_policy_lb_virtual_server", fields, reflect.TypeOf(UdpPolicyLbVirtualServer{}), fieldNameMap, validators)
}

func UnaryOperationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["operand"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceFieldPointerBindingType))
	fieldNameMap["operand"] = "Operand"
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.unary_operation", fields, reflect.TypeOf(UnaryOperation{}), fieldNameMap, validators)
}

func UnaryOperationBasedInjectionValueBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["initial_value"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceFieldPointerBindingType))
	fieldNameMap["initial_value"] = "InitialValue"
	fields["operation"] = bindings.NewOptionalType(bindings.NewReferenceType(UnaryOperationBindingType))
	fieldNameMap["operation"] = "Operation"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.unary_operation_based_injection_value", fields, reflect.TypeOf(UnaryOperationBasedInjectionValue{}), fieldNameMap, validators)
}

func UrlAliasBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alias"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alias"] = "Alias"
	fields["query"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["query"] = "Query"
	fields["url"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["url"] = "Url"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.url_alias", fields, reflect.TypeOf(UrlAlias{}), fieldNameMap, validators)
}

func UserInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["roles"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(NsxRoleBindingType), reflect.TypeOf([]NsxRole{})))
	fieldNameMap["roles"] = "Roles"
	fields["user_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["user_name"] = "UserName"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.user_info", fields, reflect.TypeOf(UserInfo{}), fieldNameMap, validators)
}

func ValueConstraintExpressionBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["operator"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["operator"] = "Operator"
	fields["values"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["values"] = "Values"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.value_constraint_expression", fields, reflect.TypeOf(ValueConstraintExpression{}), fieldNameMap, validators)
}

func VersionListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["acceptable_versions"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["acceptable_versions"] = "AcceptableVersions"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.version_list", fields, reflect.TypeOf(VersionList{}), fieldNameMap, validators)
}

func VidmInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["name"] = "Name"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.vidm_info", fields, reflect.TypeOf(VidmInfo{}), fieldNameMap, validators)
}

func VidmInfoListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(VidmInfoBindingType), reflect.TypeOf([]VidmInfo{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.vidm_info_list_result", fields, reflect.TypeOf(VidmInfoListResult{}), fieldNameMap, validators)
}

func ViewBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["exclude_roles"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["exclude_roles"] = "ExcludeRoles"
	fields["include_roles"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["include_roles"] = "IncludeRoles"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	fields["widgets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(WidgetItemBindingType), reflect.TypeOf([]WidgetItem{})))
	fieldNameMap["widgets"] = "Widgets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.view", fields, reflect.TypeOf(View{}), fieldNameMap, validators)
}

func ViewListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["views"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ViewBindingType), reflect.TypeOf([]View{})))
	fieldNameMap["views"] = "Views"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.view_list", fields, reflect.TypeOf(ViewList{}), fieldNameMap, validators)
}

func VirtualEndpointBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["service_names"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["service_names"] = "ServiceNames"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["target_ips"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IPInfoBindingType), reflect.TypeOf([]IPInfo{})))
	fieldNameMap["target_ips"] = "TargetIps"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.virtual_endpoint", fields, reflect.TypeOf(VirtualEndpoint{}), fieldNameMap, validators)
}

func VirtualMachineBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["compute_ids"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["compute_ids"] = "ComputeIds"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["guest_info"] = bindings.NewOptionalType(bindings.NewReferenceType(GuestInfoBindingType))
	fieldNameMap["guest_info"] = "GuestInfo"
	fields["host_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host_id"] = "HostId"
	fields["local_id_on_host"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["local_id_on_host"] = "LocalIdOnHost"
	fields["power_state"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["power_state"] = "PowerState"
	fields["source"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceReferenceBindingType))
	fieldNameMap["source"] = "Source"
	fields["type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["type"] = "Type_"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.virtual_machine", fields, reflect.TypeOf(VirtualMachine{}), fieldNameMap, validators)
}

func VirtualNetworkInterfaceBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["device_key"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["device_key"] = "DeviceKey"
	fields["device_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["device_name"] = "DeviceName"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["host_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host_id"] = "HostId"
	fields["ip_address_info"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IpAddressInfoBindingType), reflect.TypeOf([]IpAddressInfo{})))
	fieldNameMap["ip_address_info"] = "IpAddressInfo"
	fields["lport_attachment_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["lport_attachment_id"] = "LportAttachmentId"
	fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["mac_address"] = "MacAddress"
	fields["owner_vm_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["owner_vm_id"] = "OwnerVmId"
	fields["owner_vm_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["owner_vm_type"] = "OwnerVmType"
	fields["vm_local_id_on_host"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["vm_local_id_on_host"] = "VmLocalIdOnHost"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.virtual_network_interface", fields, reflect.TypeOf(VirtualNetworkInterface{}), fieldNameMap, validators)
}

func VirtualNetworkInterfaceListResultBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["cursor"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cursor"] = "Cursor"
	fields["result_count"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["result_count"] = "ResultCount"
	fields["sort_ascending"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["sort_ascending"] = "SortAscending"
	fields["sort_by"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["sort_by"] = "SortBy"
	fields["results"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(VirtualNetworkInterfaceBindingType), reflect.TypeOf([]VirtualNetworkInterface{})))
	fieldNameMap["results"] = "Results"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.virtual_network_interface_list_result", fields, reflect.TypeOf(VirtualNetworkInterfaceListResult{}), fieldNameMap, validators)
}

func VirtualPortgroupBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cm_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cm_local_id"] = "CmLocalId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["origin_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_type"] = "OriginType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.virtual_portgroup", fields, reflect.TypeOf(VirtualPortgroup{}), fieldNameMap, validators)
}

func VirtualSwitchBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["cm_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["cm_local_id"] = "CmLocalId"
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["origin_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_id"] = "OriginId"
	fields["origin_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["origin_type"] = "OriginType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.virtual_switch", fields, reflect.TypeOf(VirtualSwitch{}), fieldNameMap, validators)
}

func VmToolsInfoBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["external_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["external_id"] = "ExternalId"
	fields["file_agent_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["file_agent_version"] = "FileAgentVersion"
	fields["host_local_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["host_local_id"] = "HostLocalId"
	fields["network_agent_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["network_agent_version"] = "NetworkAgentVersion"
	fields["source"] = bindings.NewOptionalType(bindings.NewReferenceType(ResourceReferenceBindingType))
	fieldNameMap["source"] = "Source"
	fields["tools_version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["tools_version"] = "ToolsVersion"
	fields["vm_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["vm_type"] = "VmType"
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_last_sync_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_sync_time"] = "LastSyncTime"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.vm_tools_info", fields, reflect.TypeOf(VmToolsInfo{}), fieldNameMap, validators)
}

func VniPoolConfigBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["end"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["end"] = "End"
	fields["start"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["start"] = "Start"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.vni_pool_config", fields, reflect.TypeOf(VniPoolConfig{}), fieldNameMap, validators)
}

func VrfRouteTargetsBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["parent_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["parent_path"] = "ParentPath"
	fields["path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["path"] = "Path"
	fields["relative_path"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["relative_path"] = "RelativePath"
	fields["unique_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["unique_id"] = "UniqueId"
	fields["children"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(ChildPolicyConfigResourceBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["children"] = "Children"
	fields["marked_for_delete"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["marked_for_delete"] = "MarkedForDelete"
	fields["overridden"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["overridden"] = "Overridden"
	fields["address_family"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["address_family"] = "AddressFamily"
	fields["export_route_targets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["export_route_targets"] = "ExportRouteTargets"
	fields["import_route_targets"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["import_route_targets"] = "ImportRouteTargets"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.vrf_route_targets", fields, reflect.TypeOf(VrfRouteTargets{}), fieldNameMap, validators)
}

func WeeklyBackupScheduleBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["days_of_week"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewIntegerType(), reflect.TypeOf([]int64{})))
	fieldNameMap["days_of_week"] = "DaysOfWeek"
	fields["hour_of_day"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["hour_of_day"] = "HourOfDay"
	fields["minute_of_day"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["minute_of_day"] = "MinuteOfDay"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.weekly_backup_schedule", fields, reflect.TypeOf(WeeklyBackupSchedule{}), fieldNameMap, validators)
}

func WidgetConfigurationBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["_links"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(ResourceLinkBindingType), reflect.TypeOf([]ResourceLink{})))
	fieldNameMap["_links"] = "Links"
	fields["_schema"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_schema"] = "Schema"
	fields["_self"] = bindings.NewOptionalType(bindings.NewReferenceType(SelfResourceLinkBindingType))
	fieldNameMap["_self"] = "Self"
	fields["_revision"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_revision"] = "Revision"
	fields["_create_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_create_time"] = "CreateTime"
	fields["_create_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_create_user"] = "CreateUser"
	fields["_last_modified_time"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["_last_modified_time"] = "LastModifiedTime"
	fields["_last_modified_user"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_last_modified_user"] = "LastModifiedUser"
	fields["_protection"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["_protection"] = "Protection"
	fields["_system_owned"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["_system_owned"] = "SystemOwned"
	fields["description"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["description"] = "Description"
	fields["display_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["display_name"] = "DisplayName"
	fields["id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["id"] = "Id"
	fields["resource_type"] = bindings.NewStringType()
	fieldNameMap["resource_type"] = "ResourceType"
	fields["tags"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(TagBindingType), reflect.TypeOf([]Tag{})))
	fieldNameMap["tags"] = "Tags"
	fields["datasources"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DatasourceBindingType), reflect.TypeOf([]Datasource{})))
	fieldNameMap["datasources"] = "Datasources"
	fields["default_filter_value"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(DefaultFilterValueBindingType), reflect.TypeOf([]DefaultFilterValue{})))
	fieldNameMap["default_filter_value"] = "DefaultFilterValue"
	fields["drilldown_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["drilldown_id"] = "DrilldownId"
	fields["filter"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["filter"] = "Filter"
	fields["filter_value_required"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["filter_value_required"] = "FilterValueRequired"
	fields["footer"] = bindings.NewOptionalType(bindings.NewReferenceType(FooterBindingType))
	fieldNameMap["footer"] = "Footer"
	fields["icons"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(IconBindingType), reflect.TypeOf([]Icon{})))
	fieldNameMap["icons"] = "Icons"
	fields["is_drilldown"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_drilldown"] = "IsDrilldown"
	fields["legend"] = bindings.NewOptionalType(bindings.NewReferenceType(LegendBindingType))
	fieldNameMap["legend"] = "Legend"
	fields["shared"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["shared"] = "Shared"
	fields["span"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["span"] = "Span"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.widget_configuration", fields, reflect.TypeOf(WidgetConfiguration{}), fieldNameMap, validators)
}

func WidgetConfigurationListBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["widgetconfigurations"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewDynamicStructType([]bindings.ReferenceType{bindings.NewReferenceType(WidgetConfigurationBindingType),}, bindings.REST), reflect.TypeOf([]*data.StructValue{})))
	fieldNameMap["widgetconfigurations"] = "Widgetconfigurations"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.widget_configuration_list", fields, reflect.TypeOf(WidgetConfigurationList{}), fieldNameMap, validators)
}

func WidgetItemBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["alignment"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["alignment"] = "Alignment"
	fields["label"] = bindings.NewOptionalType(bindings.NewReferenceType(LabelBindingType))
	fieldNameMap["label"] = "Label"
	fields["separator"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["separator"] = "Separator"
	fields["weight"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["weight"] = "Weight"
	fields["widget_id"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["widget_id"] = "WidgetId"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.widget_item", fields, reflect.TypeOf(WidgetItem{}), fieldNameMap, validators)
}

func X509CertificateBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["dsa_public_key_g"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dsa_public_key_g"] = "DsaPublicKeyg"
	fields["dsa_public_key_p"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dsa_public_key_p"] = "DsaPublicKeyp"
	fields["dsa_public_key_q"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dsa_public_key_q"] = "DsaPublicKeyq"
	fields["dsa_public_key_y"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["dsa_public_key_y"] = "DsaPublicKeyy"
	fields["ecdsa_curve_name"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_curve_name"] = "EcdsaCurveName"
	fields["ecdsa_ec_field"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_ec_field"] = "EcdsaEcField"
	fields["ecdsa_ec_field_f2mks"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewIntegerType(), reflect.TypeOf([]int64{})))
	fieldNameMap["ecdsa_ec_field_f2mks"] = "EcdsaEcFieldF2mks"
	fields["ecdsa_ec_field_f2mm"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ecdsa_ec_field_f2mm"] = "EcdsaEcFieldF2mm"
	fields["ecdsa_ec_field_f2mrp"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_ec_field_f2mrp"] = "EcdsaEcFieldF2mrp"
	fields["ecdsa_ec_field_f2pp"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_ec_field_f2pp"] = "EcdsaEcFieldF2pp"
	fields["ecdsa_public_key_a"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_public_key_a"] = "EcdsaPublicKeya"
	fields["ecdsa_public_key_b"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_public_key_b"] = "EcdsaPublicKeyb"
	fields["ecdsa_public_key_cofactor"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["ecdsa_public_key_cofactor"] = "EcdsaPublicKeyCofactor"
	fields["ecdsa_public_key_generator_x"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_public_key_generator_x"] = "EcdsaPublicKeyGeneratorx"
	fields["ecdsa_public_key_generator_y"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_public_key_generator_y"] = "EcdsaPublicKeyGeneratory"
	fields["ecdsa_public_key_order"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["ecdsa_public_key_order"] = "EcdsaPublicKeyOrder"
	fields["ecdsa_public_key_seed"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
	fieldNameMap["ecdsa_public_key_seed"] = "EcdsaPublicKeySeed"
	fields["is_ca"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_ca"] = "IsCa"
	fields["is_valid"] = bindings.NewOptionalType(bindings.NewBooleanType())
	fieldNameMap["is_valid"] = "IsValid"
	fields["issuer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["issuer"] = "Issuer"
	fields["issuer_cn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["issuer_cn"] = "IssuerCn"
	fields["not_after"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["not_after"] = "NotAfter"
	fields["not_before"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["not_before"] = "NotBefore"
	fields["public_key_algo"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["public_key_algo"] = "PublicKeyAlgo"
	fields["public_key_length"] = bindings.NewOptionalType(bindings.NewIntegerType())
	fieldNameMap["public_key_length"] = "PublicKeyLength"
	fields["rsa_public_key_exponent"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rsa_public_key_exponent"] = "RsaPublicKeyExponent"
	fields["rsa_public_key_modulus"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["rsa_public_key_modulus"] = "RsaPublicKeyModulus"
	fields["serial_number"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["serial_number"] = "SerialNumber"
	fields["signature"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["signature"] = "Signature"
	fields["signature_algorithm"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["signature_algorithm"] = "SignatureAlgorithm"
	fields["subject"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["subject"] = "Subject"
	fields["subject_cn"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["subject_cn"] = "SubjectCn"
	fields["version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["version"] = "Version"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.x509_certificate", fields, reflect.TypeOf(X509Certificate{}), fieldNameMap, validators)
}

func X509CrlBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["crl_entries"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(X509CrlEntryBindingType), reflect.TypeOf([]X509CrlEntry{})))
	fieldNameMap["crl_entries"] = "CrlEntries"
	fields["issuer"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["issuer"] = "Issuer"
	fields["next_update"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["next_update"] = "NextUpdate"
	fields["version"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["version"] = "Version"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.x509_crl", fields, reflect.TypeOf(X509Crl{}), fieldNameMap, validators)
}

func X509CrlEntryBindingType() bindings.BindingType {
	fields := make(map[string]bindings.BindingType)
	fieldNameMap := make(map[string]string)
	fields["revocation_date"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["revocation_date"] = "RevocationDate"
	fields["serial_number"] = bindings.NewOptionalType(bindings.NewStringType())
	fieldNameMap["serial_number"] = "SerialNumber"
	var validators = []bindings.Validator{}
	return bindings.NewStructType("com.vmware.nsx_global_policy.model.x509_crl_entry", fields, reflect.TypeOf(X509CrlEntry{}), fieldNameMap, validators)
}


