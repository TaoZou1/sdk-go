/*
 * Copyright 2019 VMware, Inc.  All rights reserved.
 */

/*
 * AUTO GENERATED FILE -- DO NOT MODIFY!
 *
 * Interface file for service: ImportSession
 * Used by client-side stubs.
 */

package importSession

import (
    "gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/data"
    "net/url"
)

// The ``ImportSession`` interface provides methods to import an OVF package. 
//
//  OVF package data can be transferred by the server pulling them from a HTTP(S) source or a content library item, or the client can push them using HTTP(S) PUT requests. 
//
//  An OVF import proceeds as follows: 
//
// Create import session
//     Create import session object by specifying the source type (PUSH_SOURCE, PULL_SOURCE, CONTENT_LIBRARY_SOURCE).
// Wait for descriptor
//     Wait for the OVF descriptor and localization bundles to be available.
// Query options
//     Querying the import session for OVF instantiation parameters.
// Select parameters
//     Selecting instantiation parameters.
// Instantiate
//     Initiate instantiate.
// Wait for completion
//     Wait for completion and push files if this is a push upload.
//  
//
//  The steps query option/select parameters can happen multiple times. For example, an OVF deployment wizard would typically query for parameters multiple times to get more specific information about possible values for instantiation parameters, as well as validating the provided values as the user progresses through the wizard. 
//
//  Concurrent import of files is supported. For push import the client can push multiple files at the same time.
type ImportSessionClient interface {


    // Creates an import session that can instantiate an OVF package to a resource pool. 
    //
    //  This method is idempotent. Two calls with the same client token will receive the same import session object.
    //
    // @param clientTokenParam  The client token that ensures idempotency. The client token must be a valid UUID.
    // If not specified, then it will be generated by the system.
    // @param resourcePoolParam  The identifier of the resource pool to instantiate to.
    // The parameter must be an identifier for the resource type: ``ResourcePool``.
    // @param hostSystemParam  The identifier of the host to instantiate to.
    // The parameter must be an identifier for the resource type: ``HostSystem``.
    // This is optional if it can be deduced from the resourcePool (for example, stand-alone host or DRS-enabled cluster).
    // @param folderParam  The identifier of folder to instantiate to.
    // The parameter must be an identifier for the resource type: ``Folder``.
    // This is optional if it can be deduced from the resourcePool (for example, stand-alone host or DRS-enabled cluster).
    // @param createSpecParam  Creation spec containing a set of parameters to control the behavior of the import.
    // The parameter must contain all the properties defined in CreateSpec.
    // @return Reference to the created import session.
    // The return value will be an identifier for the resource type: ``com.vmware.vcenter.OvfImportSession``.
    // @throws InvalidArgument  if the provided createSpec contain an invalid argument.
    // @throws NotFound  if a specified source or destinaton for the OVF package does not exist.
    // @throws ResourceInaccessible  if there was an error accessing the OVF package at the specified source.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    // * The resource ``ResourcePool`` referenced by the parameter ``resource_pool`` requires ``System.Read``.
    // * The resource ``HostSystem`` referenced by the parameter ``host_system`` requires ``System.Read``.
    // * The resource ``Folder`` referenced by the parameter ``folder`` requires ``System.Read``.
    // * The resource ``com.vmware.content.library.Item`` referenced by the property CreateSpec#contentLibraryItem requires ``System.Read``.
    CreateForResourcePool(clientTokenParam *string, resourcePoolParam string, hostSystemParam *string, folderParam *string, createSpecParam *data.StructValue) (string, error) 


    // Retrieves information about an import session.
    //
    // @param idParam  the import session ID.
    // The parameter must be an identifier for the resource type: ``com.vmware.vcenter.OvfImportSession``.
    // @return Returns information about an import session.
    // @throws NotFound  if the specified session could not be found. It may have been deleted or timed out.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    // * The resource ``com.vmware.vcenter.OvfImportSession`` referenced by the parameter ``id`` requires ``System.Read``.
    Get(idParam string) (Info, error) 


    // Returns information about the instantiation parameters that can be specified for the import session when an import session is in the State#State_IMPORT_SELECTING_OVF_PARAMS state. The instantiation parameters returned may depend on the choices specified in any instantiation parameters provided as input arguments. 
    //
    //  This method can be iteratively called with progressively more detailed instantiation parameters. 
    //
    //  The method does not change the state of the import session. The call must supply all instantiation parameters each time. They are not remembered from one invocation to the next. This also means that the method is naturally idempotent.
    //
    // @param idParam  the import session ID.
    // The parameter must be an identifier for the resource type: ``com.vmware.vcenter.OvfImportSession``.
    // @param instantiationParametersParam  a Array of OVF parameter structures that specifies a set of deployment specific parameters.
    // The parameter must contain all the properties defined in ovf.OvfParams.
    // @return A Array of OVF parameters structures that provides information about the OVF package and the target environment, along with any warnings or errors.
    // @throws NotFound  if the specified session could not be found. It may have been deleted or timed out.
    // @throws NotAllowedInCurrentState  if the specified session is not in the State#State_IMPORT_SELECTING_OVF_PARAMS state.
    // @throws NotAllowedInCurrentState  if the cluster has no hosts, or all hosts are down or in maintenance mode.
    // @throws Unauthorized  If you do not have all of the privileges described in the following list: 
    //
    // * Method execution requires VirtualMachine.Config.AddNewDisk if ovf has disk drive (type 17) section.
    // * Method execution requires VirtualMachine.Config.AdvancedConfig if ovf has ExtraConfig section.
    // * Method execution requires Extension.Register for specified resource group if ovf has vServiceDependency section.
    // * Method execution requires Network.Assign for target network if specified.
    // * Method execution requires Datastore.AllocateSpace for target datastore if specified.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    // * The resource ``com.vmware.vcenter.OvfImportSession`` referenced by the parameter ``id`` requires ``System.Read``.
    TryInstantiate(idParam string, instantiationParametersParam []*data.StructValue) (OvfValidationResult, error) 


    // Instantiates the virtual machine or virtual appliance. 
    //
    //  This method is only valid to call with an import session in state State#State_IMPORT_SELECTING_OVF_PARAMS. 
    //
    //  During the execution of this method the session state will progress over State#State_IMPORT_FILE_TRANSFER and State#State_IMPORT_INSTANTIATING to State#State_IMPORT_COMPLETED. 
    //
    //  This method must be called to complete the session. After the call it is an error to call instantiate.
    //
    // @param idParam  the import session ID.
    // The parameter must be an identifier for the resource type: ``com.vmware.vcenter.OvfImportSession``.
    // @param instantiationParametersParam  a Array of OVF parameter structures that specifies a set of deployment specific parameters.
    // The parameter must contain all the properties defined in ovf.OvfParams.
    // @throws NotFound  if the specified session could not be found. It may have been deleted or timed out.
    // @throws NotAllowedInCurrentState  if the specified session is not in the State#State_IMPORT_SELECTING_OVF_PARAMS state.
    // @throws NotAllowedInCurrentState  if the cluster has no hosts, or all hosts are down or in maintenance mode.
    // @throws InvalidArgument  if the provided instantiationParameters contain an invalid argument.
    // @throws Unsupported  if a session of the given type cannot be instantiated. This happens for probe sessions.
    // @throws Unauthorized  If you do not have all of the privileges described in the following list: 
    //
    // * Method execution requires VirtualMachine.Config.AddNewDisk if ovf has disk drive (type 17) section.
    // * Method execution requires VirtualMachine.Config.AdvancedConfig if ovf has ExtraConfig section.
    // * Method execution requires Extension.Register for specified resource group if ovf has vServiceDependency section.
    // * Method execution requires Network.Assign for target network if specified.
    // * Method execution requires Datastore.AllocateSpace for target datastore if specified.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    // * The resource ``com.vmware.vcenter.OvfImportSession`` referenced by the parameter ``id`` requires ``System.Read``.
    Instantiate(idParam string, instantiationParametersParam []*data.StructValue) error 


    // Used by the client to set the progress of disk upload when the source type is SourceType#SourceType_PUSH_SOURCE. Should be called regularly to keep the given export session alive.
    //
    // @param idParam  the import session ID.
    // The parameter must be an identifier for the resource type: ``com.vmware.vcenter.OvfImportSession``.
    // @param percentParam  upload completion status represented as an integer in the range 0-100.
    // @throws NotFound  if the specified session could not be found.
    // @throws InvalidArgument  if the provided completion status is less than the current progress or more than 100, or the CreateSpec#sourceType is not SourceType#SourceType_PUSH_SOURCE.
    // @throws NotAllowedInCurrentState  if the specified session is not in the State#State_IMPORT_FILE_TRANSFER state.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    // * The resource ``com.vmware.vcenter.OvfImportSession`` referenced by the parameter ``id`` requires ``System.Read``.
    Progress(idParam string, percentParam int64) error 


    // Deletes (or cancels) an import session. 
    //
    //  A client should terminate a session to free up resources on the server. An import session will automatically be reclaimed after a period of inactivity. For example it will only remain in State#State_IMPORT_ERROR and State#State_IMPORT_COMPLETED state for a period of time.
    //
    // @param idParam  the import session ID.
    // The parameter must be an identifier for the resource type: ``com.vmware.vcenter.OvfImportSession``.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    // * The resource ``com.vmware.vcenter.OvfImportSession`` referenced by the parameter ``id`` requires ``System.Read``.
    Delete(idParam string) error 


    // Do a preview of an OVF descriptor. This can be used to get an overview of the required files that need to be transferred, and basic validation result during an OVF template import. The OVF descriptor can be in plain text or compressed by gzip and followed by base64 encoding. Note that the compression must be gzip and must be encoded with base64 after compression, otherwise ``InvalidArgument`` exception will be thrown.
    //
    // @param ovfDescriptorParam  The content of an OVF descriptor
    // @return Preview
    // @throws InvalidArgument  If the given OVF descriptor is invalid, or not properly compressed.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    Preview(ovfDescriptorParam string) (Preview, error) 


    //
    //
    // @param uriParam  the pull source URI to be probed.
    // @param sslCertificateThumbprintParam  the thumbprint of the expected SSL certificate for this URI
    // @return the pull source URI probe result.
    // @throws com.vmware.vapi.std.errors.Unauthorized if you do not have all of the privileges described as follows: 
    //
    // * Method execution requires ``System.Read``.
    Probe(uriParam url.URL, sslCertificateThumbprintParam *string) (ProbeResult, error) 

}
