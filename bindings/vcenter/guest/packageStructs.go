/*
 * Copyright 2019 VMware, Inc.  All rights reserved.
 */

/*
 * AUTO GENERATED FILE -- DO NOT MODIFY!
 *
 * Data type definitions file for package: com.vmware.vcenter.guest.
 * Includes binding types of a top level structures and enumerations.
 * Shared by client-side stubs and server-side skeletons to ensure type
 * compatibility.
 */

package guest

import (
    "reflect"
    "gitlab.eng.vmware.com/golangsdk/vsphere-automation-sdk-go/runtime/bindings"
)



// The ``HostnameGenerator`` class specifies various mechanisms of generating the hostname for the guest inside the virtual machine while customization. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type HostnameGenerator struct {
    Type_ HostnameGenerator_Type
    FixedName *string
    Prefix *string
}




    
    // The ``Type`` enumeration class specifies different types of Name Generators. **Warning:** This enumeration is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    //
    // <p> See {@link com.vmware.vapi.bindings.ApiEnumeration enumerated types description}.
     
    type HostnameGenerator_Type string

    const (
        // Specifies that a fixed name should be used for the hostname for the virtual machine during the customization. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         HostnameGenerator_Type_FIXED HostnameGenerator_Type = "FIXED"
        // Specifies that a unique name should be generated by concatenating the base string with a number including the network name of the guest. 
        //
        //  Virtual machine names are unique across the set of hosts and virtual machines known to the VirtualCenter instance. VirtualCenter tracks the network names of virtual machines as well as hosts. VMware Tools runs in a guest operating system and reports information to VirtualCenter.. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         HostnameGenerator_Type_PREFIX HostnameGenerator_Type = "PREFIX"
        // Specifies that the VirtualCenter should generate a virtual machine name. 
        //
        //  The name is generated from a base prefix comprising the virtual machine entity name. A number is appended, if necessary, to make it unique. 
        //
        //  Virtual machine names are unique across the set of hosts and virtual machines known to the VirtualCenter instance. VirtualCenter tracks the network names of the virtual machines as well as hosts. VMware Tools runs in a guest operating system and reports information to VirtualCenter, including the network name of the guest.. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         HostnameGenerator_Type_VIRTUAL_MACHINE HostnameGenerator_Type = "VIRTUAL_MACHINE"
        // Indicates that the host name is not specified in advance. The user must provide a valid value when the actual customization spec is applied to a virtual machine. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         HostnameGenerator_Type_USER_INPUT_REQUIRED HostnameGenerator_Type = "USER_INPUT_REQUIRED"
    )

    func (t HostnameGenerator_Type) HostnameGenerator_Type() bool {
        switch t {
            case HostnameGenerator_Type_FIXED:
                return true
            case HostnameGenerator_Type_PREFIX:
                return true
            case HostnameGenerator_Type_VIRTUAL_MACHINE:
                return true
            case HostnameGenerator_Type_USER_INPUT_REQUIRED:
                return true
            default:
                return false
        }
    }



// The ``UserData`` class specifies the personal data pertaining to the user of the Windows guest operating system. This class maps to the UserData key in the sysprep.xml answer file. These values are transferred directly into the sysprep.xml file that VirtualCenter stores on the target virtual disk. For more detailed information about performing unattended installation, check https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type UserData struct {
    ComputerName HostnameGenerator
    FullName string
    Organization string
    ProductKey string
}






// The ``Domain`` class specifies the information needed to join a workgroup or domain. This structure maps to the Identification key in the sysprep.xml answer file. These values are transferred into the sysprep.xml file that VirtualCenter stores on the target virtual disk. For more information about performing unattended installation, check https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type Domain struct {
    Type_ Domain_Type
    Workgroup *string
    Domain *string
    DomainUsername *string
    DomainPassword *string
}




    
    // The ``Type`` enumeration class defines the types of network the virtual machine should join to after the customization is completed. **Warning:** This enumeration is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    //
    // <p> See {@link com.vmware.vapi.bindings.ApiEnumeration enumerated types description}.
     
    type Domain_Type string

    const (
        // The virtual machine should be be joined to a workgroup. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Domain_Type_WORKGROUP Domain_Type = "WORKGROUP"
        // The virtual machine should be be joined to a domain. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Domain_Type_DOMAIN Domain_Type = "DOMAIN"
    )

    func (t Domain_Type) Domain_Type() bool {
        switch t {
            case Domain_Type_WORKGROUP:
                return true
            case Domain_Type_DOMAIN:
                return true
            default:
                return false
        }
    }



// The ``GuiUnattended`` class maps to the GuiUnattended key in the sysprep.xml answer file. These values are plugged directly into the sysprep.xml file that VirtualCenter stores on the target virtual disk. For more detailed information about performing unattended installations, check https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type GuiUnattended struct {
    AutoLogon bool
    AutoLogonCount int64
    Password *string
    TimeZone int64
}






// The ``WindowsSysprep`` class provides all the settings like user details, administrator details, etc that need to applied for a windows guest operating system during customization. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type WindowsSysprep struct {
    GuiRunOnceCommands []string
    UserData UserData
    Domain *Domain
    GuiUnattended GuiUnattended
}






// The ``WindowsConfiguration`` class specifies the settings for customizing a windows guest operating system. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type WindowsConfiguration struct {
    Reboot *WindowsConfiguration_RebootOption
    Sysprep *WindowsSysprep
    SysprepXml *string
}




    
    // The ``RebootOption`` enumeration class specifies what should be done to the guest after the customization. **Warning:** This enumeration is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    //
    // <p> See {@link com.vmware.vapi.bindings.ApiEnumeration enumerated types description}.
     
    type WindowsConfiguration_RebootOption string

    const (
        // Reboot the guest after customization. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         WindowsConfiguration_RebootOption_REBOOT WindowsConfiguration_RebootOption = "REBOOT"
        // Take no action. Leave the guest OS running after customization. This option can be used to look at values for debugging purposes. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         WindowsConfiguration_RebootOption_NO_REBOOT WindowsConfiguration_RebootOption = "NO_REBOOT"
        // Shutdown the guest after customization. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         WindowsConfiguration_RebootOption_SHUTDOWN WindowsConfiguration_RebootOption = "SHUTDOWN"
    )

    func (r WindowsConfiguration_RebootOption) WindowsConfiguration_RebootOption() bool {
        switch r {
            case WindowsConfiguration_RebootOption_REBOOT:
                return true
            case WindowsConfiguration_RebootOption_NO_REBOOT:
                return true
            case WindowsConfiguration_RebootOption_SHUTDOWN:
                return true
            default:
                return false
        }
    }



// Guest customization Settings to customize a Linux guest operating system. 
//
//  The ``LinuxConfiguration`` class contains settings that identify a Linux machine in the same way that the WindowsConfiguration class identifies a Windows machine.. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type LinuxConfiguration struct {
    Hostname HostnameGenerator
    Domain string
    TimeZone *string
    ScriptText *string
}






// The ``ConfigurationSpec`` class specifies the settings for customizing a guest operating system. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type ConfigurationSpec struct {
    WindowsConfig *WindowsConfiguration
    LinuxConfig *LinuxConfiguration
}






// The ``GlobalDNSSettings`` class specifies a collection of global IP settings in the guest operating system. In Linux, DNS server settings are global. The settings can either be statically set or supplied by a DHCP server. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type GlobalDNSSettings struct {
    DnsSuffixList []string
    DnsServers []string
}






// The ``Ipv4`` class specifies the IPv4 settings that need to be applied to a virtual network adapter. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type Ipv4 struct {
    Type_ Ipv4_Type
    IpAddress *string
    Prefix *int64
    Gateways []string
}




    
    // The ``Type`` enumeration class specifies different types of the IPv4 configuration. **Warning:** This enumeration is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    //
    // <p> See {@link com.vmware.vapi.bindings.ApiEnumeration enumerated types description}.
     
    type Ipv4_Type string

    const (
        // DHCP configuration. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Ipv4_Type_DHCP Ipv4_Type = "DHCP"
        // Static configuration. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Ipv4_Type_STATIC Ipv4_Type = "STATIC"
        // Indicates that the IPv4 settings are not specified in advance. The user must provide a valid value when the actual customization spec is applied to a virtual machine. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Ipv4_Type_USER_INPUT_REQUIRED Ipv4_Type = "USER_INPUT_REQUIRED"
    )

    func (t Ipv4_Type) Ipv4_Type() bool {
        switch t {
            case Ipv4_Type_DHCP:
                return true
            case Ipv4_Type_STATIC:
                return true
            case Ipv4_Type_USER_INPUT_REQUIRED:
                return true
            default:
                return false
        }
    }



// The ``Ipv6Address`` class specifies the the settings for a Static IPv6 configuration. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type Ipv6Address struct {
    IpAddress string
    Prefix int64
}






// The ``Ipv6`` class specifies the IPv6 settings that need to be applied to a virtual network adapter. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type Ipv6 struct {
    Type_ Ipv6_Type
    Ipv6 []Ipv6Address
    Gateways []string
}




    
    // The ``Type`` enumeration class specifies different types of the IPv6 configuration. **Warning:** This enumeration is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    //
    // <p> See {@link com.vmware.vapi.bindings.ApiEnumeration enumerated types description}.
     
    type Ipv6_Type string

    const (
        // DHCP IPv6 configuration. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Ipv6_Type_DHCP Ipv6_Type = "DHCP"
        // Static IPv6 configuration. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Ipv6_Type_STATIC Ipv6_Type = "STATIC"
        // Indicates that the IPv6 settings are not specified in advance. The user must provide a valid value when the actual customization spec is applied to a virtual machine. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         Ipv6_Type_USER_INPUT_REQUIRED Ipv6_Type = "USER_INPUT_REQUIRED"
    )

    func (t Ipv6_Type) Ipv6_Type() bool {
        switch t {
            case Ipv6_Type_DHCP:
                return true
            case Ipv6_Type_STATIC:
                return true
            case Ipv6_Type_USER_INPUT_REQUIRED:
                return true
            default:
                return false
        }
    }



// The ``WindowsNetworkAdapterSettings`` class specifies Windows specific Network settings for a virtual network adapter. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type WindowsNetworkAdapterSettings struct {
    DnsServers []string
    DnsDomain *string
    WinsServers []string
    NetBIOSMode *WindowsNetworkAdapterSettings_NetBIOSMode
}




    
    // The ``NetBIOSMode`` enumeration class specifies different NetBIOS settings for Windows guest operating systems. **Warning:** This enumeration is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    //
    // <p> See {@link com.vmware.vapi.bindings.ApiEnumeration enumerated types description}.
     
    type WindowsNetworkAdapterSettings_NetBIOSMode string

    const (
        // DHCP server decides whether or not to use NetBIOS. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         WindowsNetworkAdapterSettings_NetBIOSMode_USE_DHCP WindowsNetworkAdapterSettings_NetBIOSMode = "USE_DHCP"
        // Always use NetBIOS. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         WindowsNetworkAdapterSettings_NetBIOSMode_ENABLE WindowsNetworkAdapterSettings_NetBIOSMode = "ENABLE"
        // Never use NetBIOS. **Warning:** This constant field is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
         WindowsNetworkAdapterSettings_NetBIOSMode_DISABLE WindowsNetworkAdapterSettings_NetBIOSMode = "DISABLE"
    )

    func (n WindowsNetworkAdapterSettings_NetBIOSMode) WindowsNetworkAdapterSettings_NetBIOSMode() bool {
        switch n {
            case WindowsNetworkAdapterSettings_NetBIOSMode_USE_DHCP:
                return true
            case WindowsNetworkAdapterSettings_NetBIOSMode_ENABLE:
                return true
            case WindowsNetworkAdapterSettings_NetBIOSMode_DISABLE:
                return true
            default:
                return false
        }
    }



// The ``IPSettings`` class specifies the IP settings for a virtual network adapter. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type IPSettings struct {
    Ipv4 *Ipv4
    Ipv6 *Ipv6
    Windows *WindowsNetworkAdapterSettings
}






// The ``AdapterMapping`` class specifies the association between a virtual network adapter and its IP settings. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type AdapterMapping struct {
    MacAddress *string
    Adapter IPSettings
}






// The ``CustomizationSpec`` class contains information required to customize a virtual machine when deploying it or migrating it to a new host. **Warning:** This class is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
type CustomizationSpec struct {
    ConfigurationSpec ConfigurationSpec
    GlobalDNSSettings GlobalDNSSettings
    Interfaces []AdapterMapping
}










func HostnameGeneratorBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["type"] = bindings.NewEnumType("com.vmware.vcenter.guest.hostname_generator.type", reflect.TypeOf(HostnameGenerator_Type(HostnameGenerator_Type_FIXED)))
    fieldNameMap["type"] = "Type_"
    fields["fixed_name"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["fixed_name"] = "FixedName"
    fields["prefix"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["prefix"] = "Prefix"
    var validators = []bindings.Validator{}
    uv1 := bindings.NewUnionValidator("type",
        map[string][]bindings.FieldData {
            "FIXED": []bindings.FieldData {
                 bindings.NewFieldData("fixed_name", true),
            },
            "PREFIX": []bindings.FieldData {
                 bindings.NewFieldData("prefix", true),
            },
            "VIRTUAL_MACHINE": []bindings.FieldData {},
            "USER_INPUT_REQUIRED": []bindings.FieldData {},
        },
    )
    validators = append(validators, uv1)
    return bindings.NewStructType("com.vmware.vcenter.guest.hostname_generator",fields, reflect.TypeOf(HostnameGenerator{}), fieldNameMap, validators)
}

func UserDataBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["computer_name"] = bindings.NewReferenceType(HostnameGeneratorBindingType)
    fieldNameMap["computer_name"] = "ComputerName"
    fields["full_name"] = bindings.NewStringType()
    fieldNameMap["full_name"] = "FullName"
    fields["organization"] = bindings.NewStringType()
    fieldNameMap["organization"] = "Organization"
    fields["product_key"] = bindings.NewStringType()
    fieldNameMap["product_key"] = "ProductKey"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.user_data",fields, reflect.TypeOf(UserData{}), fieldNameMap, validators)
}

func DomainBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["type"] = bindings.NewEnumType("com.vmware.vcenter.guest.domain.type", reflect.TypeOf(Domain_Type(Domain_Type_WORKGROUP)))
    fieldNameMap["type"] = "Type_"
    fields["workgroup"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["workgroup"] = "Workgroup"
    fields["domain"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["domain"] = "Domain"
    fields["domain_username"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["domain_username"] = "DomainUsername"
    fields["domain_password"] = bindings.NewOptionalType(bindings.NewSecretType())
    fieldNameMap["domain_password"] = "DomainPassword"
    var validators = []bindings.Validator{}
    uv1 := bindings.NewUnionValidator("type",
        map[string][]bindings.FieldData {
            "WORKGROUP": []bindings.FieldData {
                 bindings.NewFieldData("workgroup", true),
            },
            "DOMAIN": []bindings.FieldData {
                 bindings.NewFieldData("domain", true),
                 bindings.NewFieldData("domain_username", true),
                 bindings.NewFieldData("domain_password", true),
            },
        },
    )
    validators = append(validators, uv1)
    return bindings.NewStructType("com.vmware.vcenter.guest.domain",fields, reflect.TypeOf(Domain{}), fieldNameMap, validators)
}

func GuiUnattendedBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["auto_logon"] = bindings.NewBooleanType()
    fieldNameMap["auto_logon"] = "AutoLogon"
    fields["auto_logon_count"] = bindings.NewIntegerType()
    fieldNameMap["auto_logon_count"] = "AutoLogonCount"
    fields["password"] = bindings.NewOptionalType(bindings.NewSecretType())
    fieldNameMap["password"] = "Password"
    fields["time_zone"] = bindings.NewIntegerType()
    fieldNameMap["time_zone"] = "TimeZone"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.gui_unattended",fields, reflect.TypeOf(GuiUnattended{}), fieldNameMap, validators)
}

func WindowsSysprepBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["gui_run_once_commands"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["gui_run_once_commands"] = "GuiRunOnceCommands"
    fields["user_data"] = bindings.NewReferenceType(UserDataBindingType)
    fieldNameMap["user_data"] = "UserData"
    fields["domain"] = bindings.NewOptionalType(bindings.NewReferenceType(DomainBindingType))
    fieldNameMap["domain"] = "Domain"
    fields["gui_unattended"] = bindings.NewReferenceType(GuiUnattendedBindingType)
    fieldNameMap["gui_unattended"] = "GuiUnattended"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.windows_sysprep",fields, reflect.TypeOf(WindowsSysprep{}), fieldNameMap, validators)
}

func WindowsConfigurationBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["reboot"] = bindings.NewOptionalType(bindings.NewEnumType("com.vmware.vcenter.guest.windows_configuration.reboot_option", reflect.TypeOf(WindowsConfiguration_RebootOption(WindowsConfiguration_RebootOption_REBOOT))))
    fieldNameMap["reboot"] = "Reboot"
    fields["sysprep"] = bindings.NewOptionalType(bindings.NewReferenceType(WindowsSysprepBindingType))
    fieldNameMap["sysprep"] = "Sysprep"
    fields["sysprep_xml"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["sysprep_xml"] = "SysprepXml"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.windows_configuration",fields, reflect.TypeOf(WindowsConfiguration{}), fieldNameMap, validators)
}

func LinuxConfigurationBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["hostname"] = bindings.NewReferenceType(HostnameGeneratorBindingType)
    fieldNameMap["hostname"] = "Hostname"
    fields["domain"] = bindings.NewStringType()
    fieldNameMap["domain"] = "Domain"
    fields["time_zone"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["time_zone"] = "TimeZone"
    fields["script_text"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["script_text"] = "ScriptText"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.linux_configuration",fields, reflect.TypeOf(LinuxConfiguration{}), fieldNameMap, validators)
}

func ConfigurationSpecBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["windows_config"] = bindings.NewOptionalType(bindings.NewReferenceType(WindowsConfigurationBindingType))
    fieldNameMap["windows_config"] = "WindowsConfig"
    fields["linux_config"] = bindings.NewOptionalType(bindings.NewReferenceType(LinuxConfigurationBindingType))
    fieldNameMap["linux_config"] = "LinuxConfig"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.configuration_spec",fields, reflect.TypeOf(ConfigurationSpec{}), fieldNameMap, validators)
}

func GlobalDNSSettingsBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["dns_suffix_list"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["dns_suffix_list"] = "DnsSuffixList"
    fields["dns_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["dns_servers"] = "DnsServers"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.global_DNS_settings",fields, reflect.TypeOf(GlobalDNSSettings{}), fieldNameMap, validators)
}

func Ipv4BindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["type"] = bindings.NewEnumType("com.vmware.vcenter.guest.ipv4.type", reflect.TypeOf(Ipv4_Type(Ipv4_Type_DHCP)))
    fieldNameMap["type"] = "Type_"
    fields["ip_address"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["ip_address"] = "IpAddress"
    fields["prefix"] = bindings.NewOptionalType(bindings.NewIntegerType())
    fieldNameMap["prefix"] = "Prefix"
    fields["gateways"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["gateways"] = "Gateways"
    var validators = []bindings.Validator{}
    uv1 := bindings.NewUnionValidator("type",
        map[string][]bindings.FieldData {
            "STATIC": []bindings.FieldData {
                 bindings.NewFieldData("ip_address", true),
                 bindings.NewFieldData("prefix", true),
            },
            "DHCP": []bindings.FieldData {},
            "USER_INPUT_REQUIRED": []bindings.FieldData {},
        },
    )
    validators = append(validators, uv1)
    return bindings.NewStructType("com.vmware.vcenter.guest.ipv4",fields, reflect.TypeOf(Ipv4{}), fieldNameMap, validators)
}

func Ipv6AddressBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["ip_address"] = bindings.NewStringType()
    fieldNameMap["ip_address"] = "IpAddress"
    fields["prefix"] = bindings.NewIntegerType()
    fieldNameMap["prefix"] = "Prefix"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.ipv6_address",fields, reflect.TypeOf(Ipv6Address{}), fieldNameMap, validators)
}

func Ipv6BindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["type"] = bindings.NewEnumType("com.vmware.vcenter.guest.ipv6.type", reflect.TypeOf(Ipv6_Type(Ipv6_Type_DHCP)))
    fieldNameMap["type"] = "Type_"
    fields["ipv6"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewReferenceType(Ipv6AddressBindingType), reflect.TypeOf([]Ipv6Address{})))
    fieldNameMap["ipv6"] = "Ipv6"
    fields["gateways"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["gateways"] = "Gateways"
    var validators = []bindings.Validator{}
    uv1 := bindings.NewUnionValidator("type",
        map[string][]bindings.FieldData {
            "STATIC": []bindings.FieldData {
                 bindings.NewFieldData("ipv6", true),
            },
            "DHCP": []bindings.FieldData {},
            "USER_INPUT_REQUIRED": []bindings.FieldData {},
        },
    )
    validators = append(validators, uv1)
    return bindings.NewStructType("com.vmware.vcenter.guest.ipv6",fields, reflect.TypeOf(Ipv6{}), fieldNameMap, validators)
}

func WindowsNetworkAdapterSettingsBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["dns_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["dns_servers"] = "DnsServers"
    fields["dns_domain"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["dns_domain"] = "DnsDomain"
    fields["wins_servers"] = bindings.NewOptionalType(bindings.NewListType(bindings.NewStringType(), reflect.TypeOf([]string{})))
    fieldNameMap["wins_servers"] = "WinsServers"
    fields["net_BIOS_mode"] = bindings.NewOptionalType(bindings.NewEnumType("com.vmware.vcenter.guest.windows_network_adapter_settings.net_BIOS_mode", reflect.TypeOf(WindowsNetworkAdapterSettings_NetBIOSMode(WindowsNetworkAdapterSettings_NetBIOSMode_USE_DHCP))))
    fieldNameMap["net_BIOS_mode"] = "NetBIOSMode"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.windows_network_adapter_settings",fields, reflect.TypeOf(WindowsNetworkAdapterSettings{}), fieldNameMap, validators)
}

func IPSettingsBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["ipv4"] = bindings.NewOptionalType(bindings.NewReferenceType(Ipv4BindingType))
    fieldNameMap["ipv4"] = "Ipv4"
    fields["ipv6"] = bindings.NewOptionalType(bindings.NewReferenceType(Ipv6BindingType))
    fieldNameMap["ipv6"] = "Ipv6"
    fields["windows"] = bindings.NewOptionalType(bindings.NewReferenceType(WindowsNetworkAdapterSettingsBindingType))
    fieldNameMap["windows"] = "Windows"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.IP_settings",fields, reflect.TypeOf(IPSettings{}), fieldNameMap, validators)
}

func AdapterMappingBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["mac_address"] = bindings.NewOptionalType(bindings.NewStringType())
    fieldNameMap["mac_address"] = "MacAddress"
    fields["adapter"] = bindings.NewReferenceType(IPSettingsBindingType)
    fieldNameMap["adapter"] = "Adapter"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.adapter_mapping",fields, reflect.TypeOf(AdapterMapping{}), fieldNameMap, validators)
}

func CustomizationSpecBindingType() bindings.BindingType {
    fields := make(map[string]bindings.BindingType)
    fieldNameMap := make(map[string]string)
    fields["configuration_spec"] = bindings.NewReferenceType(ConfigurationSpecBindingType)
    fieldNameMap["configuration_spec"] = "ConfigurationSpec"
    fields["global_DNS_settings"] = bindings.NewReferenceType(GlobalDNSSettingsBindingType)
    fieldNameMap["global_DNS_settings"] = "GlobalDNSSettings"
    fields["interfaces"] = bindings.NewListType(bindings.NewReferenceType(AdapterMappingBindingType), reflect.TypeOf([]AdapterMapping{}))
    fieldNameMap["interfaces"] = "Interfaces"
    var validators = []bindings.Validator{}
    return bindings.NewStructType("com.vmware.vcenter.guest.customization_spec",fields, reflect.TypeOf(CustomizationSpec{}), fieldNameMap, validators)
}


